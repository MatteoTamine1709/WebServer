<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>&lt;&#x2F;&gt; htmx - high power tools for html</title>
    <link href="https://htmx.org/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://htmx.org"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-07-14T00:00:00+00:00</updated>
    <id>https://htmx.org/atom.xml</id>
    <entry xml:lang="en">
        <title>htmx 1.9.3 has been released!</title>
        <published>2023-07-14T00:00:00+00:00</published>
        <updated>2023-07-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2023-07-14-htmx-1-9-3-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2023-07-14-htmx-1-9-3-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-9-3-release&quot;&gt;htmx 1.9.3 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.9.3&#x2F;&quot;&gt;1.9.3 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;hx-on&lt;&#x2F;code&gt; attribute has been deprecated (sorry) in favor of &lt;code&gt;hx-on:&amp;lt;event name&amp;gt;&lt;&#x2F;code&gt; attributes.  See &lt;a href=&quot;&#x2F;attributes&#x2F;hx-on&quot;&gt;&lt;code&gt;hx-on&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for more information.&lt;&#x2F;li&gt;
&lt;li&gt;You can now configure if a type of HTTP request uses the body for parameters or not.  In particular, the &lt;code&gt;DELETE&lt;&#x2F;code&gt; &lt;em&gt;should&lt;&#x2F;em&gt; use
query parameters, according to the spec.  htmx has used the body, instead.  To avoid breaking code we are keeping this undefined
behavior for now, but allowing people to fix it for their use cases by updating the &lt;code&gt;htmx.config.methodsThatUseUrlParams&lt;&#x2F;code&gt; config
option.  Thank you to Alex and Vincent for their feedback and work on this issue!&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;this&lt;&#x2F;code&gt; symbol is now available in event filter expressions, and refers to the element the &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; is on&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;HX-Reselect&lt;&#x2F;code&gt; HTTP response header has been added to change the selection from the returned content&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;We now have functioning CI using GitHub actions!&lt;&#x2F;li&gt;
&lt;li&gt;Fix bug where the &lt;code&gt;htmx:afterSettle&lt;&#x2F;code&gt; event was raised multiple times with oob swaps occurred&lt;&#x2F;li&gt;
&lt;li&gt;A large number of accessibility fixes were made in the docs (Thank you Denis &amp;amp; crew!)&lt;&#x2F;li&gt;
&lt;li&gt;Fixed bug w&#x2F; WebSocket extension initialization caused by ‚Äúnaked‚Äù &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; feature&lt;&#x2F;li&gt;
&lt;li&gt;Many other smaller bug fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thank you to everyone who contributed, and enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>REST Copypasta</title>
        <published>2023-06-26T00:00:00+00:00</published>
        <updated>2023-06-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/rest-copypasta/" type="text/html"/>
        <id>https://htmx.org/essays/rest-copypasta/</id>
        <content type="html">&lt;h2 id=&quot;rest-copy-pastas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rest-copy-pastas&quot; aria-label=&quot;Anchor link for: rest-copy-pastas&quot;&gt;üîó&lt;&#x2F;a&gt;REST copy-pastas&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;ackshually&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ackshually&quot; aria-label=&quot;Anchor link for: ackshually&quot;&gt;üîó&lt;&#x2F;a&gt;Ackshually‚Ä¶&lt;&#x2F;h2&gt;
&lt;div style=&quot;font-family: monospace&quot;&gt;
&lt;p&gt;I‚Äôd just like to interject for a moment.  What you‚Äôre referring to as REST,
is in fact, JSON&#x2F;RPC, or as I‚Äôve recently taken to calling it, REST-less.
JSON is not a hypermedia unto itself, but rather a plain data format made
useful by out of band information as defined by swagger documentation or
similar.&lt;&#x2F;p&gt;
&lt;p&gt;Many computer users work with a canonical version of REST every day,
without realizing it.  Through a peculiar turn of events, the version of REST
which is widely used today is often called ‚ÄúThe Web‚Äù, and many of its users are
not aware that it is basically the REST-ful architecture, defined by Roy Fielding.&lt;&#x2F;p&gt;
&lt;p&gt;There really is a REST, and these people are using it, but it is just a
part of The Web they use.  REST is the network architecture: hypermedia encodes the state
of resources for hypermedia clients. JSON is an essential part of Single Page Applications,
but useless by itself; it can only function in the context of a complete API specification.
JSON is normally used in combination with SPA libraries: the whole system
is basically RPC with JSON added, or JSON&#x2F;RPC.  All these so-called ‚ÄúREST-ful‚Äù
APIs are really JSON&#x2F;RPC.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;button _=&quot;on click
             get the innerText of the previous &lt;div&#x2F;&gt;
             then writeText(the result) with the navigator&#x27;s clipboard
             put &#x27;Copied!&#x27; into the next &lt;output&#x2F;&gt;
             wait 2s
             put &#x27;&#x27; into the next &lt;output&#x2F;&gt;&quot;&gt;
Copy
&lt;&#x2F;button&gt;
&lt;button _=&quot;on click
             get the innerText of the previous &lt;div&#x2F;&gt;
             get result.split(&#x27;\n&#x27;).map( \ l -&gt; &#x27;  &#x27; + l ).join(&#x27;\n&#x27;)
             then writeText(the result) with the navigator&#x27;s clipboard
             put &#x27;Copied for HN!&#x27; into the next &lt;output&#x2F;&gt;
             wait 2s
             put &#x27;&#x27; into the next &lt;output&#x2F;&gt;&quot;&gt;
Copy For HN
&lt;&#x2F;button&gt;
&lt;output&gt;&lt;&#x2F;output&gt;
&lt;br&#x2F;&gt;
&lt;h2 id=&quot;l0-t0-the-c-0thtrkhr&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#l0-t0-the-c-0thtrkhr&quot; aria-label=&quot;Anchor link for: l0-t0-the-c-0thtrkhr&quot;&gt;üîó&lt;&#x2F;a&gt;l‡ªê, t‡ªê thƒì ¬¢‡ªê‡∫ñtr‡∏Ñr‡∏Ø&lt;&#x2F;h2&gt;
&lt;div style=&quot;font-family: monospace&quot;&gt;
&lt;p&gt;In a world of digital wonder, allow me to take a moment to clarify. What many name as REST is, in truth, JSON&#x2F;RPC, or as
I‚Äôve lately begun to refer to it, the REST-less. JSON is not a magical script unto itself, but rather a simple parchment
of data made meaningful by wisdom from unseen sources, shaped by the likes of the Swagger tomes and their ilk.&lt;&#x2F;p&gt;
&lt;p&gt;Countless keepers of the code interact with a revered form of REST each day, oblivious to its presence. Through an
unexpected twist of fate, the interpretation of REST most commonly employed today is frequently dubbed ‚ÄúThe Web‚Äù, and
many of its inhabitants are unaware that they are, in essence, dwelling within the architectural dominion of REST, as
laid out by the sage Roy Fielding.&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, there exists a true REST, and these individuals are making use of it, but it is merely a facet of The Web they
engage with. REST is the great network architecture: hypermedia inscribes the state of resources for the hypermedia
voyagers. JSON is a vital element of Single Page Applications, yet worthless in solitude; it can only exhibit its power
within the realm of a comprehensive API specification. JSON is typically deployed in alliance with SPA libraries: the
entire realm is fundamentally RPC embellished with JSON, or JSON&#x2F;RPC. All these entities hailed as ‚ÄúREST-ful‚Äù APIs are
in actuality, the embodiment of JSON&#x2F;RPC.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;button _=&quot;on click
             get the innerText of the previous &lt;div&#x2F;&gt;
             then writeText(the result) with the navigator&#x27;s clipboard
             put &#x27;Copied!&#x27; into the next &lt;output&#x2F;&gt;
             wait 2s
             put &#x27;&#x27; into the next &lt;output&#x2F;&gt;&quot;&gt;
Copy
&lt;&#x2F;button&gt;
&lt;button _=&quot;on click
             get the innerText of the previous &lt;div&#x2F;&gt;
             get result.split(&#x27;\n&#x27;).map( \ l -&gt; &#x27;  &#x27; + l ).join(&#x27;\n&#x27;)
             then writeText(the result) with the navigator&#x27;s clipboard
             put &#x27;Copied for HN!&#x27; into the next &lt;output&#x2F;&gt;
             wait 2s
             put &#x27;&#x27; into the next &lt;output&#x2F;&gt;&quot;&gt;
Copy For HN
&lt;&#x2F;button&gt;
&lt;output&gt;&lt;&#x2F;output&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx is part of the GitHub Accelerator!</title>
        <published>2023-06-06T00:00:00+00:00</published>
        <updated>2023-06-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2023-06-06-htmx-github-accelerator/" type="text/html"/>
        <id>https://htmx.org/posts/2023-06-06-htmx-github-accelerator/</id>
        <content type="html">&lt;p&gt;We are excited to announce that htmx has been accepted into the first class of the 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;accelerator.github.com&#x2F;&quot;&gt;GitHub Open Source Accelerator&lt;&#x2F;a&gt;!  This is a tremendous opportunity to work with and
learn from some of the most successful open source developers and projects, and a great chance to get the message
out about hypermedia and htmx.&lt;&#x2F;p&gt;
&lt;p&gt;We plan on using this opportunity to begin work on htmx 2.0 and, we hope, possibly learn how to make working on htmx
a full time job!&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the other open source projects that we have met through the GitHub accelerator and that we recommend 
people check out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;boxyhq.com&#x27;&gt;BoxyHQ&lt;&#x2F;a&gt; - BoxyHQ‚Äôs suite of APIs for security and privacy helps engineering teams build and ship compliant cloud applications faster.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;cal.com&#x27;&gt;Cal.com&lt;&#x2F;a&gt; - Cal.com is a scheduling tool that helps you schedule meetings without the back-and-forth emails.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;www.crowd.dev&#x27;&gt;Crowd.dev&lt;&#x2F;a&gt; - Centralize community, product, and customer data to understand which companies are engaging with your open source project.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;documenso.com&#x27;&gt;Documenso&lt;&#x2F;a&gt; - The Open-Source DocuSign Alternative. We aim to earn your trust by enabling you to self-host the platform and examine its inner workings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;erxes.io&#x27;&gt;Erxes&lt;&#x2F;a&gt; - The Open-Source HubSpot Alternative. A single XOS enables to create unique and life-changing experiences ‚Äã‚Äãthat work for all types of business.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;formbricks.com&#x27;&gt;Formbricks&lt;&#x2F;a&gt; - Survey granular user segments at any point in the user journey. Gather up to 6x more insights with targeted micro-surveys. All open-source.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;forwardemail.net&#x27;&gt;Forward Email&lt;&#x2F;a&gt; - Free email forwarding for custom domains. For 6 years and counting, we are the go-to email service for thousands of creators, developers, and businesses.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;gitwonk.com&#x27;&gt;GitWonk&lt;&#x2F;a&gt; - GitWonk is an open-source technical documentation tool, designed and built focusing on the developer experience.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;www.hanko.io&#x27;&gt;Hanko&lt;&#x2F;a&gt; - Open-source authentication and user management for the passkey era. Integrated in minutes, for web and mobile apps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;infisical.com&#x27;&gt;Infisical&lt;&#x2F;a&gt; - Open source, end-to-end encrypted platform that lets you securely manage secrets and configs across your team, devices, and infrastructure.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;novu.co&#x27;&gt;Novu&lt;&#x2F;a&gt; - The open-source notification infrastructure for developers. Simple components and APIs for managing all communication channels in one place.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;openbb.co&#x27;&gt;OpenBB&lt;&#x2F;a&gt; - Democratizing investment research through an open source financial ecosystem. The OpenBB Terminal allows everyone to perform investment research, from everywhere.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;www.sniffnet.net&#x27;&gt;Sniffnet&lt;&#x2F;a&gt; - Sniffnet is a network monitoring tool to help you easily keep track of your Internet traffic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;typebot.io&#x27;&gt;Typebot&lt;&#x2F;a&gt; - Typebot gives you powerful blocks to create unique chat experiences. Embed them anywhere on your apps and start collecting results like magic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;www.webiny.com&#x27;&gt;Webiny&lt;&#x2F;a&gt; - Open-source enterprise-grade serverless CMS. Own your data. Scale effortlessly. Customize everything.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&#x27;https:&#x2F;&#x2F;webstudio.is&#x27;&gt;Webstudio&lt;&#x2F;a&gt; - Webstudio is an open source alternative to Webflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hypermedia On Whatever you&#x27;d Like</title>
        <published>2023-05-23T00:00:00+00:00</published>
        <updated>2023-05-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/hypermedia-on-whatever-youd-like/" type="text/html"/>
        <id>https://htmx.org/essays/hypermedia-on-whatever-youd-like/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The one big remaining (advantage of MPAs) is (server side programming) language choice. If you‚Äôre already part of the 
anti-JavaScript resistance, then nothing I say in the rest of this talk is going to matter that much. &lt;&#x2F;p&gt;
&lt;p&gt;But, I‚Äôm going to get into this later: that ship might have sailed‚Ä¶&lt;&#x2F;p&gt;
&lt;p&gt;Rich Harris - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtubetranscript.com&#x2F;?v=860d8usGC0o&amp;amp;t=440&quot;&gt;Have SPA‚Äôs Ruined The Web?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A concept we like to talk about is ‚ÄúThe HOWL Stack‚Äù.  HOWL stands for &lt;em&gt;Hypermedia On Whatever you‚Äôd Like&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a joke-but-not-really &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Solution_stack&quot;&gt;software stack&lt;&#x2F;a&gt;, and a reference to more
well known stacks like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LAMP_%28software_bundle%29&quot;&gt;The LAMP Stack&lt;&#x2F;a&gt;
or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MEAN_(solution_stack)&quot;&gt;The MEAN Stack&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The TLDR of The HOWL Stack is this: when you use a &lt;a href=&quot;&#x2F;essays&#x2F;hypermedia-driven-applications&quot;&gt;hypermedia-driven approach&lt;&#x2F;a&gt; 
for your web application, you free yourself up to choose &lt;em&gt;whatever&lt;&#x2F;em&gt; server-side technology best fits your problem and 
your own technical tastes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;feeling-the-javascript-pressure&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#feeling-the-javascript-pressure&quot; aria-label=&quot;Anchor link for: feeling-the-javascript-pressure&quot;&gt;üîó&lt;&#x2F;a&gt;Feeling The JavaScript Pressure&lt;&#x2F;h2&gt;
&lt;p&gt;If you decide to use an SPA framework for your web application you will, naturally, have a large front-end codebase 
that is written in JavaScript. &lt;&#x2F;p&gt;
&lt;p&gt;Given that, the following question inevitably will come up:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúWell, why aren‚Äôt we doing the back-end in JavaScript too?‚Äù&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is a reasonable question to ask and there are a lot of advantages to adopting the same programming language on both
sides of the wire:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can share application logic between the two code-bases.  A good example here is validation logic.&lt;&#x2F;li&gt;
&lt;li&gt;You can share data structures between the two code-bases. &lt;&#x2F;li&gt;
&lt;li&gt;You can build up expertise in a single language, JavaScript, making it easier for developers to work in various parts 
of your application.&lt;&#x2F;li&gt;
&lt;li&gt;You can reuse the build system &amp;amp; dependency management knowledge you‚Äôve acquired for the front end&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This &lt;em&gt;pressure&lt;&#x2F;em&gt; to adopt JavaScript will only grow as your investment in the JavaScript front end ecosystem grows.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, JavaScript has improved dramatically in the last five years and there are now multiple excellent
server-side runtimes for executing it.  Many of the older arguments about the messiness of the language can be
waved off as preventable via linting, developer discipline, and so forth.&lt;&#x2F;p&gt;
&lt;p&gt;JavaScript is the dominant language among the web development thought leaders and there are massive numbers of tutorials,
code camps, etc. that strongly emphasize the language.  Nothing succeeds like success, and JavaScript (as well as React)
have succeeded.&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs call the result of this &lt;em&gt;The JavaScript Pressure&lt;&#x2F;em&gt; and acknowledge that nearly every developer working with the 
web feels it at least to some extent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hypermedia-our-only-hope&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hypermedia-our-only-hope&quot; aria-label=&quot;Anchor link for: hypermedia-our-only-hope&quot;&gt;üîó&lt;&#x2F;a&gt;Hypermedia: Our Only Hope&lt;&#x2F;h2&gt;
&lt;p&gt;What hope do non-JavaScript developers have in web development?&lt;&#x2F;p&gt;
&lt;p&gt;Well, there is one older technology sitting there in the browser alongside JavaScript: &lt;em&gt;hypermedia&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Browsers offer excellent HTML support (and the related Document Object Model, or DOM).  In fact, even if you are using an 
SPA framework, you will be working with that hypermedia infrastructure in some form (via JSX templates, for example) if 
only to create UIs that a browser can understand.&lt;&#x2F;p&gt;
&lt;p&gt;So you are going to be using HTML or the related DOM APIs in some manner in your web application.&lt;&#x2F;p&gt;
&lt;p&gt;Well, what if we made HTML a more powerful hypermedia?&lt;&#x2F;p&gt;
&lt;p&gt;That‚Äôs the idea of &lt;a href=&quot;&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt;, which makes it possible to implement &lt;a href=&quot;&#x2F;examples&quot;&gt;common modern web application patterns&lt;&#x2F;a&gt; 
using the hypermedia approach.  This closes the UX gap between traditional MPAs and SPAs, making taking the hypermedia
route feasible for a much larger set of web applications.&lt;&#x2F;p&gt;
&lt;p&gt;Once you adopt this hypermedia approach (and remember, you are going to be using hypermedia infrastructure &lt;em&gt;anyway&lt;&#x2F;em&gt;,
so why not leverage it as much as possible?) a surprising side effect occurs:&lt;&#x2F;p&gt;
&lt;p&gt;Suddenly, the advantage of server-side language choice that Harris attributed to MPAs is &lt;em&gt;back on the table&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If your application‚Äôs front end is mainly written in terms of HTML, maybe with a bit of client-side scripting,
and with no large JavaScript code-base, you‚Äôve suddenly dramatically diminished (or entirely eliminated) The JavaScript 
Pressure on the back end.&lt;&#x2F;p&gt;
&lt;p&gt;You can now make your server-side language (and framework) choice based on other considerations: technical, aesthetic or
otherwise:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Perhaps you are working in AI and want to use a Lisp variant for your project&lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you are working in big data and want to use Python&lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you know Django really well and love the batteries-included approach it takes&lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you prefer Flask and the stripped-down approach it takes&lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you like the raw, close-to-the-HTML feel of PHP &lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you have an existing Java codebase that needs some sprucing up&lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you are learning Cobol, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;htmx_org&#x2F;status&#x2F;1656381761188954113&quot;&gt;and want to use htmx to make a nice front end for it&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Perhaps you just really like Rust, Ocaml, Kotlin, Haskell, .NET, Clojure, Ada, ColdFusion, Ruby‚Ä¶ whatever!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These are all perfectly reasonable technical, philosophical and aesthetic perspectives.&lt;&#x2F;p&gt;
&lt;p&gt;And, by adopting hypermedia as your primary front-end technology, you pursue any of these goals without a bicameral 
code-base. Hypermedia doesn‚Äôt care what you use to produce it: you can use hypermedia on whatever you‚Äôd like.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-open-web-for-everyone&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-open-web-for-everyone&quot; aria-label=&quot;Anchor link for: an-open-web-for-everyone&quot;&gt;üîó&lt;&#x2F;a&gt;An Open Web for Everyone&lt;&#x2F;h2&gt;
&lt;p&gt;And when we say ‚Äúwhatever‚Äù, we really mean it.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a screenshot of the &lt;a href=&quot;&#x2F;discord&quot;&gt;htmx discord&lt;&#x2F;a&gt;‚Äôs HOWL subsection recently.  Note that these are just the channels
that happen to have active traffic, there are many more.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center; padding: 16px&quot;&gt;
&lt;img src=&quot;&#x2F;img&#x2F;howl-channels.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You can see we have ongoing conversations in a bunch of different programming languages and frameworks: Java, Go, .NET, 
Rust, Clojure, PHP, Ruby, Python, Ocaml.  We even have some folks talking about using htmx with Bash and Cobol!&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly the future that we want to see: a rich and vibrant Web in which &lt;em&gt;every&lt;&#x2F;em&gt; back-end language and framework
can play as an equal &amp;amp; interesting alternative. Each language and framework has their own unique strengths &amp;amp; cultures and
each can contribute to the magical &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypermedia.systems&quot;&gt;hypermedia system&lt;&#x2F;a&gt; that is The Web.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-is-it-an-anti-javascript-resistance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-is-it-an-anti-javascript-resistance&quot; aria-label=&quot;Anchor link for: but-is-it-an-anti-javascript-resistance&quot;&gt;üîó&lt;&#x2F;a&gt;But, Is it An &lt;em&gt;Anti&lt;&#x2F;em&gt;-JavaScript Resistance?&lt;&#x2F;h2&gt;
&lt;p&gt;Before we finish this essay, we do want to address the idea that the resistance to JavaScript &lt;em&gt;everywhere&lt;&#x2F;em&gt; is necessarily
&lt;em&gt;Anti&lt;&#x2F;em&gt;-JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;Now, admittedly, we have laughed at our fair share of &lt;a href=&quot;&#x2F;img&#x2F;js-the-good-parts.jpeg&quot;&gt;jokes about JavaScript&lt;&#x2F;a&gt;, and we have 
gone so far as to create an alternative scripting language for the web, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So it might seem like we should be card-carrying anti-javascriptites.&lt;&#x2F;p&gt;
&lt;p&gt;But, to the contrary, we are deeply appreciative of JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;After all, both htmx and hyperscript are &lt;em&gt;built in JavaScript&lt;&#x2F;em&gt;.  We couldn‚Äôt have created these libraries without
JavaScript, which, whatever else one might say, has the great virtue of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Being_There&quot;&gt;&lt;em&gt;being there&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And we even go so far as to &lt;em&gt;recommend using&lt;&#x2F;em&gt; JavaScript for front-end scripting needs in a hypermedia-driven 
application, so long as you script in a &lt;a href=&quot;&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;&quot;&gt;hypermedia-friendly&lt;&#x2F;a&gt; way.&lt;&#x2F;p&gt;
&lt;p&gt;Further, we wouldn‚Äôt steer someone away from using JavaScript (or TypeScript) on the &lt;em&gt;server side&lt;&#x2F;em&gt; for a 
hypermedia-driven application, if that language is the best option for your team.  As we said earlier, JavaScript now 
has multiple excellent server-side runtimes and many excellent server-side libraries available.&lt;&#x2F;p&gt;
&lt;p&gt;It might be the best option for you and your team, and there is no reason not to use it in that case.&lt;&#x2F;p&gt;
&lt;p&gt;Hypermedia On Whatever you‚Äôd Like means just that: whatever you‚Äôd like.&lt;&#x2F;p&gt;
&lt;p&gt;But JavaScript is not, and it should not be, the &lt;em&gt;only&lt;&#x2F;em&gt; server-side option for your team.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turning-the-ship-around&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#turning-the-ship-around&quot; aria-label=&quot;Anchor link for: turning-the-ship-around&quot;&gt;üîó&lt;&#x2F;a&gt;Turning The Ship Around&lt;&#x2F;h2&gt;
&lt;p&gt;With the resurgence of interest in (and improvements of) hypermedia, an open and diverse future for The Web is now a
real possibility, if not an emerging reality.&lt;&#x2F;p&gt;
&lt;p&gt;The Web was designed to be an open, polyglot &amp;amp; participative hypermedia system.&lt;&#x2F;p&gt;
&lt;p&gt;And the ship &lt;em&gt;hasn‚Äôt sailed&lt;&#x2F;em&gt; on that dream, at least not yet!&lt;&#x2F;p&gt;
&lt;p&gt;We can keep that dream alive by re-learning and re-embracing the foundational technology of the web: hypermedia.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hate that the htmx community has devolved into builders helping each other without regard for likes, engaging
those who don‚Äôt follow the hype, expanding sound bytes into nuance. It may not score cheap social media points, but
it‚Äôs healthy. The web used to be worse than this.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;teej_dv&#x2F;status&#x2F;1655668643840098304&quot;&gt;@teej_dv&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>View Transitions</title>
        <published>2023-04-11T00:00:00+00:00</published>
        <updated>2023-04-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/view-transitions/" type="text/html"/>
        <id>https://htmx.org/essays/view-transitions/</id>
        <content type="html">&lt;p&gt;We have asserted, for a while now, that a major reason that many people have adopted the SPA architecture for web applications
is due to aesthetic considerations. &lt;&#x2F;p&gt;
&lt;p&gt;As we mention in our book &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypermedia.systems&quot;&gt;Hypermedia Systems&lt;&#x2F;a&gt;, when
discussing the Web 1.0-style contact management application we begin with, there are serious &lt;em&gt;aesthetic&lt;&#x2F;em&gt; issues with
the application, even if it has feature-parity with an SPA version:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;From a user experience perspective: there is a noticeable refresh when you move between pages of the application, or when you create, update or
delete a contact. This is because every user interaction (link click or form submission) requires a full page
refresh, with a whole new HTML document to process after each action.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;‚ÄìHypermedia Systems - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypermedia.systems&#x2F;book&#x2F;extending-html-as-hypermedia&#x2F;&quot;&gt;Chapter 5&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This jarring ‚Äúka-chunk‚Äù between webpages, often with a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;webkit.org&#x2F;blog&#x2F;66&#x2F;the-fouc-problem&#x2F;&quot;&gt;Flash of Unstyled Content&lt;&#x2F;a&gt;
has been with us forever and, while modern browsers have improved the situation somewhat (while, unfortunately, also making
it less obvious that a request is in flight) the situation is still bad, particularly when compared with what a well-crafted
SPA can achieve.&lt;&#x2F;p&gt;
&lt;p&gt;Now, early on in the life of the web, this wasn‚Äôt such a big deal. We had stars flying around dinosaurs &lt;em&gt;in the browser‚Äôs toolbar&lt;&#x2F;em&gt;,
flaming text, table-based layouts, dancing babies and so forth, and we were largely comparing the web with things like
ftp clients.&lt;&#x2F;p&gt;
&lt;p&gt;The bar was &lt;em&gt;low&lt;&#x2F;em&gt; and the times were &lt;em&gt;good&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Alas, the web has since put away such childish things, and now we are expected to present polished, attractive interfaces
to our users, &lt;em&gt;including&lt;&#x2F;em&gt; smooth transitions from one view state to another.&lt;&#x2F;p&gt;
&lt;p&gt;Again, we feel this is why many teams default to the SPA approach: the old way just seems‚Ä¶ clunky.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;css-transitions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#css-transitions&quot; aria-label=&quot;Anchor link for: css-transitions&quot;&gt;üîó&lt;&#x2F;a&gt;CSS Transitions&lt;&#x2F;h2&gt;
&lt;p&gt;The early web engineers realized that web developers would like to provide smooth transitions between different view states
and have offered various technologies for achieving this. A major one is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;transition&quot;&gt;CSS Transitions&lt;&#x2F;a&gt;,
which allow you to specify a mathematical &lt;em&gt;transition&lt;&#x2F;em&gt; from one state to another.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately for HTML, CSS transitions are only available if you use JavaScript: you have to change elements dynamically
in order to trigger the transitions, which ‚Äúvanilla‚Äù HTML can‚Äôt do. In practice, this meant that only the cool kids
using JavaScript to build SPAs got to use these tools, further cementing the &lt;em&gt;aesthetic superiority&lt;&#x2F;em&gt; of SPAs.&lt;&#x2F;p&gt;
&lt;p&gt;htmx, as you probably know, makes CSS Transitions &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;animations&#x2F;&quot;&gt;available in plain HTML&lt;&#x2F;a&gt; via
a somewhat elaborate &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#request-operations&quot;&gt;swapping model&lt;&#x2F;a&gt; where we take elements that are in both
the old and new content and ‚Äúsettle‚Äù attributes on them. It‚Äôs a neat trick and can be used to make hypermedia-driven
application feel as buttery-smooth as well done SPA.&lt;&#x2F;p&gt;
&lt;p&gt;However, there is a new kid on the block: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.chrome.com&#x2F;docs&#x2F;web-platform&#x2F;view-transitions&#x2F;&quot;&gt;The View Transition API&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-view-transition-api&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-view-transition-api&quot; aria-label=&quot;Anchor link for: the-view-transition-api&quot;&gt;üîó&lt;&#x2F;a&gt;The View Transition API&lt;&#x2F;h2&gt;
&lt;p&gt;The View Transition API is much more ambitious than CSS transitions in that it is attempting to provide a simple, intuitive
API for transitioning an &lt;em&gt;entire DOM&lt;&#x2F;em&gt; from one state to another in a way that mere mortals can take advantage of. &lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, this API is supposed to be available not only in JavaScript, but also for plain old links and forms in HTML as well, 
making it possible to build &lt;em&gt;much nicer&lt;&#x2F;em&gt; user interfaces using the Web 1.0 approach.&lt;&#x2F;p&gt;
&lt;p&gt;It will be fun to revisit the Contact application in ‚ÄúHypermedia Systems‚Äù when this functionality is available!&lt;&#x2F;p&gt;
&lt;p&gt;As of this writing, however, the API is, like CSS Transitions, only available in JavaScript, and its only been just
released in Chrome 111+.&lt;&#x2F;p&gt;
&lt;p&gt;In JavaScript, The API could not be more simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; this is all it takes to get a smooth transition from one 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; state to another!
&lt;&#x2F;span&gt;&lt;span&gt;  document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;startViewTransition&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;updateTheDOMSomehow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, that‚Äôs my kind of API.&lt;&#x2F;p&gt;
&lt;p&gt;As luck would have it, it‚Äôs trivial to wrap this API around the regular htmx swapping model, which allows us to
start exploring View Transitions in htmx, even before it‚Äôs generally available in HTML! &lt;&#x2F;p&gt;
&lt;p&gt;And, as of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;htmx.org@1.9.0&quot;&gt;htmx 1.9.0&lt;&#x2F;a&gt;, you can start experimenting with the API by adding the 
&lt;code&gt;transition:true&lt;&#x2F;code&gt; attribute to an &lt;a href=&quot;&#x2F;attributes&#x2F;hx-swap&quot;&gt;&lt;code&gt;hx-swap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-practical-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-practical-example&quot; aria-label=&quot;Anchor link for: a-practical-example&quot;&gt;üîó&lt;&#x2F;a&gt;A Practical Example&lt;&#x2F;h2&gt;
&lt;p&gt;So let‚Äôs look at a simple example of this new shiny toy coupled with htmx.&lt;&#x2F;p&gt;
&lt;p&gt;Doing so will involve two parts: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Defining our View Transition animation via CSS&lt;&#x2F;li&gt;
&lt;li&gt;Adding a small annotation to an htmx-powered button&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-css&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-css&quot; aria-label=&quot;Anchor link for: the-css&quot;&gt;üîó&lt;&#x2F;a&gt;The CSS&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing that we need to do is define the View Transition animation that we want.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Define some animations using @keyframes to slide and fade content&lt;&#x2F;li&gt;
&lt;li&gt;Define a view transition with the name &lt;code&gt;slide-it&lt;&#x2F;code&gt; using the &lt;code&gt;:view-transition-old()&lt;&#x2F;code&gt; and &lt;code&gt;:view-transition-new()&lt;&#x2F;code&gt; pseudo-selectors&lt;&#x2F;li&gt;
&lt;li&gt;Tie the &lt;code&gt;.sample-transition&lt;&#x2F;code&gt; class to the &lt;code&gt;slide-it&lt;&#x2F;code&gt; view transition that we just defined, so we can bind it to elements via a that CSS class name&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(Fuller details on the View Transition API can be found on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.chrome.com&#x2F;docs&#x2F;web-platform&#x2F;view-transitions&#x2F;&quot;&gt;Chrome Developer Page&lt;&#x2F;a&gt;
documenting them.)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@keyframes &lt;&#x2F;span&gt;&lt;span&gt;fade-in {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;{ opacity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@keyframes &lt;&#x2F;span&gt;&lt;span&gt;fade-out {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span&gt;{ opacity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@keyframes &lt;&#x2F;span&gt;&lt;span&gt;slide-from-right {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;{ transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;translateX&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;90px&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@keyframes &lt;&#x2F;span&gt;&lt;span&gt;slide-to-left {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span&gt;{ transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;translateX&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;-90px&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;* define animations for the old and new content *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;view-transition-old(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;slide-it&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;         animation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;180ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cubic-bezier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) both fade-out,
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;600ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cubic-bezier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) both slide-to-left;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;view-transition-new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;slide-it&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;         animation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;420ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cubic-bezier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;90ms &lt;&#x2F;span&gt;&lt;span&gt;both fade-in,
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;600ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cubic-bezier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) both slide-from-right;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;* tie the view transition to a given CSS class *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;.sample-transition &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           view-transition-name: slide-it;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This CSS sets it up such that content with the &lt;code&gt;.sample-transition&lt;&#x2F;code&gt; class on it will fade out and slide to the left when 
it is removed, and new content will fade in and slide in from the right.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-html&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-html&quot; aria-label=&quot;Anchor link for: the-html&quot;&gt;üîó&lt;&#x2F;a&gt;The HTML&lt;&#x2F;h3&gt;
&lt;p&gt;With our View Transition defined via CSS, the next thing to do is to tie this View Transition to an actual element that
htmx will mutate, and to specify that htmx should take advantage of the View Transition API:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;sample-transition&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Initial Content&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-get&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;new-content&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-swap&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;innerHTML transition:true&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;closest div&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;         Swap It!
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have a button that issues an &lt;code&gt;GET&lt;&#x2F;code&gt; to get some new content, and that replaces the closest div‚Äôs inner HTML
with the response. &lt;&#x2F;p&gt;
&lt;p&gt;That div has the &lt;code&gt;sample-transition&lt;&#x2F;code&gt; class on it, so the View Transition defined above will apply to it. &lt;&#x2F;p&gt;
&lt;p&gt;Finally, the &lt;code&gt;hx-swap&lt;&#x2F;code&gt; attribute includes the option, &lt;code&gt;transition:true&lt;&#x2F;code&gt;, which is what tells htmx to use the
internal View Transition JavaScript API when swapping.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#demo&quot; aria-label=&quot;Anchor link for: demo&quot;&gt;üîó&lt;&#x2F;a&gt;Demo&lt;&#x2F;h2&gt;
&lt;p&gt;With all that tied together, we are ready to start using the View Transition API with htmx. Here‚Äôs a demo, which
should work in Chrome 111+ (other browsers will work fine, but won‚Äôt get the nice animation):&lt;&#x2F;p&gt;
&lt;style&gt;
   @keyframes fade-in {
     from { opacity: 0; }
   }

   @keyframes fade-out {
     to { opacity: 0; }
   }

   @keyframes slide-from-right {
     from { transform: translateX(90px); }
   }

   @keyframes slide-to-left {
     to { transform: translateX(-90px); }
   }

   &#x2F;* define animations for the old and new content *&#x2F;
   ::view-transition-old(slide-it) {
     animation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
   }
   ::view-transition-new(slide-it) {
     animation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,
     600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
   }

   &#x2F;* tie the view transition to a given CSS class *&#x2F;
   .sample-transition {
       view-transition-name: slide-it;
   }
    
&lt;&#x2F;style&gt;
&lt;div class=&quot;sample-transition&quot; style=&quot;padding: 24px&quot;&gt;
   &lt;h1&gt;Initial Content&lt;&#x2F;h1&gt;
   &lt;button hx-get=&quot;&#x2F;new-content&quot; hx-swap=&quot;innerHTML transition:true&quot; hx-target=&quot;closest div&quot;&gt;
     Swap It!
   &lt;&#x2F;button&gt;
&lt;&#x2F;div&gt;
&lt;script&gt;
    var originalContent = htmx.find(&quot;.sample-transition&quot;).innerHTML;

    this.server.respondWith(&quot;GET&quot;, &quot;&#x2F;new-content&quot;, function(xhr){
        xhr.respond(200,  {}, &quot;&lt;h1&gt;New Content&lt;&#x2F;h1&gt; &lt;button hx-get=&#x27;&#x2F;original-content&#x27; hx-swap=&#x27;innerHTML transition:true&#x27; hx-target=&#x27;closest div&#x27;&gt;Restore It! &lt;&#x2F;button&gt;&quot;)
    });

    this.server.respondWith(&quot;GET&quot;, &quot;&#x2F;original-content&quot;, function(xhr){
        xhr.respond(200,  {}, originalContent)
    });
&lt;&#x2F;script&gt;
&lt;p&gt;Assuming you are looking at this page in Chrome 111+, you should see the content above slide gracefully out to the
left and be replaced by new content sliding in from the right. Nice!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Hey now, that‚Äôs pretty neat, and, once you get your head around the concept, not all that much work! This new API
shows a lot of promise.&lt;&#x2F;p&gt;
&lt;p&gt;View Transitions are an exciting new technology that we feel can dramatically level the playing field between
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia Driven Applications&lt;&#x2F;a&gt; and the more prevalent SPA
architecture used today.&lt;&#x2F;p&gt;
&lt;p&gt;By doing away with the ugly ‚Äúka-chunk‚Äù of Web 1.0 applications, the aesthetic advantages of the
SPA approach will be diminished, and we can make decisions less around ‚Äúsizzle‚Äù and focus more on the actual &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;when-to-use-hypermedia&#x2F;&quot;&gt;technical
tradeoffs&lt;&#x2F;a&gt; associated with various architectures.&lt;&#x2F;p&gt;
&lt;p&gt;We are looking forward to when View Transitions are available in vanilla HTML, but, until then, you can start playing
with them in htmx, today!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.9.0 has been released!</title>
        <published>2023-04-11T00:00:00+00:00</published>
        <updated>2023-04-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2023-04-11-htmx-1-9-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2023-04-11-htmx-1-9-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-9-0-release&quot;&gt;htmx 1.9.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.9.0&#x2F;&quot;&gt;1.9.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Support for &lt;a href=&quot;&#x2F;essays&#x2F;view-transitions&quot;&gt;view transitions&lt;&#x2F;a&gt;, based on the experimental &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;View_Transitions_API&quot;&gt;View Transitions API&lt;&#x2F;a&gt;
currently available in Chrome 111+ and coming to other browsers soon.&lt;&#x2F;li&gt;
&lt;li&gt;Support for ‚Äúnaked‚Äù &lt;a href=&quot;&#x2F;attributes&#x2F;hx-trigger&quot;&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attributes, where an &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; is present on an element
that does not have an &lt;code&gt;hx-get&lt;&#x2F;code&gt;, etc. defined on it.  Instead, it will trigger the new &lt;code&gt;htmx:triggered&lt;&#x2F;code&gt; event, which can
be responded to via your &lt;a href=&quot;&#x2F;docs#scripting&quot;&gt;preferred scripting solution&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Support for generalized inline event handling via the new &lt;a href=&quot;&#x2F;attributes&#x2F;hx-on&quot;&gt;&lt;code&gt;hx-on&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute, which addresses
the shortcoming of limited &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;Events&#x2F;Event_handlers#using_onevent_properties&quot;&gt;&lt;code&gt;onevent&lt;&#x2F;code&gt; properties&lt;&#x2F;a&gt; attributes in HTML.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The htmx website has been migrated from 11ty to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;zola&lt;&#x2F;a&gt; by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;danieljsummers&quot;&gt;@danieljsummers&lt;&#x2F;a&gt;, cutting
way down on the number of ‚Äúdevelopment‚Äù javascript dependencies&lt;&#x2F;li&gt;
&lt;li&gt;A memory leak fix by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;commit&#x2F;8cd3a480a7388877628ce8b9b8e50cd5df48bb81&quot;&gt;@croxton&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thank you to everyone who contributed, and enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Architectural Sympathy</title>
        <published>2023-04-06T00:00:00+00:00</published>
        <updated>2023-04-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/architectural-sympathy/" type="text/html"/>
        <id>https://htmx.org/essays/architectural-sympathy/</id>
        <content type="html">&lt;h1 id=&quot;mechanical-sympathy-architectural-sympathy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mechanical-sympathy-architectural-sympathy&quot; aria-label=&quot;Anchor link for: mechanical-sympathy-architectural-sympathy&quot;&gt;üîó&lt;&#x2F;a&gt;Mechanical Sympathy &amp;amp; Architectural Sympathy&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You don‚Äôt have to be an engineer to be be a racing driver, but you do have to have Mechanical Sympathy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;-Jackie Stewart, racing driver&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The term ‚Äúmechanical sympathy‚Äù was originally coined by Jackie Steward to capture a characteristic
of race car drivers, who needed a deep and intuitive understanding of how a race car worked in order
to get the best possible performance out of the vehicle.&lt;&#x2F;p&gt;
&lt;p&gt;This term was applied to software development by Martin Thompson when discussing his &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;lmax.html&quot;&gt;LMAX&lt;&#x2F;a&gt;
architecture, which utilized a low level and intuitive understanding of how his cloud system functioned
in order to maximize the performance of it.  Thompson maintained &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mechanical-sympathy.blogspot.com&#x2F;&quot;&gt;a blog&lt;&#x2F;a&gt;
on the topic for many years, and it is well worth going back and reading the posts there.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;architectural-sympathy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#architectural-sympathy&quot; aria-label=&quot;Anchor link for: architectural-sympathy&quot;&gt;üîó&lt;&#x2F;a&gt;Architectural Sympathy&lt;&#x2F;h2&gt;
&lt;p&gt;In this brief essay I want to propose another concept and design principle, that of &lt;em&gt;Architectural Sympathy&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Architectural Sympathy is the characteristic of one piece of software adopting and conforming to the architectural
design of another piece of software &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is a design principle that I have kept in mind when designing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&quot;&gt;htmx&lt;&#x2F;a&gt; and 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt; and I wanted to write it down for reference and so others can think about,
criticize and improve it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;htmx-s-architectural-sympathy-for-the-web&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#htmx-s-architectural-sympathy-for-the-web&quot; aria-label=&quot;Anchor link for: htmx-s-architectural-sympathy-for-the-web&quot;&gt;üîó&lt;&#x2F;a&gt;htmx‚Äôs Architectural Sympathy for The Web&lt;&#x2F;h3&gt;
&lt;p&gt;htmx is architecturally sympathetic to The Web because it adopts the underlying &lt;a href=&quot;&#x2F;essays&#x2F;hateoas&quot;&gt;REST-ful&lt;&#x2F;a&gt; architecture 
of The Web: exchanging &lt;em&gt;hypermedia&lt;&#x2F;em&gt; in a REST-ful manner with a hypermedia server.  As much as is practical, htmx takes
design cues from the existing Web infrastructure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It mimics the core hypermedia-exchange mechanic of links and forms&lt;&#x2F;li&gt;
&lt;li&gt;It uses CSS selectors for targeting&lt;&#x2F;li&gt;
&lt;li&gt;It uses standard URL paths for designating end points&lt;&#x2F;li&gt;
&lt;li&gt;It uses the standard API language for specifying swap types&lt;&#x2F;li&gt;
&lt;li&gt;Etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;htmx attempts to &lt;em&gt;fold in&lt;&#x2F;em&gt; to the existing conceptual architecture of The Web, rather than replace it.&lt;&#x2F;p&gt;
&lt;p&gt;This is in contrast with the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Glossary&#x2F;SPA&quot;&gt;SPA&lt;&#x2F;a&gt; approach to building web 
applications.  Most SPA frameworks have little architectural sympathy with the original web model.  Rather, they largely 
&lt;em&gt;replace&lt;&#x2F;em&gt; the original, REST-ful, hypermedia-oriented architecture of the web in favor of a more thick-client like 
architecture, exchanging information over an
&lt;a href=&quot;&#x2F;essays&#x2F;how-did-rest-come-to-mean-the-opposite-of-rest&#x2F;&quot;&gt;RPC-like fixed-data format&lt;&#x2F;a&gt; network architecture.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;advantages-of-the-architecturally-sympathetic-approach&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#advantages-of-the-architecturally-sympathetic-approach&quot; aria-label=&quot;Anchor link for: advantages-of-the-architecturally-sympathetic-approach&quot;&gt;üîó&lt;&#x2F;a&gt;Advantages Of The Architecturally Sympathetic Approach&lt;&#x2F;h3&gt;
&lt;p&gt;If a new piece of software maintains architectural sympathy with an original piece of software, the following advantages
are obtained:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A developer who is familiar with the original piece of software does not need to learn a whole new conceptual approach
when using the new piece of software. &lt;&#x2F;li&gt;
&lt;li&gt;The design constraints of the original piece of software offer a framework within which to evaluate features for the
new piece of software.  This makes it easier to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;grugbrain.dev&#x2F;#grug-on-saying-no&quot;&gt;say ‚Äúno‚Äù&lt;&#x2F;a&gt; as you develop the
new software. (‚ÄúThe enemy of art is the absence of limitations.‚Äù ‚Äì&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quoteinvestigator.com&#x2F;2014&#x2F;05&#x2F;24&#x2F;art-limit&#x2F;&quot;&gt;Orson Welles&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Experience gained from working with the original piece of software can directly inform the design and implementation of
the new software&lt;&#x2F;li&gt;
&lt;li&gt;There will likely be a subjective feeling of ‚Äúfit‚Äù between the new and original software for users of the new software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;disadvantages-of-the-architecturally-sympathetic-approach&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#disadvantages-of-the-architecturally-sympathetic-approach&quot; aria-label=&quot;Anchor link for: disadvantages-of-the-architecturally-sympathetic-approach&quot;&gt;üîó&lt;&#x2F;a&gt;Disadvantages Of The Architecturally Sympathetic Approach&lt;&#x2F;h3&gt;
&lt;p&gt;Of course, as with any design principle, there are trade-offs when using Architectural Sympathy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The shortcomings of the original piece of software are likely to be found in some way in the new software&lt;&#x2F;li&gt;
&lt;li&gt;The design constraints impressed on the new software by the older software may be so oppressive as to limit progress
and functionality in the new software&lt;&#x2F;li&gt;
&lt;li&gt;It may be difficult for developers to ‚Äúsee the point‚Äù of the new software, if it feels too close to the original software&lt;&#x2F;li&gt;
&lt;li&gt;By maintaining architectural sympathy with the older, original software, the new software risks appearing old itself,
a danger in the software business that has often favored new and exciting approaches to problems.&lt;&#x2F;li&gt;
&lt;li&gt;You may not be able to layer as many new concepts as some users might like on top of the original software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;craftsmanship-architectural-sympathy&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#craftsmanship-architectural-sympathy&quot; aria-label=&quot;Anchor link for: craftsmanship-architectural-sympathy&quot;&gt;üîó&lt;&#x2F;a&gt;Craftsmanship &amp;amp; Architectural Sympathy&lt;&#x2F;h2&gt;
&lt;p&gt;A non-software example of architectural sympathy that I like to point to are medieval cathedrals: these cathedrals were
often built, rebuilt and improved over centuries by many different builders and architects (such as they were).  And yet 
they were able, over those centuries, to maintain a high level of architectural sympathy with the earlier workers.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than focusing on radically new approaches to building, workers focused on maintaining a coherent whole and, within
that framework, on the craftsmanship of their individual contributions.  Yes, there were flourishes and changes along the
way, but these typically did not sacrifice the conceptual coherence of the whole for the sake of innovation.&lt;&#x2F;p&gt;
&lt;p&gt;Adopting an architecturally sympathetic mindset in software development often means sacrificing how you would like to
do things in favor of how an original piece of software did things.  While this constraint can chafe at times, it can
also produce well crafted software that is harmonious and that dovetails well with existing software.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.8.6 has been released!</title>
        <published>2023-03-02T00:00:00+00:00</published>
        <updated>2023-03-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2023-03-02-htmx-1-8-6-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2023-03-02-htmx-1-8-6-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-8-6-release&quot;&gt;htmx 1.8.6 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.8.6&#x2F;&quot;&gt;1.8.6 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;commit&#x2F;a85ad4ac67c3a471dbb8472900ec1e583b571a67&quot;&gt;ESM support&lt;&#x2F;a&gt; (thank you @dkniffin!)&lt;&#x2F;li&gt;
&lt;li&gt;Sass has been vanquished from the htmx.org website so python 2 (!!!) is no longer required for developing htmx (thank you @dz4k!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed a bug where the &lt;code&gt;changed&lt;&#x2F;code&gt; modifier on &lt;code&gt;keyup&lt;&#x2F;code&gt; did not work properly if an input was tabbed into&lt;&#x2F;li&gt;
&lt;li&gt;Many other smaller bug fixes and doc fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thank you to everyone who contributed, and enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hypermedia Clients</title>
        <published>2023-01-28T00:00:00+00:00</published>
        <updated>2023-01-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/hypermedia-clients/" type="text/html"/>
        <id>https://htmx.org/essays/hypermedia-clients/</id>
        <content type="html">&lt;p&gt;Often, when we are being insufferably pedantic in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=32141027&quot;&gt;online discussions&lt;&#x2F;a&gt; 
about &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;how-did-rest-come-to-mean-the-opposite-of-rest&#x2F;&quot;&gt;REST&lt;&#x2F;a&gt; &amp;amp; &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;HATEOAS&lt;&#x2F;a&gt;, we will
say something along the lines of this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON isn‚Äôt a hypermedia because it doesn‚Äôt have hypermedia controls.&lt;&#x2F;p&gt;
&lt;p&gt;Look at this JSON:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;50.00
&lt;&#x2F;span&gt;&lt;span&gt;   },
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;open&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;See?  No hypermedia controls.&lt;&#x2F;p&gt;
&lt;p&gt;So this JSON isn‚Äôt a hypermedia, and, therefore, the API returning this JSON isn‚Äôt RESTful.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To this, occasionally, a smart and experienced web developer will reply with something along these lines:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OK, mr. REST-y pants, how about this JSON?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;50.00
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;open&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;links&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;close-requests&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;close-requests&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;There, now there are hypermedia controls in this response (normal humans call them links, btw) so this JSON is a 
hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;So this JSON API is now RESTful.  Feel better?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;üòë&lt;&#x2F;p&gt;
&lt;p&gt;One must concede that, at least at a high-level, our online adversary has something of a talking point here: these
do appear to be hypermedia controls, and they are, in fact, in a JSON response.  So, couldn‚Äôt you call this JSON response
RESTful?&lt;&#x2F;p&gt;
&lt;p&gt;Being obstinate by nature, we still wouldn‚Äôt be willing to concede the immediate point without a good 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;DpQ9YJl.png&quot;&gt;ackchyually&lt;&#x2F;a&gt; or two:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First, these links hold no information about what HTTP method to use to access them&lt;&#x2F;li&gt;
&lt;li&gt;Secondly, these links aren‚Äôt a &lt;em&gt;native&lt;&#x2F;em&gt; part of JSON the way that, for example, anchor and form tags are with HTML&lt;&#x2F;li&gt;
&lt;li&gt;Third, there is a lot of missing information about the hypermedia interactions at each end point (e.g. what data needs to
go up with the request.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And so on: the sorts of pedantic nit-picking that makes technical flame wars about REST on the internet such a &lt;em&gt;special&lt;&#x2F;em&gt; joy.&lt;&#x2F;p&gt;
&lt;p&gt;However, there is a deeper &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;DpQ9YJl.png&quot;&gt;ackchyually&lt;&#x2F;a&gt; here, and one that doesn‚Äôt involve the &lt;em&gt;JSON API&lt;&#x2F;em&gt; 
itself, but rather the other side of the wire: the &lt;em&gt;client&lt;&#x2F;em&gt; that receives the JSON.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hypermedia-clients-presentation-information&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hypermedia-clients-presentation-information&quot; aria-label=&quot;Anchor link for: hypermedia-clients-presentation-information&quot;&gt;üîó&lt;&#x2F;a&gt;Hypermedia Clients &amp;amp; Presentation Information&lt;&#x2F;h2&gt;
&lt;p&gt;The deeper problem with this proposed fix for non-RESTful JSON APIs is that, for this JSON response to participate 
properly in a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypermedia.systems&quot;&gt;hypermedia system&lt;&#x2F;a&gt;, the &lt;em&gt;client&lt;&#x2F;em&gt; that consumes the JSON needs to &lt;em&gt;also&lt;&#x2F;em&gt; 
satisfy the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm&quot;&gt;constraints&lt;&#x2F;a&gt; that the 
RESTful architectural style places on the entire system.&lt;&#x2F;p&gt;
&lt;p&gt;In particular, the client needs to satisfy the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;uniform interface&lt;&#x2F;a&gt;,
in which the client code knows nothing about the ‚Äúshape‚Äù or details of the response beyond the ability to display
the given hypermedia to a user.  In a properly functioning RESTful system, the client isn‚Äôt allowed to have any 
‚Äúout of band‚Äù knowledge about the domain that a particular hypermedia representation, er, represents.&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs look at the proposed JSON-as-hypermedia again: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;50.00
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;open&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;links&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;close-requests&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;close-requests&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, a client of this API &lt;em&gt;could&lt;&#x2F;em&gt; use a generic algorithm to transform this JSON into, for example, some HTML.  It could
do so via a client-side templating language that, for example, iterated over all the properties of the JSON object. &lt;&#x2F;p&gt;
&lt;p&gt;But there‚Äôs a hitch: note that there isn‚Äôt a lot of &lt;em&gt;presentation information&lt;&#x2F;em&gt; in the JSON response.  It is a fairly raw 
data representation of the account in question, with a few additional URLs.&lt;&#x2F;p&gt;
&lt;p&gt;A client that wanted to satisfy the uniform interface constraint of REST doesn‚Äôt have much information on how to present 
this data to a user.  The client would, therefore, need to adopt a very basic approach to displaying this account to an 
end user.&lt;&#x2F;p&gt;
&lt;p&gt;It would probably end up being roughly a set of name&#x2F;value pairs and a set generic of buttons or links for actions, right?&lt;&#x2F;p&gt;
&lt;p&gt;There simply isn‚Äôt much more it could do while remaining agnostic about the form of the JSON response.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pushing-our-json-api-further&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pushing-our-json-api-further&quot; aria-label=&quot;Anchor link for: pushing-our-json-api-further&quot;&gt;üîó&lt;&#x2F;a&gt;Pushing Our JSON API Further&lt;&#x2F;h3&gt;
&lt;p&gt;We could fix this by making our JSON API more elaborate and start including more information on how to lay out the
information: perhaps indications that some fields should be emphasized, or hidden, etc.&lt;&#x2F;p&gt;
&lt;p&gt;But that would only be part of the story.&lt;&#x2F;p&gt;
&lt;p&gt;We would also need to update the client side to interpret these new elements of our JSON API properly.  So we are no 
longer just API designers: we are getting in to the hypermedia &lt;em&gt;client&lt;&#x2F;em&gt; creation business as well.  Or, more likely, we
are asking our &lt;em&gt;API clients&lt;&#x2F;em&gt; to get into the hypermedia client business as well.&lt;&#x2F;p&gt;
&lt;p&gt;Now, Mike Amundsen has written an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;restful-web-clients&#x2F;9781491921890&#x2F;&quot;&gt;excellent book&lt;&#x2F;a&gt; on
how to build a proper, generic hypermedia client.  But what you will see in that book is that creating a good hypermedia 
client isn‚Äôt trivial, and, further, it is certainly not what &lt;em&gt;most&lt;&#x2F;em&gt; engineers would build to consume a JSON API, even if 
the JSON API had increasingly elaborate hypermedia controls and presentation information in their responses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inefficient-representations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#inefficient-representations&quot; aria-label=&quot;Anchor link for: inefficient-representations&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúInefficient‚Äù Representations&lt;&#x2F;h3&gt;
&lt;p&gt;As we begin to consider adding more information to our JSON response, a quote from Roy Fielding‚Äôs dissertation jumps
to mind:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The trade-off, though, is that a uniform interface degrades efficiency, since information is transferred in a
standardized form rather than one which is specific to an application‚Äôs needs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;-Roy Fielding, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A criticism of HTML is that it mixes ‚Äúpresentation‚Äù information with ‚Äúsemantic‚Äù information.  This is often contrasted
unfavorably with the brevity of typical JSON API responses.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out, however, that it is exactly that presentation information, and the ability of a web browser (i.e. a hypermedia client) to 
turn it into a UI that a human can interact with, that makes HTML work so well as a component of the larger hypermedia 
system that is the web.&lt;&#x2F;p&gt;
&lt;p&gt;And that exactly what we find ourselves adding to our own JSON API to support a proper hypermedia client.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-hypermedia-clients&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-hypermedia-clients&quot; aria-label=&quot;Anchor link for: building-hypermedia-clients&quot;&gt;üîó&lt;&#x2F;a&gt;Building Hypermedia Clients&lt;&#x2F;h2&gt;
&lt;p&gt;So, you can see, just offering hypermedia controls in a JSON API response isn‚Äôt enough.  It is &lt;em&gt;part&lt;&#x2F;em&gt; of the REST story, 
but not the entire story.  And, I have come to understand, it is not really the &lt;em&gt;hard&lt;&#x2F;em&gt; part of the story.  In fact, creating the 
hypermedia &lt;em&gt;client&lt;&#x2F;em&gt; is the hard part, and creating a &lt;em&gt;good&lt;&#x2F;em&gt; hypermedia client is &lt;em&gt;the really hard part&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, we are all used to web browsers just being there, but think for a moment about all the technology that goes in to simply
parsing and rendering HTML to an end user in a normal, every day web request.  It‚Äôs &lt;em&gt;extremely&lt;&#x2F;em&gt; complicated.&lt;&#x2F;p&gt;
&lt;p&gt;That‚Äôs why, if we want to build web-based &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;hypermedia-driven applications&lt;&#x2F;a&gt;,
it‚Äôs probably a good idea to use the standard, web-based hypermedia client: the browser.&lt;&#x2F;p&gt;
&lt;p&gt;It is already an extremely powerful, well tested hypermedia client.  And, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;&quot;&gt;with a bit of help&lt;&#x2F;a&gt;,
it can be an even better hypermedia client.&lt;&#x2F;p&gt;
&lt;p&gt;In general, building a good hypermedia client that satisfies all the constraints of REST is hard, and we should lean
towards using (and extending) existing clients rather than building our own new ones.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hyperview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hyperview&quot; aria-label=&quot;Anchor link for: hyperview&quot;&gt;üîó&lt;&#x2F;a&gt;Hyperview&lt;&#x2F;h3&gt;
&lt;p&gt;That being said, there are times when building a new hypermedia client is appropriate.  For example, this is what makes 
a technology like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperview.org&#x2F;&quot;&gt;Hyperview&lt;&#x2F;a&gt; so impressive and special.  Hyperview
doesn‚Äôt just provide a specification for a new, mobile-friendly hypermedia, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperview.org&#x2F;docs&#x2F;guide_html&quot;&gt;HXML&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It also provides developers with a hypermedia &lt;em&gt;client&lt;&#x2F;em&gt; that understands how to render HXML.&lt;&#x2F;p&gt;
&lt;p&gt;Without that hypermedia client, Hyperview would be just another hypermedia-in-theory, like the JSON above, rather
than a compelling, practical and &lt;em&gt;complete&lt;&#x2F;em&gt; RESTful hypermedia solution.&lt;&#x2F;p&gt;
&lt;p&gt;A hypermedia without a hypermedia client is like a fish without a bicycle, except where the fish is really only good at
bicycling.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;It took me a long time to appreciate how important the &lt;em&gt;client&lt;&#x2F;em&gt; is to a proper, RESTful hypermedia system.  This is understandable,
since most of the early discussion around REST was around &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.martinfowler.com&#x2F;articles&#x2F;richardsonMaturityModel.html&quot;&gt;API Design&lt;&#x2F;a&gt;,
and the client simply didn‚Äôt come up much.&lt;&#x2F;p&gt;
&lt;p&gt;What I see now is that a lot of these discussions were putting the cart before the horse: the only way a RESTful hypermedia
API can be useful is if it is consumed by a proper hypermedia client.  Otherwise, your hypermedia controls are wasted
on what is, at the end of the day, a domain-specific thick client that just wants to get things done.&lt;&#x2F;p&gt;
&lt;p&gt;Further, your hypermedia API is almost certainly going to have to carry a fair amount of presentation-layer information 
in it to make the whole thing usable.  It turns out that ‚ÄúLevel 3‚Äù of the 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;richardsonMaturityModel.html&quot;&gt;Richard Maturity Model&lt;&#x2F;a&gt;, Hypermedia Controls, &lt;em&gt;isn‚Äôt&lt;&#x2F;em&gt; 
enough to reach ‚ÄúThe Glory of REST‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;In practice, you are going to need to add in a bunch of practical presentation-level technology to make 
your hypermedia API really work, &lt;em&gt;and&lt;&#x2F;em&gt; you are going to need a properly built hypermedia client to consume it.&lt;&#x2F;p&gt;
&lt;p&gt;I had a nascent sense of this when I wrote &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;05&#x2F;08&#x2F;hatoeas-is-for-humans.html&quot;&gt;HATEOAS Is For Humans&lt;&#x2F;a&gt;,
but I didn‚Äôt, at that time, appreciate just how special the client&#x2F;web browser was.&lt;&#x2F;p&gt;
&lt;p&gt;REST isn‚Äôt solely about APIs: as Roy Fielding makes clear in his dissertation, it is a &lt;em&gt;system&lt;&#x2F;em&gt; architecture. &lt;&#x2F;p&gt;
&lt;p&gt;Except for a few people like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;training.amundsen.com&#x2F;&quot;&gt;Mike&lt;&#x2F;a&gt;, we‚Äôve been largely ignoring a larger (really, 
&lt;em&gt;much&lt;&#x2F;em&gt; larger) part of the REST story:&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center;padding-top: 24px&quot;&gt;
&lt;img src=&quot;&#x2F;img&#x2F;creating-client.png&quot; alt=&quot;Creating A Hypermedia Client Is Hard Joke&quot; style=&quot;max-width: 95%&quot;&gt;
&lt;&#x2F;div&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.8.5 has been released!</title>
        <published>2023-01-17T00:00:00+00:00</published>
        <updated>2023-01-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2023-01-17-htmx-1-8-5-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2023-01-17-htmx-1-8-5-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-8-5-release&quot;&gt;htmx 1.8.5 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.8.5&#x2F;&quot;&gt;1.8.5 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Support a new optional cache-busting configuration option, &lt;code&gt;getCacheBusterParam&lt;&#x2F;code&gt;, to allow browsers to disambiguate
between &lt;code&gt;GET&lt;&#x2F;code&gt; requests from htmx and from the raw browser&lt;&#x2F;li&gt;
&lt;li&gt;Support new &lt;code&gt;hx-history=&#x27;false&#x27;&lt;&#x2F;code&gt; attribute, to prevent sensitive data from being stored in the history cache. (Thank you @croxton!)&lt;&#x2F;li&gt;
&lt;li&gt;Extensive new event-oriented features are available in the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;web-sockets&#x2F;&quot;&gt;Web Socket&lt;&#x2F;a&gt; extension (Thank you @Renerick!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A bug fix for when a form contains multiple empty input values with the same name (Thank you @bluekeyes!)&lt;&#x2F;li&gt;
&lt;li&gt;A bug fix around inputs that throw exceptions when calling &lt;code&gt;setSelectionRange()&lt;&#x2F;code&gt; (Thank you @gone!)&lt;&#x2F;li&gt;
&lt;li&gt;A bug fix to pass through the proper event for the &lt;code&gt;htmx:configRequest&lt;&#x2F;code&gt; event&lt;&#x2F;li&gt;
&lt;li&gt;A bug fix&#x2F;improvement for the &lt;code&gt;preload&lt;&#x2F;code&gt; extension&lt;&#x2F;li&gt;
&lt;li&gt;Many other small bug and doc fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thank you to everyone who contributed, and enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hypermedia-Friendly Scripting</title>
        <published>2022-11-17T00:00:00+00:00</published>
        <updated>2022-11-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/hypermedia-friendly-scripting/" type="text/html"/>
        <id>https://htmx.org/essays/hypermedia-friendly-scripting/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The final addition to our constraint set for REST comes from the code-on-demand style of Section 3.5.3 (Figure 5-8). 
REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. 
This simplifies clients by reducing the number of features required to be pre-implemented. Allowing features to be 
downloaded after deployment improves system extensibility. However, it also reduces visibility, and thus is only an
optional constraint within REST.&lt;&#x2F;p&gt;
&lt;p&gt;--&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_7&quot;&gt;Roy Fielding - Representational State Transfer (REST)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;scripting_and_the_web&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#scripting_and_the_web&quot; aria-label=&quot;Anchor link for: scripting_and_the_web&quot;&gt;üîó&lt;&#x2F;a&gt;Scripting &amp;amp; The Web&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia-Driven Applications&lt;&#x2F;a&gt; we discuss how to build
web applications in such a manner that they are &lt;em&gt;hypermedia&lt;&#x2F;em&gt;-driven, in contrast with the popular SPA approach, in which
they are &lt;em&gt;JavaScript&lt;&#x2F;em&gt; and, at the network-level, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;how-did-rest-come-to-mean-the-opposite-of-rest&#x2F;&quot;&gt;RPC-driven&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the HDA article we mention scripting briefly:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In an HDA, hypermedia (HTML) is the primary medium for building the application, which means that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All communication with the server is still managed via HTTP requests with hypermedia (HTML) responses&lt;&#x2F;li&gt;
&lt;li&gt;Scripting is used mainly to enhance the front-end experience of the application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Scripting augments the existing hypermedia (HTML) but does not supersede it or subvert the fundamental REST-ful 
architecture of the HDA.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In this article we would like to expand on this last comment and describe what scripting that does not ‚Äúsupersede‚Äù or
‚Äúsubvert‚Äù a REST-ful, Hypermedia-Driven Application looks like.  These rules of thumb apply to scripting written
directly to support a web application, as well as to general purpose JavaScript libraries.&lt;&#x2F;p&gt;
&lt;p&gt;The basic rules for hypermedia-friendly scripting are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;#prime_directive&quot;&gt;Respect HATEOAS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;#state&quot;&gt;Client-side only state is OK&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;#events&quot;&gt;Use events to communicate between components&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;#islands&quot;&gt;Use islands to isolate non-hypermedia components from the rest of your application&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;#inline&quot;&gt;Optionally, consider inline scripting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each of these rules will be elaborated on below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prime_directive&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#prime_directive&quot; aria-label=&quot;Anchor link for: prime_directive&quot;&gt;üîó&lt;&#x2F;a&gt;The Prime Directive&lt;&#x2F;h2&gt;
&lt;p&gt;The prime directive of an HDA is to use &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;Hypermedia As The Engine of Application State&lt;&#x2F;a&gt;.
A hypermedia-friendly scripting approach will follow this directive.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Practically, this means that scripting should avoid making non-hypermedia exchanges over the network with a server.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, in general, hypermedia-friendly scripting should avoid the use of &lt;code&gt;fetch()&lt;&#x2F;code&gt; and &lt;code&gt;XMLHttpRequest&lt;&#x2F;code&gt; &lt;em&gt;unless&lt;&#x2F;em&gt; the responses
from the server use a hypermedia of some sort (e.g. HTML), rather than a data API format (e.g. plain JSON).&lt;&#x2F;p&gt;
&lt;p&gt;Respecting HATEOAS also means that, in general, complicated state stored in JavaScript (rather than in the DOM) should 
be avoided.&lt;&#x2F;p&gt;
&lt;p&gt;However, this last statement needs to be qualified: state may be stored client-side in JavaScript so long as it is 
directly supporting a more sophisticated front-end experience (e.g. widget) than pure HTML allows.&lt;&#x2F;p&gt;
&lt;p&gt;To reiterate what Fielding says regarding the purpose of scripting in REST:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allowing features to be downloaded after deployment improves system extensibility.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So scripting is a legitimate part a REST-ful system, in order to allow the creation of additional features not directly implemented
within the underlying hypermedia, thus making a hypermedia (e.g. HTML) more extensible.&lt;&#x2F;p&gt;
&lt;p&gt;A good example of this sort of feature is a rich-text editor: it might have an extremely sophisticated JavaScript model
of the editor‚Äôs document, including selection information, highlighting information, code completion and so forth.
However, this model should be isolated from the rest of the DOM and the rich text editor should expose its information
to the DOM using standard hypermedia features.  For example, it should use a hidden input to communicate the contents of the
editor to the surrounding DOM, rather than requiring a JavaScript API call to get the content.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is to use scripting to improve the hypermedia experience by providing features and functionality that are
not part of the standard hypermedia (HTML) tool set, but do so in a way that plays well with HTML, rather than relegating
HTML to a mere UI description language within a larger JavaScript application, as many SPA frameworks do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#state&quot; aria-label=&quot;Anchor link for: state&quot;&gt;üîó&lt;&#x2F;a&gt;State&lt;&#x2F;h2&gt;
&lt;p&gt;Note that using Hypermedia As The Engine Of Application State does not mean that you cannot have &lt;em&gt;any&lt;&#x2F;em&gt; client-side state.
Obviously, the rich-text editor example cited above may have a significant amount of client-side state.  But
there are simpler cases where client-side state are warranted and perfectly consistent with a Hypermedia-Driven Application.&lt;&#x2F;p&gt;
&lt;p&gt;Consider a simple visibility toggle, where clicking a button or anchor adds a class to another element, making it visible.&lt;&#x2F;p&gt;
&lt;p&gt;This ephemeral client-side state is fine in a Hypermedia-Driven Application, because the state is purely front-end.  No
system state is being updated with this sort of scripting.  If system state were to be mutated (that is, if showing or
hiding the element had an effect on the data stored on the server), then it would be necessary to use a hypermedia
exchange. &lt;&#x2F;p&gt;
&lt;p&gt;The crucial aspect to consider is whether any state updated on the client side needs to be synchronized with the server.&lt;br &#x2F;&gt;
If yes, then a hypermedia exchange should be used.  If no, then it is fine to keep the state client-side only.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;events&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#events&quot; aria-label=&quot;Anchor link for: events&quot;&gt;üîó&lt;&#x2F;a&gt;Events&lt;&#x2F;h2&gt;
&lt;p&gt;One excellent way for a JavaScript library to enable hypermedia-friendly scripting is for it to have 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;JavaScript&#x2F;Building_blocks&#x2F;Events&quot;&gt;a rich custom event model&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A JavaScript-based component that triggers events allows for hypermedia-oriented JavaScript libraries, such as htmx,
to listen for those events and trigger hypermedia exchanges.  This, in turn, makes any JavaScript library a potential
&lt;em&gt;hypermedia control&lt;&#x2F;em&gt;, able to drive the Hypermedia-Driven Application via user-selected actions.&lt;&#x2F;p&gt;
&lt;p&gt;A good example of this is the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;sortable&#x2F;&quot;&gt;Sortable.js&lt;&#x2F;a&gt; example, in which htmx listens for
the &lt;code&gt;end&lt;&#x2F;code&gt; event triggered by Sortable.js:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;sortable&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-post&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;items&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-trigger&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;end&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;htmx-indicator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Updating...&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hidden&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;item&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;Item 1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hidden&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;item&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;Item 2&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hidden&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;item&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;3&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;Item 3&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hidden&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;item&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;4&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;Item 4&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hidden&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;item&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;5&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;Item 5&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;end&lt;&#x2F;code&gt; event is triggered by Sortable.js when a drag-and-drop completes.  htmx listens for this event via the 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;&quot;&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute and then issues an HTTP request, exchanging hypermedia with the 
server.  This turns this Sortable.js drag-and-drop powered widget into a new, powerful hypermedia control.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;islands&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#islands&quot; aria-label=&quot;Anchor link for: islands&quot;&gt;üîó&lt;&#x2F;a&gt;Islands&lt;&#x2F;h2&gt;
&lt;p&gt;A recent trend in web development is the notion of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.patterns.dev&#x2F;posts&#x2F;islands-architecture&#x2F;&quot;&gt;‚Äúislands‚Äù&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The islands architecture encourages small, focused chunks of interactivity within server-rendered web pages.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In cases where a more sophisticated scripting approach is required and where communication with a server
outside of the normal hypermedia-exchange mechanism is necessary, the most hypermedia-friendly approach is to use the island
architecture.  This isolates non-hypermedia components from the rest of the Hypermedia-Driven Application.&lt;&#x2F;p&gt;
&lt;p&gt;Events are a clean way to integrate your non-hypermedia-driven islands within a broader Hypermedia-Driven Application, 
allowing you to convert an ‚Äúinner‚Äù island into an ‚Äúouter‚Äù hypermedia control, just as in the case of the Sortable.js example
above.&lt;&#x2F;p&gt;
&lt;p&gt;Deniz Ak≈üim≈üek has made the observation that it is typically easier to embed non-hypermedia islands within a larger
Hypermedia-Driven Application, rather than vice-versa.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inline&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#inline&quot; aria-label=&quot;Anchor link for: inline&quot;&gt;üîó&lt;&#x2F;a&gt;Inline Scripts&lt;&#x2F;h2&gt;
&lt;p&gt;A final rule for hypermedia-friendly scripting is inline scripting: writing your scripts directly within a hypermedia, 
rather than locating your scripts in an external file.  This is a controversial concept compared with the others
listed here, and we consider it an ‚Äúoptional‚Äù rule for hypermedia-friendly scripting: worth considering but not required.&lt;&#x2F;p&gt;
&lt;p&gt;This approach to scripting, while idiosyncratic, has been adopted by some HTML scripting libraries, notably
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&quot;&gt;Alpine.js&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is some example hyperscript, showing an inline script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;on click toggle .visible on the next &amp;lt;section&#x2F;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Show Next Section
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ....
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This button, as it says, toggles the &lt;code&gt;.visible&lt;&#x2F;code&gt; class on the &lt;code&gt;section&lt;&#x2F;code&gt; element when it is clicked.&lt;&#x2F;p&gt;
&lt;p&gt;A primary advantage of this inline approach to hypermedia scripting is that, conceptually, the hypermedia itself is 
emphasized, rather than the scripting of the hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;Contrast this code with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;components-and-props.html&quot;&gt;JSX Components&lt;&#x2F;a&gt;, where the
scripting language (JavaScript) is the core concept, with hypermedia&#x2F;HTML embedded within it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;React.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;toggleVisibilityOnNextSection&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;button onClick={this.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;toggleVisibilityOnNextSection&lt;&#x2F;span&gt;&lt;span&gt;}&amp;gt;{this.props.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, you can see that the JavaScript is the primary technology in use, with the hypermedia&#x2F;HTML being used as a UI
description mechanism.  The fact that the HTML is a hypermedia is almost immaterial in this case.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, the inline scripting and the JSX approach do share an advantage in common: both satisfy the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;locality-of-behaviour&#x2F;&quot;&gt;Locality of Behavior(LoB)&lt;&#x2F;a&gt;,
design principle.  They both &lt;em&gt;localize&lt;&#x2F;em&gt; behavior to the elements or components in question, which makes it easier to see
what these elements and components do.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, with inline scripts, there should be a soft limit to the amount of scripting done directly within the 
hypermedia.  You don‚Äôt want to overwhelm your hypermedia with scripting, so that it becomes difficult to understand ‚Äúthe shape‚Äù
of the hypermedia document.&lt;&#x2F;p&gt;
&lt;p&gt;Using techniques like invoking library functions or using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&#x2F;features&#x2F;behavior&#x2F;&quot;&gt;hyperscript behaviors&lt;&#x2F;a&gt; 
allow you to use inline scripting while pulling implementations out to a separate file or location.&lt;&#x2F;p&gt;
&lt;p&gt;Inline scripting isn‚Äôt required for scripting to be hypermedia-friendly, but it is worth considering as an alternative to a 
more traditional scripting&#x2F;hypermedia split.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pragmatism&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pragmatism&quot; aria-label=&quot;Anchor link for: pragmatism&quot;&gt;üîó&lt;&#x2F;a&gt;Pragmatism&lt;&#x2F;h2&gt;
&lt;p&gt;Of course, here in the real world, there are many useful JavaScript libraries that violate HATEOAS and that do not trigger 
events.  This often makes them difficult fits for a Hypermedia-Driven Application.  Nonetheless, these libraries may 
provide crucial bits of functionality that are difficult to find elsewhere.&lt;&#x2F;p&gt;
&lt;p&gt;In cases like this, we advocate pragmatism: if it is easy enough to alter the library to be hypermedia-friendly or to
wrap it in a hypermedia-friendly way, that may be a good option.  You never know, the upstream author might 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dropzone&#x2F;dropzone&#x2F;commit&#x2F;64771e35baf032ee0910d1e56e6f44457efe138e&quot;&gt;consider a pull request&lt;&#x2F;a&gt; 
to help improve their library.&lt;&#x2F;p&gt;
&lt;p&gt;But, if not, and if there are no good alternatives, then just use the JavaScript library as it is designed.&lt;&#x2F;p&gt;
&lt;p&gt;Try to isolate a hypermedia-unfriendly library from the rest of your application, but, in general, do not
spend too much of your &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&#x2F;docs&#x2F;#debugging&quot;&gt;complexity budget&lt;&#x2F;a&gt; on maintaining conceptual purity:
sufficient unto the day is the evil thereof.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.8.3 has been released!</title>
        <published>2022-11-04T00:00:00+00:00</published>
        <updated>2022-11-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2022-11-04-htmx-1-8-3-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2022-11-04-htmx-1-8-3-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-8-3-release&quot;&gt;htmx 1.8.3 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.8.3&#x2F;&quot;&gt;1.8.3 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;events&#x2F;#htmx:confirm&quot;&gt;&lt;code&gt;htmx:confirm&lt;&#x2F;code&gt; event&lt;&#x2F;a&gt; was added that allows for asynchronous confirmation dialogs to
be integrated into htmx requests&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;head-support&#x2F;&quot;&gt;head-support&lt;&#x2F;a&gt; extension allows for more elaborate head tag merging than standard htmx
supports.  This functionality may be integrated into htmx 2.0, depending on feedback.&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;multi-swap&#x2F;&quot;&gt;multi-swap&lt;&#x2F;a&gt; provides more elaborate swapping of multiple elements on a screen using
a custom swap strategy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Many smaller bug and docs fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>When Should You Use Hypermedia?</title>
        <published>2022-10-23T00:00:00+00:00</published>
        <updated>2023-02-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/when-to-use-hypermedia/" type="text/html"/>
        <id>https://htmx.org/essays/when-to-use-hypermedia/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The trade-off, though, is that a uniform interface degrades efficiency, since information is transferred in a 
standardized form rather than one which is specific to an application‚Äôs needs. The REST interface is designed to be 
efficient for large-grain hypermedia data transfer, optimizing for the common case of the Web, but resulting in an
interface that is not optimal for other forms of architectural interaction.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;-Roy Fielding, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We are obviously fans of hypermedia and think that it can address, at least in part, many of the problems that the web 
development world is facing today:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Hypermedia is often &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-real-world-react-to-htmx-port&#x2F;&quot;&gt;significantly less complex&lt;&#x2F;a&gt; than an SPA approach would 
be for many problems&lt;&#x2F;li&gt;
&lt;li&gt;Hypermedia allows your application API to be &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;much more aggressively refactored and optimized&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hypermedia takes pressure off adopting a particular server technology, since you do not have an extensive JavaScript
front-end code base&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt; and the additional UX possibilities that it gives you, we believe that many modern web applications can be built 
using HTML and the hypermedia paradigm.&lt;&#x2F;p&gt;
&lt;p&gt;With that being said, as with all technical choices, there are tradeoffs associated with hypermedia.  In this article
we will give you some ways to think about if hypermedia will be a good fit for an application or feature you are building.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transitional-applications-hypermedia&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transitional-applications-hypermedia&quot; aria-label=&quot;Anchor link for: transitional-applications-hypermedia&quot;&gt;üîó&lt;&#x2F;a&gt;Transitional Applications &amp;amp; Hypermedia&lt;&#x2F;h2&gt;
&lt;p&gt;Before we get into the details of when hypermedia is a good choice, we‚Äôd like to clarify that adopting hypermedia is not
an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Either&#x2F;Or&quot;&gt;either&#x2F;or&lt;&#x2F;a&gt; decision when building a web application.  Even the most Single-y
of Single Page Applications utilizes hypermedia after all: as a bootstrap mechanism, to start the application.&lt;&#x2F;p&gt;
&lt;p&gt;In his talk, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=860d8usGC0o&quot;&gt;Have SPAs Ruined The Web&lt;&#x2F;a&gt;, Rich Harris gives us the term
‚ÄúTransitional‚Äù Applications, that is applications that &lt;em&gt;mix&lt;&#x2F;em&gt; both hypermedia and non-hypermedia (SPA) concepts.  We
have responded to Mr. Harris‚Äô talk &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-response-to-rich-harris&#x2F;&quot;&gt;in more detail here&lt;&#x2F;a&gt;, but suffice to say we 
violently agree with him that a pragmatic ‚ÄúTransitional‚Äù approach to web development is best: you should use the
right tool for the particular job you are working on.&lt;&#x2F;p&gt;
&lt;p&gt;Where we would likely disagree with Mr. Harris is where ‚Äúthe line‚Äù is between features that can be implemented
effectively in hypermedia and features that require a more sophisticated client-side approach.  We feel that, with htmx,
hypermedia can go much, much further than many web developers today believe is possible.  And, further, that, for many
applications, it can address many or all of their UX needs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hypermedia-a-good-fit-if&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hypermedia-a-good-fit-if&quot; aria-label=&quot;Anchor link for: hypermedia-a-good-fit-if&quot;&gt;üîó&lt;&#x2F;a&gt;Hypermedia: A Good Fit If‚Ä¶&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;if-your-ui-is-mostly-text-images&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-your-ui-is-mostly-text-images&quot; aria-label=&quot;Anchor link for: if-your-ui-is-mostly-text-images&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If your UI is mostly text &amp;amp; images&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-real-world-react-to-htmx-port&#x2F;&quot;&gt;The Mother Of All htmx Demos&lt;&#x2F;a&gt;, David Guillot of Contexte shows how replacing
React with htmx lead to a 67% reduction in the total codebase, along with numerous other eye-popping results.&lt;&#x2F;p&gt;
&lt;p&gt;As much as we would like to claim that every team moving from React to htmx would experience these results, the fact is that the
Contexte web application is &lt;em&gt;extremely amenable&lt;&#x2F;em&gt; to the hypermedia style.&lt;&#x2F;p&gt;
&lt;p&gt;What makes Contexte so perfect for hypermedia is that it is a media-oriented web application, showing articles consisting
of text and images for reading.  It has a sophisticated filtering mechanism and other niceties, but the crux of the
application is displaying and categorizing articles.  This is exactly the sort of thing that hypermedia was designed to
do, and this is why htmx and hypermedia worked so well for their application.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-your-ui-is-crud-y&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-your-ui-is-crud-y&quot; aria-label=&quot;Anchor link for: if-your-ui-is-crud-y&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If your UI is CRUD-y&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Another area where hypermedia has a long track-record of success is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Create,_read,_update_and_delete&quot;&gt;CRUD&lt;&#x2F;a&gt;-y
web applications, in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rubyonrails.org&#x2F;&quot;&gt;Ruby on Rails&lt;&#x2F;a&gt; style.  If your main application mechanic is showing
forms and saving the forms into a database, hypermedia can work very well.&lt;&#x2F;p&gt;
&lt;p&gt;And, with htmx, it can also be &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;click-to-edit&#x2F;&quot;&gt;very smooth&lt;&#x2F;a&gt;, and not just constrained
to the simple &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;edit-row&#x2F;&quot;&gt;list view&#x2F;detail view&lt;&#x2F;a&gt; approach many server side applications take.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-your-ui-is-nested-with-updates-mostly-taking-place-within-well-defined-blocks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-your-ui-is-nested-with-updates-mostly-taking-place-within-well-defined-blocks&quot; aria-label=&quot;Anchor link for: if-your-ui-is-nested-with-updates-mostly-taking-place-within-well-defined-blocks&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If your UI is ‚Äúnested‚Äù, with updates mostly taking place within well-defined blocks&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One area where hypermedia can start to go a little wobbly is when you have UI dependencies that span structural
areas of the screen.  A good example of this, and one that often comes up when discussing the hypermedia approach, is the issue
count number shown on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&quot;&gt;‚ÄúIssues‚Äù tab&lt;&#x2F;a&gt; in GitHub.  For a long time, 
when you closed an issue on GitHub, the issue count on the tab did not update properly.  GitHub, in general (although
not exclusively), uses a hypermedia-style application.&lt;&#x2F;p&gt;
&lt;p&gt;‚ÄúAh ha!‚Äù, exclaims the SPA enthusiast, ‚ÄúSee, even GitHub can‚Äôt get this right!‚Äù&lt;&#x2F;p&gt;
&lt;p&gt;Well, GitHub has fixed the issue, but it does demonstrate a problem with the hypermedia approach: how do you update
disjoint parts of the UI cleanly?  htmx offers &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;update-other-content&#x2F;&quot;&gt;a few techniques for making this work&lt;&#x2F;a&gt;,
and Contexte, in their talk, discuss handling this situation very cleanly, using the event approach.&lt;&#x2F;p&gt;
&lt;p&gt;But, let us grant that this is an area where the hypermedia approach can get into trouble.  To avoid this problem, one
potential strategy is to colocate dependent elements for a given resource within a given region or area on the screen in an
application.&lt;&#x2F;p&gt;
&lt;p&gt;As an example, consider a contact application whose detail screen for displaying and editing a contact has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An area for basic contact information&lt;&#x2F;li&gt;
&lt;li&gt;An area for the contact‚Äôs emails, and the count of those emails&lt;&#x2F;li&gt;
&lt;li&gt;An area for the contact‚Äôs phone numbers, and the count of those phone numbers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This UI could be laid out in the following manner:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;nesting-example.png&quot; alt=&quot;Nested Example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this scenario, each subsection can have its own dedicated hypermedia end-points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;contacts&#x2F;&amp;lt;id&amp;gt;&#x2F;details&lt;&#x2F;code&gt; for the first name&#x2F;last name&#x2F; etc. info&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;contacts&#x2F;&amp;lt;id&amp;gt;&#x2F;emails&lt;&#x2F;code&gt; for the email section&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;contacts&#x2F;&amp;lt;id&amp;gt;&#x2F;phonenumbers&lt;&#x2F;code&gt; for the phone numbers section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The trick here is that the email and phone counts are co-located on the screen with their collections, which allows you to 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-target&#x2F;&quot;&gt;target&lt;&#x2F;a&gt; just that particular area for update when a modification is made to the respective 
collections.  All the data dependencies are co-located within a single area that can be updated via a single, simple
and obvious target, and that, further, don‚Äôt interfere with one another when they are replaced.&lt;&#x2F;p&gt;
&lt;p&gt;Each area effectively forms a sort of server-side component, independent of the other areas on the screen, and they are
all nested within a broader contact detail user interface.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a-side-node-ui-driven-hypermedia-apis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-side-node-ui-driven-hypermedia-apis&quot; aria-label=&quot;Anchor link for: a-side-node-ui-driven-hypermedia-apis&quot;&gt;üîó&lt;&#x2F;a&gt;A Side Node: UI Driven Hypermedia APIs&lt;&#x2F;h4&gt;
&lt;p&gt;Note that our hypermedia API (i.e. our end-points) in this case is &lt;em&gt;driven by the UI&lt;&#x2F;em&gt;: we have a particular UI layout 
that we want to achieve, and we adapt our API to that.  If the UI changed, we would have no qualms with completely changing
our API to satisfy the new requirements.  This is a &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;unique aspect&lt;&#x2F;a&gt; of developing with
hypermedia, and we &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-apis-vs-data-apis&#x2F;&quot;&gt;discuss it in more detail here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, there may be UI requirements that do not allow for grouping of dependent element in this manner and, if
the techniques &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;update-other-content&#x2F;&quot;&gt;mentioned above&lt;&#x2F;a&gt; aren‚Äôt satisfactory, then it may be 
time to consider an alternative approach.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-you-need-deep-links-good-first-render-performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-you-need-deep-links-good-first-render-performance&quot; aria-label=&quot;Anchor link for: if-you-need-deep-links-good-first-render-performance&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If you need ‚Äúdeep links‚Äù &amp;amp; good first-render performance&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A final area where hypermedia outperforms other options is when you need ‚Äúdeep links‚Äù, that is, links into your
application that go beyond the landing page, or when you need excellent first-render performance.&lt;&#x2F;p&gt;
&lt;p&gt;Since hypermedia is the natural language of the web, and since browsers are very good at rendering HTML given a URL, 
using this approach is hard to beat for ‚Äútraditional‚Äù web features such as these.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hypermedia-not-a-good-fit-if&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hypermedia-not-a-good-fit-if&quot; aria-label=&quot;Anchor link for: hypermedia-not-a-good-fit-if&quot;&gt;üîó&lt;&#x2F;a&gt;Hypermedia: Not A Good Fit If‚Ä¶&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;if-your-ui-has-many-dynamic-interdependencies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-your-ui-has-many-dynamic-interdependencies&quot; aria-label=&quot;Anchor link for: if-your-ui-has-many-dynamic-interdependencies&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If your UI has many, dynamic interdependencies&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As we discussed above in the section on ‚Äúnested‚Äù UIs, one area where hypermedia can have trouble is when there are 
many UI dependencies spread across your UI and you can‚Äôt afford to ‚Äúupdate the whole UI‚Äù.  This is what Roy Fielding was
getting at in the quote at the top of this article: the web was designed for large-grain hypermedia data transfers, not
for lots of small data exchanges.&lt;&#x2F;p&gt;
&lt;p&gt;Particularly difficult for hypermedia to handle is when these dependencies are dynamic, that is, they depend on information
that cannot be determined at server-side render-time.  A good example of this is something like a spreadsheet: a user can
enter an arbitrary function into a cell and introduce all sorts of dependencies on the screen, on the fly.&lt;&#x2F;p&gt;
&lt;p&gt;(Note, however, that for many applications, the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;edit-row&#x2F;&quot;&gt;‚Äúeditable row‚Äù&lt;&#x2F;a&gt; pattern is an 
acceptable alternative to more general spreadsheet-like behavior, and this pattern does play well with hypermedia by 
isolating edits within a bounded area.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-you-require-offline-functionality&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-you-require-offline-functionality&quot; aria-label=&quot;Anchor link for: if-you-require-offline-functionality&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If you require offline functionality&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The hypermedia distributed architecture leans heavily on the server side for rendering representations of resources. When
a server is down or unreachable, the architecture will obviously have trouble.  It is possible to use Service Workers
to handle offline requests (although this is a complex option), and it is also easy to detect when a hypermedia 
application is offline and show an offline message, as many thick-client application do.&lt;&#x2F;p&gt;
&lt;p&gt;But if your application requires full functionality in an offline environment, then the hypermedia approach is not
going to be an acceptable one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-your-ui-state-is-updated-extremely-frequently&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-your-ui-state-is-updated-extremely-frequently&quot; aria-label=&quot;Anchor link for: if-your-ui-state-is-updated-extremely-frequently&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If your UI state is updated extremely frequently&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Another situation where hypermedia is not going to be a good approach is if your UI state is updated frequently.  A good
example is an online game that needs to capture mouse movements.  Putting a hypermedia network request in-between a mouse
move and a UI update will not work well, and you would be far better off writing your own client-side state management
for the game and syncing with a server using a different technology.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, your game may also have a setting page and that setting page might be better done with hypermedia than
whatever solution you use for the core of your game.  There is nothing wrong with mixing approaches, in the Transitional
style!&lt;&#x2F;p&gt;
&lt;p&gt;We should note, however, that it is typically easier to embed SPA components &lt;em&gt;within&lt;&#x2F;em&gt; a larger hypermedia
architecture, than vice-versa.  Isolated client-side components can communicate with a broader hypermedia application
via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;JavaScript&#x2F;Building_blocks&#x2F;Events&quot;&gt;events&lt;&#x2F;a&gt;, in the manner demonstrated
in the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;sortable&#x2F;&quot;&gt;drag-and-drop Sortable.js + htmx&lt;&#x2F;a&gt; example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;if-your-team-is-not-on-board&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#if-your-team-is-not-on-board&quot; aria-label=&quot;Anchor link for: if-your-team-is-not-on-board&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;em&gt;‚Ä¶If your team is not on board&lt;&#x2F;em&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A final reason to not choose hypermedia isn‚Äôt technical, but rather sociological: currently, hypermedia simply isn‚Äôt
in favor in web development.  Many companies have adopted React as their standard library for building web applications.&lt;br &#x2F;&gt;
Many developers and consultants have bet their careers on it.  Many hiring managers have never heard of hypermedia, let
alone htmx, but put React on every job they post out of habit.  It is certainly much easier to hire for!&lt;&#x2F;p&gt;
&lt;p&gt;While this is frustrating, it is a real phenomenon and should be borne in mind with humility.  Although Contexte
was able to rewrite their application quickly and effectively in htmx, not all teams are as small, agile and
passionate, nor are all applications such slam dunks for the approach.  It may be better to adopt hypermedia around
the edges, perhaps for internal tools first, to prove its value first, before taking a broader look at it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We are often asked: ‚ÄúOK, so what sorts of applications &lt;strong&gt;wouldn‚Äôt&lt;&#x2F;strong&gt; htmx be good for‚Äù.  We prefer to think about
things on a feature-by-feature basis using the ‚ÄúTransitional‚Äù application concept, but it is useful to have some
broad, popular applications in mind when thinking about just how much might be done in hypermedia versus other
approaches.&lt;&#x2F;p&gt;
&lt;p&gt;To give an example of two famous applications that we think &lt;em&gt;could&lt;&#x2F;em&gt; be implemented cleanly in hypermedia, consider 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&quot;&gt;Twitter&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gmail.com&quot;&gt;GMail&lt;&#x2F;a&gt;.  Both web applications are text-and-image heavy, with
coarse-grain updates and, thus, would be quite amenable to a hypermedia approach.&lt;&#x2F;p&gt;
&lt;p&gt;Two famous examples of web applications that would &lt;em&gt;not&lt;&#x2F;em&gt; be amenable to a hypermedia approach are 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;sheets&#x2F;about&#x2F;&quot;&gt;Google Sheets&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;maps.google.com&quot;&gt;Google Maps&lt;&#x2F;a&gt;.  Google Sheets can have
a large amounts of state within and interdependencies between many cells, making it untenable to issue a server request on every
cell update.  Google Maps, on the other hand, responds rapidly to mouse movements and simply can‚Äôt afford a server round trip for
every one of them.  Both of these applications require a much more sophisticated client-side setup than what hypermedia 
can provide.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, the vast majority of web applications are nowhere near the scale and complexity of these examples. And almost 
every web application, even Google Sheets or Google Maps, has parts where, potentially, the hypermedia approach would be
better: simpler, faster and cleaner.&lt;&#x2F;p&gt;
&lt;p&gt;Having hypermedia as a tool in your tool-chest will improve your ability to address engineering problems as a web
developer, even if it doesn‚Äôt become your favorite hammer.  There is a good &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;theoretical basis&lt;&#x2F;a&gt; 
for the approach, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-real-world-react-to-htmx-port&#x2F;&quot;&gt;practical benefits for many applications&lt;&#x2F;a&gt;,
and it is ‚Äúwith the grain‚Äù of the web in a way that other approaches are not.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.8.1 has been released!</title>
        <published>2022-10-11T00:00:00+00:00</published>
        <updated>2022-10-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2022-10-11-htmx-1-8-1-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2022-10-11-htmx-1-8-1-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-8-1-release&quot;&gt;htmx 1.8.1 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.8.1&#x2F;&quot;&gt;1.8.1 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;We now keep a count of outstanding requests for an indicator, so more than one overlapping request can share the same
indicator without issues&lt;&#x2F;li&gt;
&lt;li&gt;We now track the attribute state of an element and re-initialize it if &lt;code&gt;htmx.process()&lt;&#x2F;code&gt; is called on the element and
the attributes have changed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;idiomorph&quot;&gt;Idiomorph&lt;&#x2F;a&gt; is now available for all your morph-swapping needs&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-validate&#x2F;&quot;&gt;&lt;code&gt;hx-validate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute will force elements to validate before a request, even if
they are not within a form being submitted&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;unset&lt;&#x2F;code&gt; directive now works properly for &lt;code&gt;hx-vals&lt;&#x2F;code&gt; and &lt;code&gt;hx-vars&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The title of the page is now properly set on a history cache miss&lt;&#x2F;li&gt;
&lt;li&gt;Many smaller bug and docs fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>A Real World React -&gt; htmx Port</title>
        <published>2022-09-29T00:00:00+00:00</published>
        <updated>2022-10-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/a-real-world-react-to-htmx-port/" type="text/html"/>
        <id>https://htmx.org/essays/a-real-world-react-to-htmx-port/</id>
        <content type="html">&lt;p&gt;It is all well and good talking about &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;REST &amp;amp; HATEOAS&lt;&#x2F;a&gt; in theory or describing the
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia-Driven Application&lt;&#x2F;a&gt; architecture, but, at the end of the day, what 
matters in software is practical: Does it work?  Does it improve things?&lt;&#x2F;p&gt;
&lt;p&gt;We can say for sure that htmx &lt;em&gt;works&lt;&#x2F;em&gt;, since we use it in our own software.  But it is hard to say that it would be
an &lt;em&gt;improvement&lt;&#x2F;em&gt; over other approaches, since we haven‚Äôt had an apples-to-apples comparison of how htmx might compare with,
say, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;react&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Until now.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;David-Guillot&quot;&gt;David Guillot&lt;&#x2F;a&gt; at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.contexte.com&#x2F;&quot;&gt;Contexte&lt;&#x2F;a&gt; has given what we are calling 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Mother_of_All_Demos&quot;&gt;‚ÄúThe Mother of All htmx Demos‚Äù&lt;&#x2F;a&gt; at
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pretalx.evolutio.pt&#x2F;djangocon-europe-2022&#x2F;talk&#x2F;MZWJEA&#x2F;&quot;&gt;DjangoCon 2022&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From React to htmx on a real-world SaaS product: we did it, and it‚Äôs awesome!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We took the plunge and replaced the 2-year-of-work React UI of our SaaS product with simple Django templates and htmx 
in a couple of months. We‚Äôd like to share our experience with you, with concrete indicators on various aspects, and 
convince your CTO!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;video&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#video&quot; aria-label=&quot;Anchor link for: video&quot;&gt;üîó&lt;&#x2F;a&gt;Video&lt;&#x2F;h2&gt;
&lt;p&gt;You can (should!) watch the entire presentation here:&lt;&#x2F;p&gt;
&lt;iframe style=&quot;max-width: 100%&quot; width=&quot;618&quot; height=&quot;352&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;3GObi93tjZI&quot; title=&quot;DjangoCon 2022 | From React to htmx on a real-world SaaS product: we did it, and it&#x27;s awesome!&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;executive-summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#executive-summary&quot; aria-label=&quot;Anchor link for: executive-summary&quot;&gt;üîó&lt;&#x2F;a&gt;Executive Summary&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;The effort took about &lt;strong&gt;2 months&lt;&#x2F;strong&gt; (with a 21K LOC code base, mostly JavaScript)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No reduction&lt;&#x2F;strong&gt; in the application‚Äôs user experience (UX)&lt;&#x2F;li&gt;
&lt;li&gt;They reduced the &lt;strong&gt;code base size&lt;&#x2F;strong&gt; by &lt;strong&gt;67%&lt;&#x2F;strong&gt; (21,500 LOC to 7200 LOC)&lt;&#x2F;li&gt;
&lt;li&gt;They &lt;em&gt;increased&lt;&#x2F;em&gt; &lt;strong&gt;python code&lt;&#x2F;strong&gt; by &lt;strong&gt;140%&lt;&#x2F;strong&gt; (500 LOC to 1200 LOC), a good thing if you prefer python to JS&lt;&#x2F;li&gt;
&lt;li&gt;They reduced their total &lt;strong&gt;JS dependencies&lt;&#x2F;strong&gt; by &lt;strong&gt;96%&lt;&#x2F;strong&gt; (255 to 9)&lt;&#x2F;li&gt;
&lt;li&gt;They reduced their &lt;strong&gt;web build time&lt;&#x2F;strong&gt; by &lt;strong&gt;88%&lt;&#x2F;strong&gt; (40 seconds to 5)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;First load time-to-interactive&lt;&#x2F;strong&gt; was reduced by &lt;strong&gt;50-60%&lt;&#x2F;strong&gt; (from 2 to 6 seconds to 1 to 2 seconds)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Much larger data sets were possible&lt;&#x2F;strong&gt; when using htmx, because react simply couldn‚Äôt handle the data&lt;&#x2F;li&gt;
&lt;li&gt;Web application &lt;strong&gt;memory usage&lt;&#x2F;strong&gt; was reduced by &lt;strong&gt;46%&lt;&#x2F;strong&gt; (75MB to 45MB)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;analysis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#analysis&quot; aria-label=&quot;Anchor link for: analysis&quot;&gt;üîó&lt;&#x2F;a&gt;Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;These are eye-popping numbers, and they reflect the fact that the Contexte application is extremely amenable to 
hypermedia: it is a content-focused application that shows lots of text and images.  We would not expect every 
web application to see these sorts of numbers.&lt;&#x2F;p&gt;
&lt;p&gt;However, we &lt;em&gt;would&lt;&#x2F;em&gt; expect &lt;em&gt;many&lt;&#x2F;em&gt; applications to see dramatic improvements by adopting the hypermedia&#x2F;htmx approach, at
least for part of their system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dev-team-makeup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dev-team-makeup&quot; aria-label=&quot;Anchor link for: dev-team-makeup&quot;&gt;üîó&lt;&#x2F;a&gt;Dev Team Makeup&lt;&#x2F;h3&gt;
&lt;p&gt;One easy-to-overlook aspect of the port is the effect it had on the team‚Äôs structure.  When Contexte was using react,
there was a hard split between back-end and front-end, with two developers being entirely back-end, one developer being
entirely front-end, and one developer being ‚Äúfull stack‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;(‚ÄúFull stack‚Äù here means they are comfortable doing work on both the front-end and back-end, and, thus are able to 
develop features entirely independently across the whole ‚Äústack‚Äù.)&lt;&#x2F;p&gt;
&lt;p&gt;After the port to htmx, &lt;em&gt;the entire team&lt;&#x2F;em&gt; became ‚Äúfull stack‚Äù developers.  This means that each team member is more 
effective and able to contribute more value.  It also makes development more fun, since developers can own an entire
feature.  Finally, it can lead to better optimized software, since the developer can make optimizations anywhere in
the stack without needing to coordinate with other developers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;slides&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#slides&quot; aria-label=&quot;Anchor link for: slides&quot;&gt;üîó&lt;&#x2F;a&gt;Slides&lt;&#x2F;h2&gt;
&lt;p&gt;The slides for the presentation can be found here (be sure to check the excellent speakers notes!)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1jW7vTiHFzA71m2EoCywjNXch-RPQJuAkTiLpleYFQjI&#x2F;edit?usp=sharing&quot;&gt;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1jW7vTiHFzA71m2EoCywjNXch-RPQJuAkTiLpleYFQjI&#x2F;edit?usp=sharing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Template Fragments</title>
        <published>2022-08-03T00:00:00+00:00</published>
        <updated>2023-03-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/template-fragments/" type="text/html"/>
        <id>https://htmx.org/essays/template-fragments/</id>
        <content type="html">&lt;p&gt;Template fragments are a relatively rare Server Side Rendering (SSR) template library feature that allow you to render a
&lt;em&gt;fragment&lt;&#x2F;em&gt; or partial bit of the content within a template, rather than the entire template.  This feature is very handy in 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia Driven Applications&lt;&#x2F;a&gt; because it allows you to decompose a particular
view for partial updates &lt;em&gt;internally&lt;&#x2F;em&gt; without pulling fragments of the template out to separate files for rendering,
creating a large number of individual template files.&lt;&#x2F;p&gt;
&lt;p&gt;By keeping all the HTML in a single file, it is also easier to reason about how a feature works.  This follows the
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;locality-of-behaviour&#x2F;&quot;&gt;Locality of Behavior&lt;&#x2F;a&gt; design principle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation&quot; aria-label=&quot;Anchor link for: motivation&quot;&gt;üîó&lt;&#x2F;a&gt;Motivation&lt;&#x2F;h2&gt;
&lt;p&gt;Let‚Äôs look at how template fragments, in an obscure templating language for java called
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;chill&#x2F;tree&#x2F;master&#x2F;chill-script&quot;&gt;chill templates&lt;&#x2F;a&gt;, can help us build an HDA.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a simple chill template, &lt;code&gt;&#x2F;contacts&#x2F;detail.html&lt;&#x2F;code&gt; that displays a contact:&lt;&#x2F;p&gt;
&lt;h5 id=&quot;contacts-detail-html&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#contacts-detail-html&quot; aria-label=&quot;Anchor link for: contacts-detail-html&quot;&gt;üîó&lt;&#x2F;a&gt;&#x2F;contacts&#x2F;detail.html&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;this&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          #if contact.archived
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-patch&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;${contact.id}&#x2F;unarchive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Unarchive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          #else
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-delete&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;${contact.id}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Archive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          #end
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Contact&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${contact.email}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the template we have an archiving feature where, depending on the archive state of the contact, we either display an ‚ÄúArchive‚Äù
or an ‚ÄúUnarchive‚Äù button, both powered by htmx and issuing HTTP requests to different end points.&lt;&#x2F;p&gt;
&lt;p&gt;When we click whichever of the two buttons is being shown, we want to replace the content in the &lt;code&gt;div&lt;&#x2F;code&gt; that surrounds 
the button with an updated button.  (Note the &lt;code&gt;hx-target=&amp;quot;this&amp;quot;&lt;&#x2F;code&gt; on the div, so we are targeting that div‚Äôs innerHTML for
replacement.)  This will effectively flip the back and forth between ‚ÄúArchive‚Äù and ‚ÄúUnarchive‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;Now, unfortunately, if we wanted to render only the buttons and not the rest of this template, this would typically involve
splitting the buttons out to their own template file and including it in this template, like so:&lt;&#x2F;p&gt;
&lt;h5 id=&quot;contacts-detail-html-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#contacts-detail-html-1&quot; aria-label=&quot;Anchor link for: contacts-detail-html-1&quot;&gt;üîó&lt;&#x2F;a&gt;&#x2F;contacts&#x2F;detail.html&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;this&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          #include archive-ui.html
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Contact&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${contact.email}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;contacts-archive-ui-html&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#contacts-archive-ui-html&quot; aria-label=&quot;Anchor link for: contacts-archive-ui-html&quot;&gt;üîó&lt;&#x2F;a&gt;&#x2F;contacts&#x2F;archive-ui.html&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;#if contact.archived
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-patch&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;${contact.id}&#x2F;unarchive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Unarchive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;#else
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-delete&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;${contact.id}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Archive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;#end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have two templates.  We can now render the &lt;code&gt;archive-ui.html&lt;&#x2F;code&gt; template separately, but this split reduces the 
visibility of the archiving feature: it is less obvious what is going on when you are looking just at the &lt;code&gt;detail.html&lt;&#x2F;code&gt; 
template.&lt;&#x2F;p&gt;
&lt;p&gt;When pushed to extremes, decomposing templates like this can lead to quite a few small template fragments which, in
total, become difficult to manage and to reason about.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;template-fragments-to-the-rescue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#template-fragments-to-the-rescue&quot; aria-label=&quot;Anchor link for: template-fragments-to-the-rescue&quot;&gt;üîó&lt;&#x2F;a&gt;Template Fragments To The Rescue&lt;&#x2F;h3&gt;
&lt;p&gt;To address this issue, chill templates has a &lt;code&gt;#fragment&lt;&#x2F;code&gt; directive.  This directive allows you to specify a block of 
content within a template and render &lt;em&gt;just that bit of content&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;h5 id=&quot;contacts-detail-html-using-a-fragment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#contacts-detail-html-using-a-fragment&quot; aria-label=&quot;Anchor link for: contacts-detail-html-using-a-fragment&quot;&gt;üîó&lt;&#x2F;a&gt;&#x2F;contacts&#x2F;detail.html Using a Fragment&lt;&#x2F;h5&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;this&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          #fragment archive-ui
&lt;&#x2F;span&gt;&lt;span&gt;            #if contact.archived
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-patch&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;${contact.id}&#x2F;unarchive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Unarchive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            #else
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-delete&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;${contact.id}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Archive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            #end
&lt;&#x2F;span&gt;&lt;span&gt;          #end
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Contact&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${contact.email}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this fragment defined in our template, we can now render either the entire template:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Contact&lt;&#x2F;span&gt;&lt;span&gt; c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getContact&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ChillTemplates&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;detail.html&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;contact&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, c);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or we can render only the &lt;code&gt;archive-ui&lt;&#x2F;code&gt; &lt;em&gt;fragment&lt;&#x2F;em&gt; of the template&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Contact&lt;&#x2F;span&gt;&lt;span&gt; c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getContact&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ChillTemplates&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;detail.html#archive-ui&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;contact&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, c);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We would use the first option when we want to render the entire detail page for the contact.&lt;&#x2F;p&gt;
&lt;p&gt;We would use the second option when we handled the archive&#x2F;unarchive actions and wished only to rerender the buttons.&lt;&#x2F;p&gt;
&lt;p&gt;Note that, with fragments, we are able to keep our UI together in a single file and see exactly what is going on with 
the feature, without bouncing around between different template files.  This provides a cleaner and more obvious
implementation of the feature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;known-template-fragment-implementations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#known-template-fragment-implementations&quot; aria-label=&quot;Anchor link for: known-template-fragment-implementations&quot;&gt;üîó&lt;&#x2F;a&gt;Known Template Fragment Implementations&lt;&#x2F;h2&gt;
&lt;p&gt;Fragments (and the ability to render them directly in controllers) appear to be a relatively rare feature in templating
libraries and provide an excellent opportunity for improving the developer experience when working with htmx and other
hypermedia-oriented libraries.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some known implementations of the fragment concept:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Go
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;text&#x2F;template&quot;&gt;Standard Library (use block actions)&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;benpate&#x2F;f92b77ea9b3a8503541eb4b9eb515d8a&quot;&gt;[demo]&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Java
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thymeleaf.org&#x2F;doc&#x2F;tutorials&#x2F;3.0&#x2F;usingthymeleaf.html#fragment-specification-syntax&quot;&gt;Thymeleaf&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;chill&#x2F;tree&#x2F;master&#x2F;chill-script&quot;&gt;Chill Templates (currently in early alpha)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quarkus.io&#x2F;guides&#x2F;qute-reference#fragments&quot;&gt;Quarkus Qute&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jstach.io&#x2F;doc&#x2F;jstachio&#x2F;current&#x2F;apidocs&#x2F;#mustache_fragments&quot;&gt;JStachio (mustache)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;PHP
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;latte.nette.org&#x2F;en&#x2F;template-inheritance#toc-blocks&quot;&gt;Latte&lt;&#x2F;a&gt; - Use the 3rd parameter to only render 1 block from the template -  &lt;code&gt;$Latte_Engine-&amp;gt;render(&#x27;path&#x2F;to&#x2F;template.latte&#x27;, [ &#x27;foo&#x27; =&amp;gt; &#x27;bar&#x27; ], &#x27;content&#x27;);&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Python
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;django-render-block&#x2F;&quot;&gt;Django Render Block Extension&lt;&#x2F;a&gt; - see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spookylukey&#x2F;django-htmx-patterns&#x2F;blob&#x2F;master&#x2F;inline_partials.rst&quot;&gt;example code for htmx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsfreixes&#x2F;jinja2-fragments&quot;&gt;jinja2-fragments package&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mikeckennedy&#x2F;jinja_partials&quot;&gt;jinja_partials package&lt;&#x2F;a&gt; (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mikeckennedy&#x2F;jinja_partials&#x2F;issues&#x2F;1&quot;&gt;discussion&lt;&#x2F;a&gt; on motivation)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mikeckennedy&#x2F;chameleon_partials&quot;&gt;chameleon_partials package&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;basxsoftwareassociation&#x2F;htmlgenerator&quot;&gt;htmlgenerator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;django-template-partials&#x2F;&quot;&gt;django-template-partials&lt;&#x2F;a&gt; (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carltongibson&#x2F;django-template-partials&quot;&gt;repository&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;.NET
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bit-badger&#x2F;Giraffe.Htmx&#x2F;tree&#x2F;main&#x2F;src&#x2F;ViewEngine.Htmx&quot;&gt;Giraffe.ViewEngine.Htmx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rust
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;minijinja&#x2F;latest&#x2F;minijinja&#x2F;struct.State.html#method.render_block&quot;&gt;MiniJinja&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Please &lt;a href=&quot;&#x2F;discord&quot;&gt;let me know&lt;&#x2F;a&gt; if you know of others, so I can add them to this list.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>How Did REST Come To Mean The Opposite of REST?</title>
        <published>2022-07-18T00:00:00+00:00</published>
        <updated>2022-11-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/" type="text/html"/>
        <id>https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/</id>
        <content type="html">&lt;style&gt;
  pre {
        margin: 32px !important;
  }
&lt;&#x2F;style&gt;
&lt;h2 id=&quot;tapping-the-sign&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tapping-the-sign&quot; aria-label=&quot;Anchor link for: tapping-the-sign&quot;&gt;üîó&lt;&#x2F;a&gt;Tapping The Sign&lt;&#x2F;h2&gt;
&lt;img src=&quot;&#x2F;img&#x2F;tap-the-sign.png&quot; alt=&quot;You are wrong&quot; style=&quot;width: 80%;margin-left:10%; margin-top: 16px;margin-bottom: 16px&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;I am getting frustrated by the number of people calling any HTTP-based interface a REST API. Today‚Äôs example is the
SocialSite REST API. That is RPC. It screams RPC. There is so much coupling on display that it should be given an
X rating.&lt;&#x2F;p&gt;
&lt;p&gt;What needs to be done to make the REST architectural style clear on the notion that hypertext is a constraint? In
other words, if the engine of application state (and hence the API) is not being driven by hypertext, then it cannot
be RESTful and cannot be a REST API. Period. Is there some broken manual somewhere that needs to be fixed?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;‚ÄìRoy Fielding, Creator of the term REST&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;¬†¬†¬†&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;roy.gbiv.com&#x2F;untangled&#x2F;2008&#x2F;rest-apis-must-be-hypertext-driven&quot;&gt;REST APIs must be hypertext-driven&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST&lt;&#x2F;a&gt; must be the most broadly misused technical term
in computer programming history.&lt;&#x2F;p&gt;
&lt;p&gt;I can‚Äôt think of anything else that comes close.&lt;&#x2F;p&gt;
&lt;p&gt;Today, when someone uses the term REST, they are nearly always discussing a JSON-based API using HTTP.&lt;&#x2F;p&gt;
&lt;p&gt;When you see a job post mentioning REST or a company discussing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;api-guidelines&#x2F;blob&#x2F;vNext&#x2F;Guidelines.md&quot;&gt;REST Guidelines&lt;&#x2F;a&gt;
they will rarely mention either hypertext or hypermedia: they will instead mention JSON, GraphQL(!) and the like.&lt;&#x2F;p&gt;
&lt;p&gt;Only a few obstinate folks grumble: but these JSON APIs aren‚Äôt RESTful!&lt;&#x2F;p&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HOK6mE7sdvs&quot; title=&quot;Doesn&#x27;t anyone notice this?&quot;
        frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope&quot;
        style=&quot;width: 400px;height:300px;margin-left:15%;margin-top: 16px;margin-bottom: 16px&quot;&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;In this post, I‚Äôd like to give you a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;james-iry.blogspot.com&#x2F;2009&#x2F;05&#x2F;brief-incomplete-and-mostly-wrong.html&quot;&gt;brief, incomplete and mostly wrong&lt;&#x2F;a&gt;
history of REST, and how we got to a place where its meaning has been nearly perfectly inverted to mean what REST was
original contrasted with: RPC.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-did-rest-come-from&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-did-rest-come-from&quot; aria-label=&quot;Anchor link for: where-did-rest-come-from&quot;&gt;üîó&lt;&#x2F;a&gt;Where Did REST Come From?&lt;&#x2F;h2&gt;
&lt;p&gt;The term REST, short for REpresentational State Transfer, came from
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm&quot;&gt;Chapter 5 of Fielding‚Äôs PhD Dissertation&lt;&#x2F;a&gt;.
Fielding was describing the network architecture of the (then new) world wide web, and contrasting it with other possible
network architectures, particularly RPC-style network architectures.&lt;&#x2F;p&gt;
&lt;p&gt;It is important to understand that, at the time of his writing (1999-2000), there were no JSON APIs: he was describing
the web as it existed at that time, with HTML being exchanged over HTTP as people ‚Äúsurfed the web‚Äù.  JSON hadn‚Äôt been
created yet, and broad adoption of JSON was a decade off.&lt;&#x2F;p&gt;
&lt;p&gt;REST described a &lt;em&gt;network architecture&lt;&#x2F;em&gt;, and it was defined in terms of &lt;em&gt;constraints&lt;&#x2F;em&gt; on an API, constraints that
needed to be met in order to be considered a RESTful API.  The language is academic, which has contributed to the
confusion around the topic, but it is clear enough that most developers should be able to understand it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-crux-of-rest-the-uniform-interface-hateoas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-crux-of-rest-the-uniform-interface-hateoas&quot; aria-label=&quot;Anchor link for: the-crux-of-rest-the-uniform-interface-hateoas&quot;&gt;üîó&lt;&#x2F;a&gt;The Crux of REST: The Uniform Interface &amp;amp; HATEOAS&lt;&#x2F;h3&gt;
&lt;p&gt;REST has many constraints and concepts within it, but there is one crucial idea that I believe is the defining and
most distinguishing characteristic of REST, when contrasted with other possible network architectures.&lt;&#x2F;p&gt;
&lt;p&gt;This is known as the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer#Uniform_interface&quot;&gt;uniform interface constraint&lt;&#x2F;a&gt;,
and more specifically within that concept, the idea of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;Hypermedia As The Engine of Application State (HATEOAS)&lt;&#x2F;a&gt;
or as Fielding prefers to call it, the hypermedia constraint.&lt;&#x2F;p&gt;
&lt;p&gt;In order to understand this uniform interface constraint, lets consider two HTTP responses returning information about a
bank account, the first in HTML (a hypertext) and the second in JSON:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;an-html-response&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-html-response&quot; aria-label=&quot;Anchor link for: an-html-response&quot;&gt;üîó&lt;&#x2F;a&gt;An HTML Response&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Account number: 12345&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Balance: $100.00 USD&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Links:
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;deposits&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;withdrawals&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;transfers&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;close-requests&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;close-requests&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;a-json-response&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-json-response&quot; aria-label=&quot;Anchor link for: a-json-response&quot;&gt;üîó&lt;&#x2F;a&gt;A JSON Response&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;HTTP&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.1 200&lt;&#x2F;span&gt;&lt;span&gt; OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;100.00
&lt;&#x2F;span&gt;&lt;span&gt;     },
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;good&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The crucial difference between these two responses, and why the &lt;em&gt;HTML response&lt;&#x2F;em&gt; is RESTful, but the
&lt;em&gt;JSON response&lt;&#x2F;em&gt; is not, is this:&lt;&#x2F;p&gt;
&lt;p style=&quot;margin:32px;text-align: center;font-weight: bold&quot;&gt;The HTML response is entirely self-describing.&lt;&#x2F;p&gt;
&lt;p&gt;A proper hypermedia client that receives this response does not know what a bank account is, what a
balance is, etc.  It simply knows how to render a hypermedia, HTML.&lt;&#x2F;p&gt;
&lt;p&gt;The client knows nothing about the API end points associated with this data, except via URLs and hypermedia controls
(links and forms) discoverable within the HTML itself.  If the state of the resource changes such that the allowable
actions available on that resource change (for example, if the account goes into overdraft) then the HTML response would
change to show the new set of actions available.&lt;&#x2F;p&gt;
&lt;p&gt;The client would render this new HTML, totally unaware of what ‚Äúoverdraft‚Äù means or, indeed, even what a bank account is.&lt;&#x2F;p&gt;
&lt;p&gt;It is in this manner that hypertext is the engine of application state: the HTML response ‚Äúcarries along‚Äù all the API
information necessary to continue interacting with the system directly within itself.&lt;&#x2F;p&gt;
&lt;p&gt;Now, contrast that with the second JSON response.&lt;&#x2F;p&gt;
&lt;p&gt;In this case the message is &lt;em&gt;not&lt;&#x2F;em&gt; self describing.  Rather, the client must know how to interpret the &lt;code&gt;status&lt;&#x2F;code&gt; field to
display an appropriate user interface.  Further, the client must know what actions are available on the account based on
‚Äúout-of-band‚Äù information, that is, information on the URLs, parameters and so forth, derived from another source of
information &lt;em&gt;outside of the response&lt;&#x2F;em&gt;, such as swagger API documentation.&lt;&#x2F;p&gt;
&lt;p&gt;The JSON response is not self-describing and does not encode the state of the resource within a hypermedia.  It therefore
fails the uniform interface constraint of REST, and, thus, is not RESTful.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inventor-restful-apis-must-be-hypermedia-driven&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#inventor-restful-apis-must-be-hypermedia-driven&quot; aria-label=&quot;Anchor link for: inventor-restful-apis-must-be-hypermedia-driven&quot;&gt;üîó&lt;&#x2F;a&gt;Inventor: RESTful APIs Must Be Hypermedia Driven&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;roy.gbiv.com&#x2F;untangled&#x2F;2008&#x2F;rest-apis-must-be-hypertext-driven&quot;&gt;Rest APIs Must Be Hypermedia Driven&lt;&#x2F;a&gt;, Fielding
goes on to say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A REST API should be entered with no prior knowledge beyond the initial URI (bookmark) and set of standardized media
types that are appropriate for the intended audience (i.e., expected to be understood by any client that might use the
API). From that point on, all application state transitions must be driven by client selection of server-provided
choices that are present in the received representations or implied by the user‚Äôs manipulation of those representations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So, in a RESTful system, you should be able to enter the system through a single URL and, from that point on, all navigation
and actions taken within the system should be entirely provided through self-describing hypermedia: through links and
forms in HTML, for example.  Beyond the entry point, in a proper RESTful system, the API client shouldn‚Äôt need any
additional information about your API.&lt;&#x2F;p&gt;
&lt;p&gt;This is the source of the incredible flexibility of RESTful systems:  since all responses are self describing and
encode all the currently available actions available there is no need to worry about, for example, versioning your API!
In fact, you don‚Äôt even need to document it!&lt;&#x2F;p&gt;
&lt;p&gt;If things change, the hypermedia responses change, and that‚Äôs it.&lt;&#x2F;p&gt;
&lt;p&gt;It‚Äôs an incredibly flexible and innovative concept for building distributed systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;industry-lol-no-restful-apis-are-json&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#industry-lol-no-restful-apis-are-json&quot; aria-label=&quot;Anchor link for: industry-lol-no-restful-apis-are-json&quot;&gt;üîó&lt;&#x2F;a&gt;Industry: Lol, No, RESTful APIs Are JSON&lt;&#x2F;h3&gt;
&lt;p&gt;Today, most web developers and most companies would call the &lt;em&gt;second example&lt;&#x2F;em&gt; a RESTful API.&lt;&#x2F;p&gt;
&lt;p&gt;They probably wouldn‚Äôt even regard the first response &lt;em&gt;as an API response&lt;&#x2F;em&gt;.  It‚Äôs just HTML!&lt;&#x2F;p&gt;
&lt;p&gt;(Poor HTML, can‚Äôt get no respect.)&lt;&#x2F;p&gt;
&lt;p&gt;APIs are always JSON or maybe, if you are fancy, something like Protobuf, right?&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;you-are-wrong.png&quot; alt=&quot;You are wrong&quot; style=&quot;width: 80%;margin-left:10%; margin-top: 16px;margin-bottom: 16px&quot;&gt;
&lt;p&gt;Wrong.&lt;&#x2F;p&gt;
&lt;p&gt;You are all wrong and you should feel bad.&lt;&#x2F;p&gt;
&lt;p&gt;The first response &lt;em&gt;is&lt;&#x2F;em&gt; an API response, and, in fact, the one that is RESTful!&lt;&#x2F;p&gt;
&lt;p&gt;The second response is, in fact, a &lt;em&gt;Remote Procedure Call&lt;&#x2F;em&gt; (RPC) style of API.  The client and the server are coupled,
just like the SocialSite API Fielding complained about back in 2008: a client needs to have additional knowledge about
the resource it is working with that must be derived from some other source beyond the JSON response itself.&lt;&#x2F;p&gt;
&lt;p&gt;This API is, in spirit, nearly the opposite of REST.&lt;&#x2F;p&gt;
&lt;p&gt;Let‚Äôs call this style of API ‚ÄúRESTless‚Äù.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-rest-came-to-mean-restless&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-rest-came-to-mean-restless&quot; aria-label=&quot;Anchor link for: how-rest-came-to-mean-restless&quot;&gt;üîó&lt;&#x2F;a&gt;How ‚ÄúREST‚Äù came to mean ‚ÄúRESTless‚Äù&lt;&#x2F;h2&gt;
&lt;p&gt;Now, how on earth did we get to a spot where APIs that are &lt;em&gt;obviously&lt;&#x2F;em&gt; not RESTful are called RESTful by 99.9% of the
industry?&lt;&#x2F;p&gt;
&lt;p&gt;It‚Äôs a funny story:&lt;&#x2F;p&gt;
&lt;p&gt;Roy Fielding published his dissertation in 2000.&lt;&#x2F;p&gt;
&lt;p&gt;Around the same time, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XML-RPC&quot;&gt;XML-RPC&lt;&#x2F;a&gt;, an explicitly RPC-inspired protocol was released
and started to gather steam as a method to build APIs using HTTP.  XML-RPC was part of a larger project called
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SOAP&quot;&gt;SOAP&lt;&#x2F;a&gt;, from Microsoft.  XML-RPC came out of a long tradition of RPC-style
protocols, mainly from the enterprise world, with a lot of static typing and early XML-maximalism thrown in as well.&lt;&#x2F;p&gt;
&lt;p&gt;Also arriving at this moment was &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ajax_(programming)&quot;&gt;AJAX&lt;&#x2F;a&gt;, or Asynchronous
JavaScript and XML.  Note well the XML here.  AJAX, as everyone now knows, allows browsers to issue HTTP requests
to the server in the background and process the response directly in JavaScript, opening up a whole new world of
programming for the web.&lt;&#x2F;p&gt;
&lt;p&gt;The question was: what should those requests look like?  They were obviously going to be XML.  Look, it‚Äôs right there
in the name.  And this new SOAP&#x2F;XML-RPC standard was out, maybe that was the right thing?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;maybe-rest-can-work-for-web-services&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#maybe-rest-can-work-for-web-services&quot; aria-label=&quot;Anchor link for: maybe-rest-can-work-for-web-services&quot;&gt;üîó&lt;&#x2F;a&gt;Maybe REST can work for Web Services?&lt;&#x2F;h3&gt;
&lt;p&gt;Some people noticed that the web had this different sort of architecture that Fielding had described, and began to ask
if REST, rather than SOAP, should be the preferred mechanism for accessing what were coming to be called ‚ÄúWeb Services‚Äù.
The web was proving to be extremely flexible and growing gang busters, so maybe the same network architecture, REST, that
was working so well for browsers &amp;amp; humans would work well for APIs.&lt;&#x2F;p&gt;
&lt;p&gt;It sounded plausible, especially when XML was the format for APIs: XML sure &lt;em&gt;looks&lt;&#x2F;em&gt; an awful lot like HTML, doesn‚Äôt it?
You can imagine an XML API satisfying all of the RESTful constraints, up to and including the uniform interface.&lt;&#x2F;p&gt;
&lt;p&gt;So people began exploring this route as well.&lt;&#x2F;p&gt;
&lt;p&gt;While all this was happening, another important technology was in the process of being born: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.json.org&#x2F;json-en.html&quot;&gt;JSON&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JSON was (literally) JavaScript to SOAP&#x2F;RPC-XML‚Äôs Java: simple, dynamic and easy.  It‚Äôs hard to believe now,
when JSON is the dominant format for most web APIs, but it actually took a while for JSON to catch on.  As late as 2008,
discussions around API development were mainly around XML, not JSON.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;formalizing-rest-apis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#formalizing-rest-apis&quot; aria-label=&quot;Anchor link for: formalizing-rest-apis&quot;&gt;üîó&lt;&#x2F;a&gt;Formalizing REST APIs&lt;&#x2F;h3&gt;
&lt;p&gt;In 2008, Martin Fowler published an article popularizing the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;richardsonMaturityModel.html&quot;&gt;Richardson Maturity Model&lt;&#x2F;a&gt;,
a model to determine how RESTful a given API was.&lt;&#x2F;p&gt;
&lt;p&gt;The model proposed four ‚Äúlevels‚Äù, with the first level being Plain Old XML, or The Swamp of POX.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;rmm.png&quot; alt=&quot;Richardson Maturity Model&quot; style=&quot;width: 80%;margin-left:10%; margin-top: 16px;margin-bottom: 16px&quot;&gt;
&lt;p&gt;From there, an API could be considered more ‚Äúmature‚Äù as a REST API as it adopted the following ideas:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1: Resources (e.g. a resource-aware URL layout, contrasted with an opaque URL layout as in XML-RPC)&lt;&#x2F;li&gt;
&lt;li&gt;Level 2: HTTP Verbs (using &lt;code&gt;GET&lt;&#x2F;code&gt;, &lt;code&gt;POST&lt;&#x2F;code&gt;, &lt;code&gt;DELETE&lt;&#x2F;code&gt;, etc. properly)&lt;&#x2F;li&gt;
&lt;li&gt;Level 3: Hypermedia Controls (e.g. links)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Level 3 is where the uniform interface comes in, which is why this level is considered the most mature and truly ‚ÄúThe
Glory of REST‚Äù&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rest-wins-kinda&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rest-wins-kinda&quot; aria-label=&quot;Anchor link for: rest-wins-kinda&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúREST‚Äù Wins, Kinda‚Ä¶&lt;&#x2F;h3&gt;
&lt;p&gt;Unfortunately for the term REST, two things happened at this time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Everyone switched to JSON&lt;&#x2F;li&gt;
&lt;li&gt;Everyone stopped at Level 2 of the RMM&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;JSON rapidly took over the web service&#x2F;API world because SOAP&#x2F;XML-RPC was so dramatically over-engineered.  JSON was simple,
‚Äújust worked‚Äù and was easy to read and understand.&lt;&#x2F;p&gt;
&lt;p&gt;With this change, the web development world threw off the shackles of the
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Jakarta_EE&quot;&gt;J2EE mindset&lt;&#x2F;a&gt; conclusively, relegating SOAP&#x2F;XML-RPC to an enterprise-only affair.&lt;&#x2F;p&gt;
&lt;p&gt;Since the REST approach wasn‚Äôt as tied to XML as SOAP&#x2F;XML-RPC was, and since it didn‚Äôt impose as much formality on
end points, REST was the natural place for JSON to take over.  And it did so, rapidly.&lt;&#x2F;p&gt;
&lt;p&gt;During this crucial change, something became increasingly clear: most JSON APIs were stopping at Level 2 of the RMM.&lt;&#x2F;p&gt;
&lt;p&gt;Some pushed through to Level 3 by incorporating hypermedia controls in their responses, but nearly all these APIs still
needed to publish documentation, indicating that the ‚ÄúGlory of REST‚Äù was not being achieved.&lt;&#x2F;p&gt;
&lt;p&gt;JSON taking over as the response format should have been a strong hint as well: JSON is obviously not a hypertext.  You
can impose hypermedia controls on top of it, but it isn‚Äôt natural.  XML at least &lt;em&gt;looked&lt;&#x2F;em&gt; like HTML, kinda, so it was
plausible that you could create a hypermedia with it.&lt;&#x2F;p&gt;
&lt;p&gt;JSON was just‚Ä¶ data.  Adding hypermedia controls was awkward, non-standardized and rarely used in the manner described
by the uniform interface constraint.&lt;&#x2F;p&gt;
&lt;p&gt;Despite these difficulties, the term REST stuck: REST was the opposite of SOAP, JSON APIs weren‚Äôt SOAP, therefore
JSON APIs were REST.&lt;&#x2F;p&gt;
&lt;p&gt;That‚Äôs the one sentence version of how we got here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-rest-wars&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-rest-wars&quot; aria-label=&quot;Anchor link for: the-rest-wars&quot;&gt;üîó&lt;&#x2F;a&gt;The REST Wars&lt;&#x2F;h3&gt;
&lt;p&gt;Despite the JSON API world never consistently achieving truly RESTful APIs, there were plenty of fights over whether
or not the RESTless APIs being created were ‚ÄúRESTful‚Äù: arguments over URL layouts, over which HTTP verb was
appropriate for a given action, flame wars about media types, and so forth.&lt;&#x2F;p&gt;
&lt;p&gt;I was young at the time, and the whole thing struck me as opaque, puritanical and alienating, so I pretty much gave up
on the whole idea of REST: it was something condescending people fought about on the internet.&lt;&#x2F;p&gt;
&lt;p&gt;What I rarely saw mentioned (or, when I did, what I didn‚Äôt understand) was the concept of the uniform interface and how
crucial it is to a RESTful system.&lt;&#x2F;p&gt;
&lt;p&gt;It wasn‚Äôt until I created &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&quot;&gt;intercooler.js&lt;&#x2F;a&gt; and a few smart folks started telling me that it was
RESTful that I got interested in the idea again.&lt;&#x2F;p&gt;
&lt;p&gt;RESTful?  That‚Äôs a JSON API thing, how could my hack of a front-end library be RESTful?&lt;&#x2F;p&gt;
&lt;p&gt;So I looked into it, reread Fielding‚Äôs dissertation with fresh eyes, and discovered, lo and behold, not only was
intercooler RESTful, but all the ‚ÄúRESTful‚Äù JSON APIs I was dealing with weren‚Äôt RESTful at all!&lt;&#x2F;p&gt;
&lt;p&gt;And, with that, I began boring the internet to tears:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;01&#x2F;18&#x2F;rescuing-rest.html&quot;&gt;Rescuing REST From the API Winter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;02&#x2F;17&#x2F;api-churn-vs-security.html&quot;&gt;The API Churn&#x2F;Security Trade-off&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;05&#x2F;08&#x2F;hatoeas-is-for-humans.html&quot;&gt;HATEOAS is for Humans&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2020&#x2F;01&#x2F;14&#x2F;taking-html-seriously&quot;&gt;Taking HTML Seriously&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-apis-vs-data-apis&#x2F;&quot;&gt;Hypermedia APIs vs. Data APIs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;HATEOAS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia Driven Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;This, gentle reader, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;how-did-rest-come-to-mean-the-opposite-of-rest&#x2F;&quot;&gt;your current article&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-state-of-rest-today&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-state-of-rest-today&quot; aria-label=&quot;Anchor link for: the-state-of-rest-today&quot;&gt;üîó&lt;&#x2F;a&gt;The State of REST Today&lt;&#x2F;h3&gt;
&lt;p&gt;Eventually most people got tired of trying to add hypermedia controls to JSON APIs and gave up on it.  While these controls
worked well in certain specialized situations (e.g. paging), they never achieved the broad, obvious utility
that REST found in the general, human-oriented internet.  &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;05&#x2F;08&#x2F;hatoeas-is-for-humans.html&quot;&gt;(I have a theory why that is.)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Things settled into this intermediate RESTless state, with REST slowly cementing its meaning as a JSON API at Level 1
or 2 of the RMM.  But there was always the possibility that we would break through to Level 3 and the glory of REST.&lt;&#x2F;p&gt;
&lt;p&gt;Then Single Page Applications (SPAs) hit.&lt;&#x2F;p&gt;
&lt;p&gt;When SPAs hit, web development became disconnected entirely from the original underlying RESTful architecture.  The &lt;em&gt;entire
networking architecture&lt;&#x2F;em&gt; of SPA applications moved over to the JSON RPC style.  Additionally, due to the complexity of these
applications, developers specialized into front end and back end.&lt;&#x2F;p&gt;
&lt;p&gt;The front end developers were obviously &lt;em&gt;not&lt;&#x2F;em&gt; doing anything RESTful: they were working with JavaScript, building DOM
object, and calling AJAX APIs when needed.  This was much more like thick-client authoring than anything like the
early web.&lt;&#x2F;p&gt;
&lt;p&gt;The back end engineers were still concerned with the network architecture to an extent, and they continued to use the
term ‚ÄúREST‚Äù to describe what they were doing.&lt;&#x2F;p&gt;
&lt;p&gt;Even though they were doing things like publishing swagger documentation for their RESTful APIs or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;articles&#x2F;no-more-mvc-frameworks&#x2F;&quot;&gt;complaining about API
churn of their RESTful APIs&lt;&#x2F;a&gt;, things that wouldn‚Äôt be occurring
if they were actually creating RESTful APIs.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, in the late 2010s, people had had enough:  REST, even in its RESTless form, simply wasn‚Äôt keep up with the needs
of increasingly complex SPA applications.  The applications were becoming more and more like thick clients, and thick
client problems need thick client solutions, not bastardized hypermedia client solutions.&lt;&#x2F;p&gt;
&lt;p&gt;The dam really broke when &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GraphQL&quot;&gt;GraphQL&lt;&#x2F;a&gt; was released.&lt;&#x2F;p&gt;
&lt;p&gt;GraphQL couldn‚Äôt be less RESTful: you absolutely &lt;em&gt;have to have&lt;&#x2F;em&gt; documentation to understand how to work with an API
that uses GraphQL.  The client and the server are extremely tightly coupled.  There are no native hypermedia controls
in it.  It offers schemas and, in many ways, feels a lot like an updated and stripped-down version of XML-RPC.&lt;&#x2F;p&gt;
&lt;p&gt;And here I want to say: that‚Äôs OK!&lt;&#x2F;p&gt;
&lt;p&gt;People really, really like GraphQL in many cases and, if you are building a thick client style application, that makes a
lot of sense:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The short answer to this question is that HATEOAS isn‚Äôt a good fit for most modern use cases for APIs. That is why after
almost 20 years, HATEOAS still hasn‚Äôt gained wide adoption among developers. GraphQL on the other hand is spreading
like wildfire because it solves real-world problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;techblog.commercetools.com&#x2F;graphql-and-rest-level-3-hateoas-70904ff1f9cf&quot;&gt;GraphQL and REST Level 3 (HATEOAS)&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So GraphQL isn‚Äôt REST, it doesn‚Äôt claim to be REST, it doesn‚Äôt want to be REST.&lt;&#x2F;p&gt;
&lt;p&gt;But, as of today, the vast majority of developers and companies, even as they excitedly add GraphQL functionality to
their APIs, continue to use the term REST to describe what they are building.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ok-what-can-we-do-about-this-situation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok-what-can-we-do-about-this-situation&quot; aria-label=&quot;Anchor link for: ok-what-can-we-do-about-this-situation&quot;&gt;üîó&lt;&#x2F;a&gt;OK, What Can We Do About This Situation?&lt;&#x2F;h2&gt;
&lt;p&gt;Unfortunately, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=32073545&quot;&gt;voidfunc&lt;&#x2F;a&gt; is probably right:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can tap the sign as much as you want, that battle was lost a long time ago. REST is just the common term people
use for HTTP+JSON RPC.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We are going to keep calling &lt;em&gt;obviously&lt;&#x2F;em&gt; non-RESTful JSON APIs REST because that‚Äôs just what everyone calls them now.&lt;&#x2F;p&gt;
&lt;p&gt;Despite my increasingly vigorous sign tapping, 50 years from now Global Omni Corp. will still be advertising
jobs for working on v138 of their RESTful JSON API‚Äôs swagger documentation.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;punished-fielding.png&quot; alt=&quot;Roy Fielding Does Not Approve&quot; style=&quot;width: 80%;margin-left:10%; margin-top: 16px;margin-bottom: 16px&quot;&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wwnorton.com&#x2F;books&#x2F;9780393310214&quot;&gt;The situation is hopeless, but not serious.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Regardless, there is an opportunity here to explain REST and, in particular, the uniform interface to a new generation of web
developers who may have never heard of those concepts in their original context, and who assume REST === JSON APIs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-response-to-rich-harris&#x2F;&quot;&gt;People sense something is wrong&lt;&#x2F;a&gt;, and maybe REST, real, actual REST,
not RESTless, could be a part of &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;spa-alternative&#x2F;&quot;&gt;the answer to that&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At the very least, the ideas behind REST are interesting and worth knowing just as general software engineering knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;There is a larger meta-point here too: even a relatively smart group of people (early web developers), with the benefit
of the internet, and with a pretty clear (if at times academic) specification for the term REST, were unable to keep the
meaning consistent with its original meaning over period of two decades.&lt;&#x2F;p&gt;
&lt;p&gt;If we can get this so obviously wrong, what else could we be wrong about?&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.8.0 has been released!</title>
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2022-07-12-htmx-1-8-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2022-07-12-htmx-1-8-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-8-0-release&quot;&gt;htmx 1.8.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.8.0&#x2F;&quot;&gt;1.8.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;&#x2F;strong&gt;  This was a big release with some changes to very touchy code that is hard to test (e.g. history support) so
please test thoroughly and let us know if there are any issues.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-replace-url&#x2F;&quot;&gt;&lt;code&gt;hx-replace-url&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute was introduced, allowing you to replace
the current URL in history (to complement &lt;code&gt;hx-push-url&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;m&lt;&#x2F;code&gt; is now a valid timing modifier (e.g. &lt;code&gt;hx-trigger=&amp;quot;every 2m&amp;quot;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;next&lt;&#x2F;code&gt; and &lt;code&gt;previous&lt;&#x2F;code&gt; are now valid extended query selector modifiers, e.g. &lt;code&gt;hx-target=&amp;quot;next div&amp;quot;&lt;&#x2F;code&gt; will target the
next div from the current element&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;HX-Location&lt;&#x2F;code&gt; response header now implements client-side redirects entirely within htmx&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;HX-Reswap&lt;&#x2F;code&gt; response header allows you to change the swap behavior of htmx&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-select-oob&#x2F;&quot;&gt;&lt;code&gt;hx-select-oob&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute selects one or more elements from a server response to swap in via an out of band swap&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-replace-url&#x2F;&quot;&gt;&lt;code&gt;hx-replace-url&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute can be used to replace the current URL in the location
bar (very similar to &lt;code&gt;hx-push-url&lt;&#x2F;code&gt; but no new history entry is created).  The corresponding &lt;code&gt;HX-Replace-Url&lt;&#x2F;code&gt; response header can be used as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Boosted forms now will automatically push URLs into history as with links.  The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;caniuse.com&#x2F;mdn-api_xmlhttprequest_responseurl&quot;&gt;response URL&lt;&#x2F;a&gt;
detection API support is good enough that we feel comfortable making this the default now.
&lt;ul&gt;
&lt;li&gt;If you do not want this behavior you can add &lt;code&gt;hx-push-url=&#x27;false&#x27;&lt;&#x2F;code&gt; to your boosted forms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;If htmx is included in a page more than once, we do not process elements multiple times&lt;&#x2F;li&gt;
&lt;li&gt;When localStorage is not available we do not attempt to save history in it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-boost&lt;&#x2F;code&gt; will boost anchor tags with a &lt;code&gt;_self&lt;&#x2F;code&gt; target&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;load&lt;&#x2F;code&gt; event now properly supports event filters&lt;&#x2F;li&gt;
&lt;li&gt;The websocket extension has had many improvements: (A huge thank you to Denis Palashevskii, our newest committer on the project!)
&lt;ul&gt;
&lt;li&gt;Implement proper &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; support&lt;&#x2F;li&gt;
&lt;li&gt;Expose trigger handling API to extensions&lt;&#x2F;li&gt;
&lt;li&gt;Implement safe message sending with sending queue&lt;&#x2F;li&gt;
&lt;li&gt;Fix &lt;code&gt;ws-send&lt;&#x2F;code&gt; attributes connecting in new elements&lt;&#x2F;li&gt;
&lt;li&gt;Fix OOB swapping of multiple elements in response&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;htmx now properly handles anchors in both boosted links, as well as in &lt;code&gt;hx-get&lt;&#x2F;code&gt;, etc. attributes&lt;&#x2F;li&gt;
&lt;li&gt;Many, many documentation updates (thank you to all the contributors!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>10 Tips For Building SSR&#x2F;HDA applications</title>
        <published>2022-06-13T00:00:00+00:00</published>
        <updated>2023-06-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/10-tips-for-ssr-hda-apps/" type="text/html"/>
        <id>https://htmx.org/essays/10-tips-for-ssr-hda-apps/</id>
        <content type="html">&lt;p&gt;Building web applications using traditional Server-Side Rendering (SSR) or, saying the same thing another way, building 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia-Driven Applications&lt;&#x2F;a&gt; (HDAs) requires a mindset shift when
compared with building web applications with Single Page Application frameworks like React.&lt;&#x2F;p&gt;
&lt;p&gt;If you come at this style of development with an SPA-engineering hat on, you are likely to be frustrated and miss out
on many advantages of this particular architectural choice.&lt;&#x2F;p&gt;
&lt;p&gt;Here are 10 tip to help you make the mental shift smoothly, taking advantage of the strengths of this approach and
minimizing the weaknesses of it:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-1-maximize-your-server-side-strengths&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-1-maximize-your-server-side-strengths&quot; aria-label=&quot;Anchor link for: tip-1-maximize-your-server-side-strengths&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 1: Maximize Your Server-Side Strengths&lt;&#x2F;h3&gt;
&lt;p&gt;A big advantage of the hypermedia-driven approach is that it makes the server-side environment far more important when
building your web application.  Rather than simply producing JSON, your back end is an integral component in the user
experience of your web application.&lt;&#x2F;p&gt;
&lt;p&gt;Because of this, it makes sense to look deeply into the functionality available there.  Many older web frameworks have
incredibly deep functionality available around producing HTML.  Features like 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;guides.rubyonrails.org&#x2F;caching_with_rails.html&quot;&gt;server-side caching&lt;&#x2F;a&gt; can make the difference between an incredibly 
snappy web application and a sluggish user experience.&lt;&#x2F;p&gt;
&lt;p&gt;Take time to learn all the tools available to you.&lt;&#x2F;p&gt;
&lt;p&gt;A good rule of thumb is to shoot to have responses in your application take less than 100ms to complete, and mature
server side frameworks have tools to help make this happen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-2-factor-your-application-on-the-server&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-2-factor-your-application-on-the-server&quot; aria-label=&quot;Anchor link for: tip-2-factor-your-application-on-the-server&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 2: Factor Your Application On The Server&lt;&#x2F;h3&gt;
&lt;p&gt;Server-side environments often have extremely mature mechanisms for factoring (or organizing) your code properly.  The
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Model%E2%80%93view%E2%80%93controller&quot;&gt;Model&#x2F;View&#x2F;Controller&lt;&#x2F;a&gt; pattern is well-developed in
most environments, and tools like modules, packages, etc. provide an excellent way to organize your code.&lt;&#x2F;p&gt;
&lt;p&gt;Whereas SPAs user interfaces are typically organized via &lt;em&gt;components&lt;&#x2F;em&gt;, hypermedia-driven applications are typically 
organized via &lt;em&gt;template inclusion&lt;&#x2F;em&gt;, where the server-side templates are broken up according to the HTML-rendering needs 
of the application, and then included in one another as needed.  This tends to lead to fewer, chunkier files than you 
would find in a component-based application.&lt;&#x2F;p&gt;
&lt;p&gt;Another technology to look for are &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;template-fragments&#x2F;&quot;&gt;Template Fragments&lt;&#x2F;a&gt;, which allow you to render only
part of a template file.  This can reduce even further the number of template files required for your server-side 
application.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-3-specialize-your-api-end-points&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-3-specialize-your-api-end-points&quot; aria-label=&quot;Anchor link for: tip-3-specialize-your-api-end-points&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 3: Specialize Your API End Points&lt;&#x2F;h3&gt;
&lt;p&gt;Unlike a &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-apis-vs-data-apis&#x2F;&quot;&gt;JSON API&lt;&#x2F;a&gt;, the hypermedia API you produce for your hypermedia-driven
application &lt;em&gt;should&lt;&#x2F;em&gt; feature end-points specialized for your particular application‚Äôs UI needs.&lt;&#x2F;p&gt;
&lt;p&gt;Because hypermedia APIs are &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-clients&#x2F;&quot;&gt;not designed to be consumed by general-purpose clients&lt;&#x2F;a&gt; you 
can set aside the pressure to keep them generalized and produce the content specifically needed for your application.&lt;br &#x2F;&gt;
Your end-points should be optimized to support your particular applications UI&#x2F;UX needs, not for a general-purpose 
data-access model for your domain model.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-4-aggressively-refactor-your-api-end-points&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-4-aggressively-refactor-your-api-end-points&quot; aria-label=&quot;Anchor link for: tip-4-aggressively-refactor-your-api-end-points&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 4: Aggressively Refactor Your API End Points&lt;&#x2F;h3&gt;
&lt;p&gt;A related tip is that, when you have a hypermedia-based API, you can aggressively refactor your API in a way that is
heavily discouraged when writing JSON API-based SPAs.  Because hypermedia-based applications use &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;Hypermedia As The Engine 
Of Application State&lt;&#x2F;a&gt;, you are able and, in fact, encouraged, to change the shape of them as your
application developers and as use cases change.&lt;&#x2F;p&gt;
&lt;p&gt;A great strength of the hypermedia approach is that you can completely rework your API to adapt to new needs over time
without needing to version the API or even document it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-5-take-advantage-of-direct-access-to-the-data-store&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-5-take-advantage-of-direct-access-to-the-data-store&quot; aria-label=&quot;Anchor link for: tip-5-take-advantage-of-direct-access-to-the-data-store&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 5: Take Advantage of Direct Access To The Data Store&lt;&#x2F;h3&gt;
&lt;p&gt;When an application is built using the SPA approach, the data store typically lives behind a JSON API.  This level of
indirection often prevents front end developers from being able to take full advantage of the tools available in the
data store.  GraphQL can help address this issue, but comes with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;02&#x2F;17&#x2F;api-churn-vs-security.html&quot;&gt;security-related issues&lt;&#x2F;a&gt; 
that do not appear to be well understood by many developers.&lt;&#x2F;p&gt;
&lt;p&gt;When you produce your HTML on the server side, on the other hand, the developer creating that HTML can have full access
to the data store and take advantage of, for example, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.sqltutorial.org&#x2F;sql-left-join&#x2F;&quot;&gt;joins&lt;&#x2F;a&gt; and 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.sqltutorial.org&#x2F;sql-aggregate-functions&#x2F;&quot;&gt;aggregation functions&lt;&#x2F;a&gt; in SQL stores.&lt;&#x2F;p&gt;
&lt;p&gt;This puts far more expressive power directly in the hands of the developer producing the HTML.  Because your hypermedia
API can be structured around your UI needs, you can tune each endpoint to issue as few data store requests as possible.&lt;&#x2F;p&gt;
&lt;p&gt;A good rule of thumb is that every request should shoot to have three or fewer data-store accesses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-6-avoid-modals&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-6-avoid-modals&quot; aria-label=&quot;Anchor link for: tip-6-avoid-modals&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 6: Avoid Modals&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Modal_window&quot;&gt;Modal windows&lt;&#x2F;a&gt; have become popular, almost standard, in many web applications
today.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youdontneedamodalwindow.dev&#x2F;&quot;&gt;modal windows do not play well with much of the infrastructure of the web&lt;&#x2F;a&gt;
and introduce client-side state that can be difficult (though not impossible) to integrate cleanly with the hypermedia-based
approach.&lt;&#x2F;p&gt;
&lt;p&gt;Consider using alternatives such as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;click-to-edit&#x2F;&quot;&gt;inline editing&lt;&#x2F;a&gt;, rather than modals.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-7-accept-good-enough-ux&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-7-accept-good-enough-ux&quot; aria-label=&quot;Anchor link for: tip-7-accept-good-enough-ux&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 7: Accept ‚ÄúGood Enough‚Äù UX&lt;&#x2F;h3&gt;
&lt;p&gt;A problem many SPA developers face when coming to the HDA approach is that they look at their current SPA application and
imagine implementing it &lt;em&gt;exactly&lt;&#x2F;em&gt; using hypermedia.  While htmx and other hypermedia-oriented libraries significantly 
close the interactivity gap between hypermedia-based applications and SPAs, that gap still exists.&lt;&#x2F;p&gt;
&lt;p&gt;As Roy Fielding &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;said&lt;&#x2F;a&gt; with respect
to the web‚Äôs REST-ful network architecture:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The trade-off, though, is that a uniform interface degrades efficiency, since information is transferred in a
standardized form rather than one which is specific to an application‚Äôs needs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Accepting a slightly less efficient and interactive solution to a particular UX can save you a tremendous amount of
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;complexity-budget&#x2F;&quot;&gt;complexity&lt;&#x2F;a&gt; when building a web application.&lt;&#x2F;p&gt;
&lt;p&gt;Do not let the perfect be the enemy of the good.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-8-when-necessary-create-islands-of-interactivity&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-8-when-necessary-create-islands-of-interactivity&quot; aria-label=&quot;Anchor link for: tip-8-when-necessary-create-islands-of-interactivity&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 8: When Necessary, Create ‚ÄúIslands of Interactivity‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;At some point in your web application, there may come a point where the hypermedia approach, on its own, just doesn‚Äôt
cut it.&lt;&#x2F;p&gt;
&lt;p&gt;A good example of this is re-ordering a list of things.  This can be done in ‚Äúpure‚Äù hypermedia by clicking up and down
arrows or having order # drop-downs next to items.  (I am ashamed to admit I have built both of these!)&lt;&#x2F;p&gt;
&lt;p&gt;But this experience stinks compared to what people are used to: drag-and-drop.&lt;&#x2F;p&gt;
&lt;p&gt;In cases like this, it is perfectly fine to use a front-end heavy approach as an ‚ÄúIsland of Interactivity‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;Consider the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;sortable&#x2F;&quot;&gt;SortableJS&lt;&#x2F;a&gt; example.  Here you have a sophisticated area of interactivity that allows for
drag-and-drop, and that integrates with htmx and the broader hypermedia-driven application via events.&lt;&#x2F;p&gt;
&lt;p&gt;This is an excellent way to encapsulate richer UX within an HDA.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-9-don-t-be-afraid-to-script&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-9-don-t-be-afraid-to-script&quot; aria-label=&quot;Anchor link for: tip-9-don-t-be-afraid-to-script&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 9: Don‚Äôt Be Afraid To Script!&lt;&#x2F;h3&gt;
&lt;p&gt;Scripting is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_7&quot;&gt;explicitly a part of the web architecture&lt;&#x2F;a&gt;
and developers adopting the hypermedia approach shouldn‚Äôt be afraid to use it.  Of course there is scripting and then
there is scripting.&lt;&#x2F;p&gt;
&lt;p&gt;As much as possible, you should try to use the  &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-friendly-scripting&#x2F;&quot;&gt;hypermedia-friendly scripting&lt;&#x2F;a&gt;
approach, retaining hypermedia-exchanges as the primary mechanism for communicating system state changes with the
server.&lt;&#x2F;p&gt;
&lt;p&gt;Inline-style scripting, as enabled by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&quot;&gt;alpine.js&lt;&#x2F;a&gt; &amp;amp; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt; for example,
is worth exploring as well, as it refocuses your scripting on the hypermedia (HTML) itself and imposes an aesthetic 
constraint on just how much code you can write.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tip-10-be-pragmatic&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tip-10-be-pragmatic&quot; aria-label=&quot;Anchor link for: tip-10-be-pragmatic&quot;&gt;üîó&lt;&#x2F;a&gt;Tip 10: Be Pragmatic&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, do not be dogmatic about using hypermedia.  At the end of the day, it is just another technology with its own
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;when-to-use-hypermedia&#x2F;&quot;&gt;strengths &amp;amp; weaknesses&lt;&#x2F;a&gt;.  If a particular part of an app, or if an entire app,
demands something more interactive than what hypermedia can deliver, then go with a technology that can.&lt;&#x2F;p&gt;
&lt;p&gt;Just be familiar with &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;&quot;&gt;what hypermedia can do&lt;&#x2F;a&gt;, so you can make that decision as an informed 
developer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Hopefully these tips help you adopt hypermedia and server-side rendering as a tool more effectively and smoothly.  It
isn‚Äôt a perfect client-server architecture, and it involves explicit tradeoffs, but it can be extremely effective for
many web applications (far more than most web developers today suspect) and provides a much simpler overall development
experience in those cases.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Two Approaches To Decoupling</title>
        <published>2022-05-01T00:00:00+00:00</published>
        <updated>2022-05-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/two-approaches-to-decoupling/" type="text/html"/>
        <id>https://htmx.org/essays/two-approaches-to-decoupling/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on 
a uniform interface between components. By applying the software engineering principle of generality to the component 
interface, the overall system architecture is simplified and the visibility of interactions is improved. 
Implementations are decoupled from the services they provide, which encourages independent evolvability.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;-Roy Fielding, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this essay we will look at two different types of decoupling in the context of web applications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Decoupling at the &lt;em&gt;application level&lt;&#x2F;em&gt; via a generic JSON Data API&lt;&#x2F;li&gt;
&lt;li&gt;Decoupling at the &lt;em&gt;network architecture level&lt;&#x2F;em&gt; via a hypermedia API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will see that, at the application level, a hypermedia API tightly couples your front-end and back-end.  Despite this
fact, surprisingly, the hypermedia API is in fact more resilient in the face of change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coupling&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#coupling&quot; aria-label=&quot;Anchor link for: coupling&quot;&gt;üîó&lt;&#x2F;a&gt;Coupling&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Coupling_%28computer_programming%29&quot;&gt;Coupling&lt;&#x2F;a&gt; is a property of a software system in which
two modules or aspects of the system have a high degree of interdependence. &lt;em&gt;Decoupling&lt;&#x2F;em&gt; software is the act of reducing this 
interdependence between unrelated modules so that they can evolve independently of one another.&lt;&#x2F;p&gt;
&lt;p&gt;The concept of coupling and decoupling is closely (and inversely) related to 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cohesion_(computer_science)&quot;&gt;cohesion&lt;&#x2F;a&gt;.  Highly cohesive software has related logic 
within a module or conceptual boundary, rather than spread out throughout a codebase.  (A related concept is our own idea
of &lt;a href=&quot;&#x2F;essays&#x2F;locality-of-behaviour&#x2F;&quot;&gt;Locality of Behavior&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Broadly, experienced developers strive for decoupled and cohesive systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;json-data-apis-application-level-decoupling&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#json-data-apis-application-level-decoupling&quot; aria-label=&quot;Anchor link for: json-data-apis-application-level-decoupling&quot;&gt;üîó&lt;&#x2F;a&gt;JSON Data APIs - Application Level Decoupling&lt;&#x2F;h2&gt;
&lt;p&gt;A common approach to building web applications today is to create a JSON Data API and then consume that JSON API using
a JavaScript framework such as React.  This application-level architectural decision decouples the front-end code
from the back-end code, and allows the re-use of the JSON API in other contexts, such as a mobile applications, 3rd 
party client integrations, etc.&lt;&#x2F;p&gt;
&lt;p&gt;This is an &lt;em&gt;application-level&lt;&#x2F;em&gt; decoupling because the decision and implementation of the decoupling is done by the
application developer themselves.  The JSON API provides a ‚Äúhard‚Äù interface between the two pieces of software.&lt;&#x2F;p&gt;
&lt;p&gt;Using my favorite example, consider a simple JSON for a bank that has a &lt;code&gt;GET&lt;&#x2F;code&gt; end point at &lt;code&gt;https:&#x2F;&#x2F;example.com&#x2F;account&#x2F;12345&lt;&#x2F;code&gt;.
This API might return the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;HTTP&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.1 200&lt;&#x2F;span&gt;&lt;span&gt; OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;-50.00
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;overdrawn&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This Data API can be consumed by any client: a web application, a mobile client, a third party, etc.  It is, therefore
decoupled from any particular client.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decoupling-via-a-json-api-in-practice&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#decoupling-via-a-json-api-in-practice&quot; aria-label=&quot;Anchor link for: decoupling-via-a-json-api-in-practice&quot;&gt;üîó&lt;&#x2F;a&gt;Decoupling Via A JSON API In Practice&lt;&#x2F;h3&gt;
&lt;p&gt;So far, so good.  But how does this decoupling work out in practice?&lt;&#x2F;p&gt;
&lt;p&gt;In our essay &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;splitting-your-apis&#x2F;&quot;&gt;Splitting Your Data &amp;amp; Application APIs: Going Further&lt;&#x2F;a&gt; you
will find the following quote:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The worst part of my job these days is designing APIs for front-end developers. The conversation goes inevitably as:&lt;&#x2F;p&gt;
&lt;p&gt;Dev ‚Äì So, this screen has data element x,y,z‚Ä¶ could you please create an API with the response format {x: , y:, z: }&lt;&#x2F;p&gt;
&lt;p&gt;Me ‚Äì Ok&lt;&#x2F;p&gt;
&lt;p&gt;Jean-Jacques Dubray - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;articles&#x2F;no-more-mvc-frameworks&quot;&gt;https:&#x2F;&#x2F;www.infoq.com&#x2F;articles&#x2F;no-more-mvc-frameworks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This quote shows that, although we have driven coupling out with a pitchfork (or, in our case, with a JSON API) it has come 
back through requests for web application-specific JSON API end points.  These sorts of requests end up recoupling the
front-end and back-end code: the JSON API is no longer providing a generic JSON Data API, but rather a specific API for 
the front-end needs.&lt;&#x2F;p&gt;
&lt;p&gt;Worse, these front-end needs will often change frequently as your application evolves, necessitating the modification
of your JSON API.  What if other non-web application clients have come to depend on the original API?&lt;&#x2F;p&gt;
&lt;p&gt;This problem leads to the ‚Äúversioning hell‚Äù that many JSON Data API developers face when supporting both web applications as well
as other non-web application clients.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a-solution-graphql&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-solution-graphql&quot; aria-label=&quot;Anchor link for: a-solution-graphql&quot;&gt;üîó&lt;&#x2F;a&gt;A Solution: GraphQL&lt;&#x2F;h4&gt;
&lt;p&gt;One potential solution to this problem is to introduce &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graphql.org&#x2F;&quot;&gt;GraphQL&lt;&#x2F;a&gt;, which allows you to have a much
more expressive JSON API.  This means that you don‚Äôt need to change it as often when your API client‚Äôs needs change.&lt;&#x2F;p&gt;
&lt;p&gt;This is a reasonable approach for addressing the problem outlined above, but there are problems with it.  The biggest 
issue that we see is security, as we outline this in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;02&#x2F;17&#x2F;api-churn-vs-security.html&quot;&gt;The API Churn&#x2F;Security Trade-off&lt;&#x2F;a&gt; essay.&lt;&#x2F;p&gt;
&lt;p&gt;Apparently facebook uses a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;AdamChainz&#x2F;status&#x2F;1392162996844212232&quot;&gt;whitelist&lt;&#x2F;a&gt; to deal with the security
issues introduced by GraphQL, but many developers who are using GraphQL appear to not understand the security threats 
involved with it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;another-solution-splitting-your-application-general-data-apis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#another-solution-splitting-your-application-general-data-apis&quot; aria-label=&quot;Anchor link for: another-solution-splitting-your-application-general-data-apis&quot;&gt;üîó&lt;&#x2F;a&gt;Another Solution: Splitting Your Application &amp;amp; General Data APIs&lt;&#x2F;h4&gt;
&lt;p&gt;Another approach recommended by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;max.engineer&#x2F;&quot;&gt;Max Chernyak&lt;&#x2F;a&gt; in his article
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;max.engineer&#x2F;server-informed-ui&quot;&gt;Don‚Äôt Build A General Purpose API To Power Your Own Front End&lt;&#x2F;a&gt;, is to build
&lt;em&gt;two&lt;&#x2F;em&gt; JSON APIs: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An application specific JSON API that can be modified as needed&lt;&#x2F;li&gt;
&lt;li&gt;A general purpose JSON API that can be consumed by other clients such as mobile, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a pragmatic solution to address what appears to be the &lt;em&gt;inherent&lt;&#x2F;em&gt; coupling between your web application‚Äôs front-end
and the back-end code supporting it, and it doesn‚Äôt involve the security tradeoffs involved in a general GraphQL API.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hypermedia-network-architecture-decoupling&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hypermedia-network-architecture-decoupling&quot; aria-label=&quot;Anchor link for: hypermedia-network-architecture-decoupling&quot;&gt;üîó&lt;&#x2F;a&gt;Hypermedia - Network Architecture Decoupling&lt;&#x2F;h2&gt;
&lt;p&gt;Now let us consider how a &lt;em&gt;hypermedia API&lt;&#x2F;em&gt; decouples software.&lt;&#x2F;p&gt;
&lt;p&gt;Consider a potential response to the same &lt;code&gt;GET&lt;&#x2F;code&gt; for &lt;code&gt;https:&#x2F;&#x2F;example.com&#x2F;account&#x2F;12345&lt;&#x2F;code&gt; that we saw above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Account number: 12345&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Balance: $100.00 USD&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Links:
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;deposits&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;withdrawals&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;transfers&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;close-requests&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;close-requests&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Yes, this is an API response.  It just happens to be a hypermedia-formatted response, in this case HTML.)&lt;&#x2F;p&gt;
&lt;p&gt;Here we see that, at the application level, this response could not be more tightly coupled to the ‚Äúfront-end‚Äù.  In fact,
it &lt;em&gt;is&lt;&#x2F;em&gt; the front-end, in the sense that the API response specifies not only the data for the resource, but also provides
layout information on how, exactly, to display this data to the user.&lt;&#x2F;p&gt;
&lt;p&gt;The response also contains &lt;em&gt;hypermedia controls&lt;&#x2F;em&gt;, in this case, links, that an end user can select from to continue
navigating the hypermedia API that this &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-driven-applications&#x2F;&quot;&gt;Hypermedia-Driven Application&lt;&#x2F;a&gt; provides.&lt;&#x2F;p&gt;
&lt;p&gt;So, where is the decoupling in this case?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rest-the-uniform-interface&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rest-the-uniform-interface&quot; aria-label=&quot;Anchor link for: rest-the-uniform-interface&quot;&gt;üîó&lt;&#x2F;a&gt;REST &amp;amp; The Uniform Interface&lt;&#x2F;h3&gt;
&lt;p&gt;The decoupling in this case is occurring at a &lt;em&gt;lower level&lt;&#x2F;em&gt;.  It is happening at the &lt;em&gt;network architecture&lt;&#x2F;em&gt; level, which
is to say, at the system level.  &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypermedia.systems&quot;&gt;Hypermedia systems&lt;&#x2F;a&gt; are designed to decouple the hypermedia
client (in the case of the web, the browser) from the hypermedia server.&lt;&#x2F;p&gt;
&lt;p&gt;This is accomplished primarily via the Uniform Interface constraint of REST and, in particular, by using 
Hypermedia As The Engine of Application State (&lt;a href=&quot;&#x2F;essays&#x2F;hateoas&quot;&gt;HATOEAS&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;This style of decoupling allows tighter coupling at the higher application level (which we have seen may be an 
&lt;em&gt;inherent&lt;&#x2F;em&gt; coupling) while still retaining the benefits of decoupling for the overall system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decoupling-via-hypermedia-in-practice&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#decoupling-via-hypermedia-in-practice&quot; aria-label=&quot;Anchor link for: decoupling-via-hypermedia-in-practice&quot;&gt;üîó&lt;&#x2F;a&gt;Decoupling Via Hypermedia In Practice&lt;&#x2F;h3&gt;
&lt;p&gt;How does this sort of decoupling work in practice?  Well, let‚Äôs say that we wish to remove the ability to transfer money 
from our bank to other banks as well as the ability to close accounts.&lt;&#x2F;p&gt;
&lt;p&gt;What does our hypermedia response for this &lt;code&gt;GET&lt;&#x2F;code&gt; request now look like?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Account number: 12345&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Balance: $100.00 USD&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Links:
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;deposits&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;withdrawals&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see that in this response, links for those two actions have been removed from the HTML.  The browser simply 
render the new HTML to the user.  To a rounding error, there are no clients sitting around using the &lt;em&gt;old&lt;&#x2F;em&gt; API.  The
API is encoded within and discovered through the hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;This means that we can dramatically change our API without breaking our clients.&lt;&#x2F;p&gt;
&lt;p&gt;This flexibility is the crux of the REST-ful network architecture and, in particular, of &lt;a href=&quot;&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;HATEOAS&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, despite much tighter &lt;em&gt;application-level&lt;&#x2F;em&gt; coupling between our front-end and back-end, we actually have
more flexibility due to the &lt;em&gt;network architecture&lt;&#x2F;em&gt; decoupling afforded to us by the Uniform Interface aspect of 
REST-ful &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypermedia.systems&quot;&gt;hypermedia systems&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;but-that-s-a-terrible-data-api&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-that-s-a-terrible-data-api&quot; aria-label=&quot;Anchor link for: but-that-s-a-terrible-data-api&quot;&gt;üîó&lt;&#x2F;a&gt;But That‚Äôs A Terrible (Data) API!&lt;&#x2F;h3&gt;
&lt;p&gt;Many people would object that, sure, this hypermedia API may be flexible for our web application, but it makes for a 
terrible general purpose API.&lt;&#x2F;p&gt;
&lt;p&gt;This is quite true.  This hypermedia API is tuned for a specific web application.  It would be cumbersome and error-prone
to try to download this HTML, parse it and try to extract information from it.  This hypermedia API only makes sense as part
of a larger hypermedia system, being consumed by a proper hypermedia client.&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly why we recommend creating a general purpose JSON API alongside your hypermedia API in
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;splitting-your-apis&#x2F;&quot;&gt;Splitting Your Data &amp;amp; Application APIs: Going Further&lt;&#x2F;a&gt;.  You can
take advantage of the flexibility of hypermedia for your own web application, while providing a 
general purpose JSON API for mobile applications, third party applications, etc.&lt;&#x2F;p&gt;
&lt;p&gt;(Although, we should mention, a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperview.org&quot;&gt;hypermedia-based mobile application&lt;&#x2F;a&gt; might be a good choice too!)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this essay we looked at two different types of decoupling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Application level decoupling via a JSON Data API&lt;&#x2F;li&gt;
&lt;li&gt;Network-architecture decoupling via REST&#x2F;HATEOAS in a hypermedia system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And we saw that, despite the tighter application-level coupling found in a hypermedia-based application, it is the
hypermedia system that handles changes more gracefully.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.7.0 has been released!</title>
        <published>2022-02-22T00:00:00+00:00</published>
        <updated>2022-02-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2022-02-22-htmx-1-7-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2022-02-22-htmx-1-7-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-7-0-release&quot;&gt;htmx 1.7.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.7.0&#x2F;&quot;&gt;1.7.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-sync&#x2F;&quot;&gt;&lt;code&gt;hx-sync&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute allows you to synchronize multiple element requests on a single
element using various strategies (e.g. replace)
&lt;ul&gt;
&lt;li&gt;You can also now abort an element making a request by sending it the &lt;code&gt;htmx:abort&lt;&#x2F;code&gt; event&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;server-sent-events&#x2F;&quot;&gt;Server Sent Events&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;web-sockets&#x2F;&quot;&gt;Web Sockets&lt;&#x2F;a&gt; are now available as 
extensions, in addition to the normal core support.  In htmx 2.0, the current &lt;code&gt;hx-sse&lt;&#x2F;code&gt; and &lt;code&gt;hx-ws&lt;&#x2F;code&gt; attributes will be
moved entirely out to these new extensions.  By moving these features to extensions we will be able to add functionality 
to both of them without compromising the core file size of htmx.  You are encouraged to move over to the new 
extensions, but &lt;code&gt;hx-sse&lt;&#x2F;code&gt; and &lt;code&gt;hx-ws&lt;&#x2F;code&gt; will continue to work indefinitely in htmx 1.x.&lt;&#x2F;li&gt;
&lt;li&gt;You can now mask out &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#inheritance&quot;&gt;attribute inheritance&lt;&#x2F;a&gt; via the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-disinherit&#x2F;&quot;&gt;&lt;code&gt;hx-disinherit&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;HX-Push&lt;&#x2F;code&gt; header can now have the &lt;code&gt;false&lt;&#x2F;code&gt; value, which will prevent a history snapshot from occurring.&lt;&#x2F;li&gt;
&lt;li&gt;Many new extensions, with a big thanks to all the contributors!
&lt;ul&gt;
&lt;li&gt;A new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;alpine-morph&#x2F;&quot;&gt;&lt;code&gt;alpine-morph&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; extension allows you to use Alpine‚Äôs swapping engine, which preserves Alpine state when you have entire Alpine components swapped by htmx.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;restored&#x2F;&quot;&gt;restored&lt;&#x2F;a&gt; extension was added that will trigger a &lt;code&gt;restore&lt;&#x2F;code&gt; event on all elements in the DOM
on history restoration.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;loading-states&#x2F;&quot;&gt;loading-states&lt;&#x2F;a&gt; extension was added that allows you to easily manage loading states
while a request is in flight, including disabling elements, and adding and removing CSS classes. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;this&lt;&#x2F;code&gt; symbol now resolves properly for the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-include&#x2F;&quot;&gt;&lt;code&gt;hx-include&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-indicator&#x2F;&quot;&gt;&lt;code&gt;hx-indicator&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
attributes&lt;&#x2F;li&gt;
&lt;li&gt;When an object is included via the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-vals&#x2F;&quot;&gt;&lt;code&gt;hx-vals&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute, it will be converted to JSON (rather 
than rendering as the string &lt;code&gt;[Object object]&amp;quot;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;You can now pass a swap style in to the &lt;code&gt;htmx.ajax()&lt;&#x2F;code&gt; function call.&lt;&#x2F;li&gt;
&lt;li&gt;Poll events now contain a &lt;code&gt;target&lt;&#x2F;code&gt; attribute, allowing you to filter a poll on the element that is polling.&lt;&#x2F;li&gt;
&lt;li&gt;Two new Out Of Band-related events were added: &lt;code&gt;htmx:oobBeforeSwap&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;htmx:oobAfterSwap&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Many, many documentation updates (thank you to all the contributors!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hypermedia-Driven Applications</title>
        <published>2022-02-06T00:00:00+00:00</published>
        <updated>2022-10-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/hypermedia-driven-applications/" type="text/html"/>
        <id>https://htmx.org/essays/hypermedia-driven-applications/</id>
        <content type="html">&lt;h2 id=&quot;genesis&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#genesis&quot; aria-label=&quot;Anchor link for: genesis&quot;&gt;üîó&lt;&#x2F;a&gt;Genesis&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;thesis: MPA - multi-page application&lt;&#x2F;p&gt;
&lt;p&gt;antithesis: SPA -  single-page application&lt;&#x2F;p&gt;
&lt;p&gt;synthesis: HDA - hypermedia-driven application&lt;&#x2F;p&gt;
&lt;p&gt;--&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;htmx_org&#x2F;status&#x2F;1490318550170357760&quot;&gt;@htmx_org&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-hypermedia-driven-application-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-hypermedia-driven-application-architecture&quot; aria-label=&quot;Anchor link for: the-hypermedia-driven-application-architecture&quot;&gt;üîó&lt;&#x2F;a&gt;The Hypermedia-Driven Application Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;Hypermedia Driven Application (HDA)&lt;&#x2F;strong&gt; architecture is a new&#x2F;old approach to building web applications.  It combines
the simplicity &amp;amp; flexibility of traditional Multi-Page Applications (MPAs) with the better user experience of 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Single-page_application&quot;&gt;Single-Page Applications&lt;&#x2F;a&gt; (SPAs).&lt;&#x2F;p&gt;
&lt;p&gt;The HDA architecture achieves this goal by extending the existing HTML infrastructure of the web to allow hypermedia
developers to create more powerful hypermedia-driven interactions.&lt;&#x2F;p&gt;
&lt;p&gt;Following the REST notion of architectural &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm&quot;&gt;constraints&lt;&#x2F;a&gt;,
two such constraints characterize the HDA architecture: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An HDA uses &lt;em&gt;declarative, HTML-embedded syntax&lt;&#x2F;em&gt; rather than imperative scripting to achieve better front-end interactivity&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;An HDA interacts with the server &lt;strong&gt;in terms of hypermedia&lt;&#x2F;strong&gt; (i.e. HTML) rather than a non-hypermedia format (e.g. JSON)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By adopting these two constraints, the HDA architecture stays within the original 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Glossary&#x2F;REST&quot;&gt;REST-ful&lt;&#x2F;a&gt; architecture of the web in a way that the SPA architecture
does not.&lt;&#x2F;p&gt;
&lt;p&gt;In particular, HDAs continue to use &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;Hypermedia As The Engine of Application State (HATEOAS)&lt;&#x2F;a&gt;, whereas
most SPAs abandon HATEOAS in favor of a client-side model and data (rather than hypermedia) APIs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-example-hda-fragment&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-example-hda-fragment&quot; aria-label=&quot;Anchor link for: an-example-hda-fragment&quot;&gt;üîó&lt;&#x2F;a&gt;An Example HDA fragment&lt;&#x2F;h2&gt;
&lt;p&gt;Consider the htmx &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;active-search&#x2F;&quot;&gt;Active Search&lt;&#x2F;a&gt; example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  Search Contacts 
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;htmx-indicator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;img&#x2F;bars.svg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt; Searching... 
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;form-control&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;search&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;search&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Begin Typing To Search Users...&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-post&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;search&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-trigger&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;keyup changed delay:500ms, search&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;#search-results&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-indicator&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;.htmx-indicator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;table&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;thead&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;First Name&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Last Name&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Email&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;thead&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;search-results&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a UX pattern that would typically be associated with an SPA: as the user types, after a slight pause, search 
results will populate the result table below.  However, in this case, it is being achieved entirely within HTML,
in a manner consonant with HTML.&lt;&#x2F;p&gt;
&lt;p&gt;This example effectively demonstrates the essential characteristic of an HDA:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The front end of the feature is specified entirely in  declarative htmx attributes, directly in HTML&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The interaction with the server is done via HTTP and HTML: an HTTP &lt;code&gt;POST&lt;&#x2F;code&gt; request is sent to the server, HTML is 
returned by the server and htmx inserts this HTML into the DOM&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;scripting-in-an-hda&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#scripting-in-an-hda&quot; aria-label=&quot;Anchor link for: scripting-in-an-hda&quot;&gt;üîó&lt;&#x2F;a&gt;Scripting In An HDA&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_7&quot;&gt;Code-On-Demand&lt;&#x2F;a&gt; is an optional
constraint of the original REST-ful architecture of the web.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, the HDA architecture has a final, optional constraint:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Code-On-Demand (i.e. scripting) should, as much as is practical, be done &lt;em&gt;directly in&lt;&#x2F;em&gt; the primary hypermedia&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This addresses the concern regarding Code-On-Demand that Roy Fielding mentions in his thesis:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, (Code-On-Demand) also reduces visibility, and thus is only an optional constraint within REST.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By embedding Code-On-Demand (scripts) directly in HTML, visibility is enhanced, satisfying the 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;locality-of-behaviour&#x2F;&quot;&gt;Locality of Behavior&lt;&#x2F;a&gt; software design principle.&lt;&#x2F;p&gt;
&lt;p&gt;Three approaches to scripting that satisfy this third constraint are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt;, 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;alpinejs.dev&quot;&gt;AlpineJS&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;vanilla-js.com&#x2F;&quot;&gt;VanillaJS&lt;&#x2F;a&gt; (when embedded directly on HTML elements).&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of each of these approaches:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- hyperscript --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;on click toggle .red-border&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Toggle Class
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- Alpine JS --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;@click&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;open = !open&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;:class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;{&amp;#39;red-border&amp;#39; : open, &amp;#39;&amp;#39; : !open}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Toggle Class
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- VanillaJS --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.classList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;red-border&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Toggle Class
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In an HDA, hypermedia (HTML) is the primary medium for building the application, which means that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All communication with the server is still managed via HTTP requests with hypermedia (HTML) responses&lt;&#x2F;li&gt;
&lt;li&gt;Scripting is used mainly to enhance the &lt;em&gt;front-end experience&lt;&#x2F;em&gt; of the application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Scripting augments the existing hypermedia (HTML) but does not &lt;em&gt;supersede&lt;&#x2F;em&gt; it or subvert the fundamental REST-ful
architecture of the HDA.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hda-style-libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hda-style-libraries&quot; aria-label=&quot;Anchor link for: hda-style-libraries&quot;&gt;üîó&lt;&#x2F;a&gt;HDA-style libraries&lt;&#x2F;h2&gt;
&lt;p&gt;The following libraries allow developers to create HDAs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&quot;&gt;https:&#x2F;&#x2F;htmx.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpoly.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;unpoly.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;piranha.github.io&#x2F;twinspark-js&#x2F;&quot;&gt;https:&#x2F;&#x2F;piranha.github.io&#x2F;twinspark-js&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hotwire.dev&quot;&gt;https:&#x2F;&#x2F;hotwire.dev&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperview.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;hyperview.org&#x2F;&lt;&#x2F;a&gt; (a mobile hypermedia!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The following scripting libraries, when used appropriately, complement the HDA approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;https:&#x2F;&#x2F;hyperscript.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&quot;&gt;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;vanilla-js.com&#x2F;&quot;&gt;http:&#x2F;&#x2F;vanilla-js.com&#x2F;&lt;&#x2F;a&gt; (embedded directly in HTML)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The HDA architecture is a synthesis of two preceding architectures: the original Multi-Page Application (MPA) architecture
and the (relatively) newer Single-Page Application architecture.&lt;&#x2F;p&gt;
&lt;p&gt;It attempts to capture the advantages of both: the simplicity and reliability of MPAs, with a 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Glossary&#x2F;REST&quot;&gt;REST-ful Architecture&lt;&#x2F;a&gt; that uses 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hateoas&#x2F;&quot;&gt;Hypermedia As The Engine Of Application State&lt;&#x2F;a&gt;, while providing a better user experience, on par
with SPAs in many cases.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>A Response To &amp;quot;Have Single-Page Apps Ruined the Web?&amp;quot;</title>
        <published>2021-12-24T00:00:00+00:00</published>
        <updated>2022-05-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/a-response-to-rich-harris/" type="text/html"/>
        <id>https://htmx.org/essays/a-response-to-rich-harris/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;rich_harris&quot;&gt;Rich Harris&lt;&#x2F;a&gt; is a well-known web developer who works on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;&quot;&gt;Svelte.js&lt;&#x2F;a&gt;, a novel
Single-Page Application (SPA) framework.&lt;&#x2F;p&gt;
&lt;p&gt;In October of 2021 he gave a talk at JamStack entitled &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=860d8usGC0o&quot;&gt;‚ÄúHave Single-Page Apps Ruined the Web?‚Äù&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have been asked for our opinion on the talk, so this essay is our response.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing to say about the talk is that it is very well done: well produced, thoughtful, funny, fair to both sides of the debate
and very reasonable throughout.  We don‚Äôt agree with a lot that Mr. Harris has to say, as we will detail below, but we respect
and appreciate his opinions as well as the technologies he works on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problems-with-spas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#problems-with-spas&quot; aria-label=&quot;Anchor link for: problems-with-spas&quot;&gt;üîó&lt;&#x2F;a&gt;Problems with SPAs&lt;&#x2F;h2&gt;
&lt;p&gt;The talk begins with some reasonable criticisms of SPAs, particularly focusing on usability issues found
with Instagram, a canonical SPA implementation from our friends at Facebook.  He takes a very fair look at
the drawbacks to SPAs, including but not limited to the following list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You will need a bloated JS framework&lt;&#x2F;li&gt;
&lt;li&gt;Performance will suffer&lt;&#x2F;li&gt;
&lt;li&gt;It will be buggy&lt;&#x2F;li&gt;
&lt;li&gt;There will be accessibility issues&lt;&#x2F;li&gt;
&lt;li&gt;The tooling is complicated&lt;&#x2F;li&gt;
&lt;li&gt;It will be less resilient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After considering the usability issues with Instagram, Mr. Harris has this to say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Come on people.  If the best front end engineers in the world can‚Äôt make
text and images work without five megabytes of javascript, then  maybe
we should just give up on the web platform.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here we find ourselves in violent agreement with Mr. Harris, with the caveat that we would substitute ‚Äúthe &lt;em&gt;javascript&lt;&#x2F;em&gt; web platform‚Äù
for just ‚Äúthe web platform‚Äù, since that is what is in play with Instagram.&lt;&#x2F;p&gt;
&lt;p&gt;We would further clarify that SPA applications and frameworks often simply &lt;em&gt;ignore&lt;&#x2F;em&gt; the &lt;em&gt;actual&lt;&#x2F;em&gt; web platform, that is,
the original, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;rest-explained&#x2F;&quot;&gt;REST-ful model&lt;&#x2F;a&gt; of the web, except as a bootstrap mechanism.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problems-with-mpas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#problems-with-mpas&quot; aria-label=&quot;Anchor link for: problems-with-mpas&quot;&gt;üîó&lt;&#x2F;a&gt;Problems with MPAs&lt;&#x2F;h2&gt;
&lt;p&gt;Mr. Harris then moves on to problems with Multi-Page Applications (MPAs) which are the ‚Äútraditional‚Äù,
click-a-link-load-a-page-of-HTML web applications we are all familiar with and that are, to an extent,
being supplanted by SPAs.&lt;&#x2F;p&gt;
&lt;p&gt;Below, we will go through the various problems he outlines, all of which are true of ‚Äústandard‚Äù MPAs,
and we will demonstrate how an MPA using a hypermedia-oriented technology, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt;, can solve each of them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-can-t-keep-a-video-running-on-navigations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-can-t-keep-a-video-running-on-navigations&quot; aria-label=&quot;Anchor link for: you-can-t-keep-a-video-running-on-navigations&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúYou Can‚Äôt Keep A Video Running On Navigations‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;A general problem with standard MPAs is that they issue a full page refresh on
every request.  This means something like a video or audio player will be replaced and, thus, stop playing, when a request is made.&lt;&#x2F;p&gt;
&lt;p&gt;This problem can be addressed in htmx via the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-preserve&#x2F;&quot;&gt;&lt;code&gt;hx-preserve&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute, which tells htmx to
preserve a particular piece of content between requests.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;back-button-infinite-scroll-don-t-work&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-button-infinite-scroll-don-t-work&quot; aria-label=&quot;Anchor link for: back-button-infinite-scroll-don-t-work&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúBack Button &amp;amp; Infinite Scroll Don‚Äôt Work‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;In the presence of infinite scroll behavior (presumably implemented via javascript of some sort) the back button will not work properly with an MPA.  I would note that the presence of infinite scroll calls into question the term MPA, which would traditionally use paging instead of an infinite scroll.&lt;&#x2F;p&gt;
&lt;p&gt;That said, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;infinite-scroll&#x2F;&quot;&gt;infinite scroll&lt;&#x2F;a&gt; can be achieved quite easily using htmx, in a hypermedia-oriented and obvious manner.  When combined with the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-push-url&#x2F;&quot;&gt;&lt;code&gt;hx-push-url&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute, history and the back button works properly with very little effort by the developer, all with nice Copy-and-Pasteable URLs, sometimes referred to as ‚ÄúDeep Links‚Äù by people in the SPA community.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-about-nice-navigation-transitions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-nice-navigation-transitions&quot; aria-label=&quot;Anchor link for: what-about-nice-navigation-transitions&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúWhat about Nice Navigation Transitions?‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;Nice transitions are, well, nice.  We think that designers tend to over-estimate their contribution to application usability, however.  Yes, the demo sizzles, but on the 20th click users often just want the UI to get on with it.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, htmx supports using &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;animations&#x2F;&quot;&gt;standard CSS transitions&lt;&#x2F;a&gt; to make animations possible.  Obviously there is a limit to what you can achieve with these pure CSS techniques, but we believe this can give you the 80 of an 80&#x2F;20 situation.  (Or, perhaps, the 95 of a 95&#x2F;5 situation.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multipage-apps-load-javascript-libraries-every-request&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#multipage-apps-load-javascript-libraries-every-request&quot; aria-label=&quot;Anchor link for: multipage-apps-load-javascript-libraries-every-request&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúMultipage Apps Load Javascript Libraries Every Request‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;Mr. Harris focuses heavily on ‚Äúcrappy Ad Tech‚Äù as a culprit for web usability issues on the web, and who can defend the 2.5MB payload of tracking, spyware and adware that most websites deliver to their users today?  Mr. Harris points out that SPAs ameliorate this issue by loading up this bundle of garbage once, rather than over and over on every request, as an MPA does.&lt;&#x2F;p&gt;
&lt;p&gt;Now, a vanilla MPA would typically have said garbage cached after the first request, so the download cost, at least, is about the same as with SPAs.  But an MPA must &lt;em&gt;execute&lt;&#x2F;em&gt; the bundle of garbage again on each page, which does burn CPU and can lead to poor user experience.&lt;&#x2F;p&gt;
&lt;p&gt;However, an MPA powered by htmx, we note, has exactly the same characteristics as an SPA: the ad garbage would be downloaded and executed once on the first request, and, after that, all requests will be relatively light-weight replacements of DOM elements.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mpas-have-network-latency-issues&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mpas-have-network-latency-issues&quot; aria-label=&quot;Anchor link for: mpas-have-network-latency-issues&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúMPAs Have Network Latency Issues‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;This is a valid point: with an MPA-style application your UI interactions are gated by how fast your server can respond to requests, its latency.  Part of that is network latency, which is hard to overcome without giving up one of the tremendously simplifying aspects of traditional web applications: a centralized data store.  However, networks are fast and are getting faster, and there are well-known techniques for optimizing &lt;em&gt;server&lt;&#x2F;em&gt; latency (i.e. how fast your server returns a response), developed over decades, for monitoring and optimizing this response time.  SQL tuning, Redis caching and so on, all well established and making sub-100ms responses a reasonable goal.  Many htmx users remark just how fast htmx-based applications feel, but we won‚Äôt pretend that latency isn‚Äôt an issue to be considered.&lt;&#x2F;p&gt;
&lt;p&gt;Of course the problem with latency issues is that they can make an app feel laggy.  But, like you, we have worked with plenty of laggy SPAs, so we must say the problem isn‚Äôt neatly solved by simply adopting SPA frameworks.  On top of that, optimistically synchronizing data with a server can lead to extremely difficult to understand data consistency issues as well as a significant increase in overall application complexity, a topic we will return to later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-has-ui-bugs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-has-ui-bugs&quot; aria-label=&quot;Anchor link for: github-has-ui-bugs&quot;&gt;üîó&lt;&#x2F;a&gt;‚ÄúGitHub Has UI Bugs‚Äù&lt;&#x2F;h3&gt;
&lt;p&gt;GitHub does, indeed, have UI bugs.  However, none of them are particularly difficult to solve.&lt;&#x2F;p&gt;
&lt;p&gt;htmx offers multiple ways to &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;update-other-content&#x2F;&quot;&gt;update content beyond the target element&lt;&#x2F;a&gt;, all of them quite easy and any of which would work to solve the UI consistency issues Mr. Harris points out.&lt;&#x2F;p&gt;
&lt;p&gt;Contrast the GitHub UI issues with the Instagram UI issues Mr. Harris pointed out earlier: the Instagram issues would
require far more sophisticated engineering work to resolve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transitional-applications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#transitional-applications&quot; aria-label=&quot;Anchor link for: transitional-applications&quot;&gt;üîó&lt;&#x2F;a&gt;Transitional Applications&lt;&#x2F;h2&gt;
&lt;p&gt;Mr. Harris then discusses the concept of ‚Äútransitional applications‚Äù which are a mix of both SPA and MPA technologies.
This terminology is reasonable, and we will see if the term sticks in the industry.&lt;&#x2F;p&gt;
&lt;p&gt;We often recommend using htmx for the parts of the app where it makes sense to keep things simple, and then using other
technologies when needed: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&quot;&gt;alpine.js&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt;, a small reactive
framework, etc.&lt;&#x2F;p&gt;
&lt;p&gt;So we can agree with Mr. Harris here to an extent and recommend a ‚Äútransitional‚Äù approach to web development, although
we would recommend leaning MPA&#x2F;hypermedia when possible, whereas it seems fairly certain Mr. Harris would lean SPA&#x2F;javascript.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-elephant-in-the-room-complexity&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-elephant-in-the-room-complexity&quot; aria-label=&quot;Anchor link for: the-elephant-in-the-room-complexity&quot;&gt;üîó&lt;&#x2F;a&gt;The Elephant In The Room: Complexity&lt;&#x2F;h2&gt;
&lt;p&gt;Unfortunately, there is a topic that Mr. Harris does not discuss, and we believe this may be because he doesn‚Äôt see it.  He is a javascript developer who is passionate about that language and who swims in the engineering culture of front end frameworks, so the current &lt;em&gt;complexity&lt;&#x2F;em&gt; of javascript front end development seems natural to him.  For many of us, however,  the javascript ecosystem is simply &lt;em&gt;insanely&lt;&#x2F;em&gt; overly-complicated.  Comically so, in fact, given the requirements of most web applications.&lt;&#x2F;p&gt;
&lt;p&gt;Many of the ‚Äútransitional‚Äù technologies that Mr. Harris goes on to mention: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vercel.com&#x2F;blog&#x2F;everything-about-react-server-components&quot;&gt;React Server Components&lt;&#x2F;a&gt; (which he calls ‚Äúlike html over the wire, but vastly more sophisticated), &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;markojs.com&#x2F;&quot;&gt;Marko&lt;&#x2F;a&gt; (which is doing ‚Äúpartial hydration‚Äù), &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BuilderIO&#x2F;qwik&quot;&gt;Quik&lt;&#x2F;a&gt; (which aggressively lazy loads things, apparently), are all remarkable engineering achievements, but are also all, we must say, quite complicated.&lt;&#x2F;p&gt;
&lt;p&gt;This is, unfortunately, part of the culture of front end development right now: sky-high levels of complexity are tolerated in application frameworks, in build tool chains, in deployment models and so on, and, when problems arise due to all this complexity, more complexity is often offered as the answer.&lt;&#x2F;p&gt;
&lt;p&gt;‚ÄúSimple‚Äù is disparaging and ‚Äúsophisticated‚Äù is high praise.&lt;&#x2F;p&gt;
&lt;p&gt;This complexity is overwhelming many developers and development teams today.  As Mr. Harris himself points out when discussing Instagram, even some of
the best front-end engineers in the world appear to be unable to keep it all under control.&lt;&#x2F;p&gt;
&lt;p&gt;So there is a cultural issue here.&lt;&#x2F;p&gt;
&lt;p&gt;There is a technical issue as well.&lt;&#x2F;p&gt;
&lt;p&gt;This technical issue can be summarized as ‚ÄúThe Hypermedia Approach‚Äù vs. ‚ÄúThe Remote Procedure Call (RPC) Approach‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;When web applications moved from MPAs to SPAs, they adopted, often unwittingly, an RPC approach to application development:
AJAX moved to JSON as a data serialization format and largely (&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;hypermedia-apis-vs-data-apis&#x2F;&quot;&gt;and correctly&lt;&#x2F;a&gt;)
abandoned the hypermedia concept.   This abandonment of The Hypermedia Approach was driven by the admitted usability
issues with vanilla MPAs.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out, however, that those usability issues often &lt;em&gt;can&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;&quot;&gt;be addressed&lt;&#x2F;a&gt; using The Hypermedia Approach:
rather than &lt;em&gt;abandoning&lt;&#x2F;em&gt; Hypermedia for RPC, what we needed then and what we need today is a &lt;em&gt;more powerful&lt;&#x2F;em&gt; Hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly what htmx gives you.&lt;&#x2F;p&gt;
&lt;p&gt;By returning to The Hypermedia Approach, you can build reasonably sophisticated web applications that address many of
Mr. Harris‚Äôs concerns regarding MPAs at a fraction of the complexity required by most popular SPA frameworks.  Further, without
thinking about it very much, you will get all &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer#Architectural_concepts&quot;&gt;the benefits&lt;&#x2F;a&gt;
that Roy Fielding outlined about truly REST-ful architectures.&lt;&#x2F;p&gt;
&lt;p&gt;Is The Hypermedia Architecture right for all web applications?  Obviously not.&lt;&#x2F;p&gt;
&lt;p&gt;Is it right for many, and perhaps most, web applications?  We certainly think so, at least in part.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-the-resistance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#javascript-the-resistance&quot; aria-label=&quot;Anchor link for: javascript-the-resistance&quot;&gt;üîó&lt;&#x2F;a&gt;Javascript: The Resistance&lt;&#x2F;h2&gt;
&lt;p&gt;Now we get to the most emotionally charged claim made in the talk: that ‚Äúthe ship has sailed‚Äù on javascript, and that
we should accept that it will be the dominant programming language in web development going forward.&lt;&#x2F;p&gt;
&lt;p&gt;Mr. Harris believes that it will be &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Edge_computing&quot;&gt;edge computing&lt;&#x2F;a&gt; that will be the
driver that finally eliminates the remaining, scattered opposition to javascript.&lt;&#x2F;p&gt;
&lt;p&gt;We are not so sure about that.&lt;&#x2F;p&gt;
&lt;p&gt;To the contrary, we do not expect edge computing to figure in the majority of web applications for the foreseeable future.
Or, to be frank, ever. CPU is cheap, network speeds are fast and increasing and microservices are a mess.&lt;&#x2F;p&gt;
&lt;p&gt;And, contra what Mr. Harris says, today the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;insights.stackoverflow.com&#x2F;trends?tags=java%2Cc%2Cc%2B%2B%2Cpython%2Cc%23%2Cvb.net%2Cjavascript%2Cassembly%2Cphp%2Cperl%2Cruby%2Cvb%2Cswift%2Cr%2Cobjective-c&quot;&gt;trend is not obviously in javascripts favor&lt;&#x2F;a&gt;.  Five years ago, we, as founding members
of the javascript resistance, were despairing of any hope of stopping the Javascript juggernaut.  But then something
unexpected happened: Python took off and, at the same time, javascript flat lined:&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;language-trends-so.png&quot; alt=&quot;Javascript Devs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This trend of javascript peaking in the mid-2010‚Äôs can be observed &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.benfrederickson.com&#x2F;ranking-programming-languages-by-github-users&#x2F;&quot;&gt;on GitHub&lt;&#x2F;a&gt; as well:&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;language-trends-github.png&quot; alt=&quot;Javascript Devs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now, does this mean javascript will eventually ‚Äúlose‚Äù to Python and go away?&lt;&#x2F;p&gt;
&lt;p&gt;Of course not.  Javascript is a core technology of the web and will be with us forever.  Without it, we couldn‚Äôt have built
htmx (or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt;) so we are very thankful for javascript.&lt;&#x2F;p&gt;
&lt;p&gt;But this &lt;em&gt;does&lt;&#x2F;em&gt; imply that the future of the web does not &lt;em&gt;necessarily&lt;&#x2F;em&gt; belong &lt;em&gt;entirely&lt;&#x2F;em&gt; to javascript, as appeared to be the case 
say five years ago.&lt;&#x2F;p&gt;
&lt;p&gt;We are fond of talking about the HOWL stack: Hypermedia On Whatever you‚Äôd Like.  The idea is that, by returning to a (more powerful) Hypermedia Architecture, you can use whatever backend language you‚Äôd like: python, lisp, haskell, go, java, c#, whatever.  Even javascript, if you like.&lt;&#x2F;p&gt;
&lt;p&gt;Since you are using hypermedia &amp;amp; HTML for your server interactions, you don‚Äôt feel that pressure to adopt javascript on
the backend that a huge javascript front end produces.  You can still use javascript, of course, (perhaps in the form of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&quot;&gt;alpine.js&lt;&#x2F;a&gt;)
but you use it in the manner it was originally intended: as a light, front end scripting language for enhancing your
application.  Or, if you are brave, perhaps you can try &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt; for these needs.&lt;&#x2F;p&gt;
&lt;p&gt;This is a world we would prefer to live in: many programming language options, each with their own strengths, technical cultures and thriving
communities, all able to participate in the web development world through the magic of more powerful hypermedia, rather than a
monolith of SPAs-talking-to-Node-in-JSON.  Diversity, after all, is our strength.&lt;&#x2F;p&gt;
&lt;p&gt;In conclusion,&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;js-devs-be-thinking.png&quot; alt=&quot;Javascript Devs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.6.1 has been released!</title>
        <published>2021-11-22T00:00:00+00:00</published>
        <updated>2021-11-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-11-22-htmx-1-6-1-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-11-22-htmx-1-6-1-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-6-1-release&quot;&gt;htmx 1.6.1 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.6.1&#x2F;&quot;&gt;1.6.1 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A new &lt;code&gt;HX-Retarget&lt;&#x2F;code&gt; header allows you to change the default target of returned content&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;htmx:beforeSwap&lt;&#x2F;code&gt; event now includes another configurable property: &lt;code&gt;detail.isError&lt;&#x2F;code&gt; which can
be used to indicate if a given response should be treated as an error or not&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;htmx:afterRequest&lt;&#x2F;code&gt; event has two new detail properties: &lt;code&gt;success&lt;&#x2F;code&gt; and &lt;code&gt;failed&lt;&#x2F;code&gt;, allowing you to write 
trigger filters in htmx or hyperscript:&lt;pre data-lang=&quot;applescript&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-applescript &quot;&gt;&lt;code class=&quot;language-applescript&quot; data-lang=&quot;applescript&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; htmx:afterRequest[failed]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; #myCheckbox&amp;#39;s checked to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed the &lt;code&gt;from:&lt;&#x2F;code&gt; option in &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;&quot;&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to support &lt;code&gt;closest &amp;lt;CSS selector&amp;gt;&lt;&#x2F;code&gt; 
and &lt;code&gt;find &amp;lt;CSS selector&amp;gt;&lt;&#x2F;code&gt; forms&lt;&#x2F;li&gt;
&lt;li&gt;Don‚Äôt boost anchor tags with an explicit &lt;code&gt;target&lt;&#x2F;code&gt; set&lt;&#x2F;li&gt;
&lt;li&gt;Don‚Äôt cancel all events on boosted elements, only the events that naturally trigger them (click for anchors, submit
for forms)&lt;&#x2F;li&gt;
&lt;li&gt;Persist revealed state in the DOM so that on history navigation, revealed elements are not re-requested&lt;&#x2F;li&gt;
&lt;li&gt;Process all &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-ext&#x2F;&quot;&gt;&lt;code&gt;hx-ext&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attributes, even if no other htmx attribute is on the element&lt;&#x2F;li&gt;
&lt;li&gt;Snapshot the current URL on load so that history support works properly after a page refresh occurs&lt;&#x2F;li&gt;
&lt;li&gt;Many, many documentation updates (thank you to all the contributors!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>HATEOAS</title>
        <published>2021-10-16T00:00:00+00:00</published>
        <updated>2022-02-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/hateoas/" type="text/html"/>
        <id>https://htmx.org/essays/hateoas/</id>
        <content type="html">&lt;link rel=&quot;preconnect&quot; href=&quot;https:&#x2F;&#x2F;fonts.googleapis.com&quot;&gt;
&lt;link rel=&quot;preconnect&quot; href=&quot;https:&#x2F;&#x2F;fonts.gstatic.com&quot; crossorigin&gt;
&lt;link href=&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family=Lexend+Zetta:wght@900&amp;display=swap&amp;text=HATEOAS&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family=Lexend+Zetta:wght@900&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family=Source+Serif+Pro:ital,wght@0,400;0,600;0,700;1,400;1,700&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;
&lt;h1&gt;HATEOAS&lt;&#x2F;h1&gt;
&lt;section&gt;
&lt;h2 id=&quot;preface-hateoas-an-alternative-explanation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#preface-hateoas-an-alternative-explanation&quot; aria-label=&quot;Anchor link for: preface-hateoas-an-alternative-explanation&quot;&gt;üîó&lt;&#x2F;a&gt;Preface: &lt;em&gt;HATEOAS ‚Äî An Alternative Explanation&lt;&#x2F;em&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This page is a reworking on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HATEOAS&quot;&gt;Wikipedia Entry on HATEOAS&lt;&#x2F;a&gt;, which uses JSON.
Here we use HTML to explain the concept, and contrast it with JSON APIs.  It is a more opinionated explanation of the
concept than would be appropriate for Wikipedia, but it is more correct in our opinion.&lt;&#x2F;p&gt;
&lt;&#x2F;section&gt;
&lt;p&gt;Hypermedia as the Engine of Application State (HATEOAS) is a constraint of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST application architecture&lt;&#x2F;a&gt; that distinguishes it from other network application architectures.&lt;&#x2F;p&gt;
&lt;p&gt;With HATEOAS, a client interacts with a network application whose application servers provide information dynamically through &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypermedia&quot;&gt;&lt;em&gt;hypermedia&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. A REST client needs little to no prior knowledge about how to interact with an application or server beyond a generic understanding of hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, today JSON-based web clients typically interact through a fixed interface shared through documentation via a tool
such as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;swagger.io&#x2F;&quot;&gt;swagger&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The restrictions imposed by HATEOAS decouples client and server. This enables server functionality to evolve independently.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example&quot; aria-label=&quot;Anchor link for: example&quot;&gt;üîó&lt;&#x2F;a&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;A user-agent that implements HTTP makes a HTTP request of a REST end point through a simple URL. All subsequent requests the user-agent may make are discovered within the hypermedia responses to each request. The media types used for these representations, and the link relations they may contain, are standardized. The client transitions through application states by selecting from links within a hypermedia representation or by manipulating the representation in other ways afforded by its media type.&lt;&#x2F;p&gt;
&lt;p&gt;In this way, RESTful interaction is driven by hypermedia, rather than out-of-band information.&lt;&#x2F;p&gt;
&lt;p&gt;A concrete example will clarify this.  Consider this GET request, issued by a web browser, which fetches a bank account resource:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;GET &#x2F;accounts&#x2F;12345 HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;Host: bank.example.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server responds with a hypermedia representation using HTML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Account number: 12345&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Balance: $100.00 USD&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Links:
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;deposits&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;withdrawals&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;transfers&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;close-requests&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;close-requests&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The response contains following possible follow-up actions: navigate to a UI to enter a deposit, withdrawal, transfer, or to close request (to close the account).&lt;&#x2F;p&gt;
&lt;p&gt;Consider the situation at a later point, after the account has been overdrawn.  Now, a different set of links are available due to this
account status change.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Account number: 12345&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Balance: -$50.00 USD&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Links:
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;deposits&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only one link is available: to deposit more money. In the accounts current overdrawn state the other actions are not available, and
this fact is reflected internally in &lt;em&gt;the hypermedia&lt;&#x2F;em&gt;.  The web browser does not know about the concept of an overdrawn account or,
indeed, even what an account is.  It simply knows how to present hypermedia representations to a user.&lt;&#x2F;p&gt;
&lt;p&gt;Hence we have the notion of the Hypermedia being the Engine of Application State. What actions are possible varies as the
state of the resource varies and this information is encoded in the hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;Contrast the HTML response above with a typical JSON API which, instead, might return a representation of the account with a
status field:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;HTTP&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.1 200&lt;&#x2F;span&gt;&lt;span&gt; OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;-50.00
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;overdrawn&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we can see that the client must know specifically what the value of the &lt;code&gt;status&lt;&#x2F;code&gt; field means and how it might affect
the rendering of a user interface, and what actions can be taken with it.  The client must also know what URLs must be used
for manipulation of this resource since they are not encoded in the response.  This would typically be achieved by
consulting documentation for the JSON API.&lt;&#x2F;p&gt;
&lt;p&gt;It is this requirement of out-of-band information that distinguishes this JSON API from a RESTful API that implements
HATEOAS.&lt;&#x2F;p&gt;
&lt;p&gt;This shows the core difference between the two approaches: in the RESTful, HATEOAS HTML representation, all operations are encoded
directly in the response.  In the JSON API example, out-of-band information is necessary for processing and working with
the remote resource.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;origins&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#origins&quot; aria-label=&quot;Anchor link for: origins&quot;&gt;üîó&lt;&#x2F;a&gt;Origins&lt;&#x2F;h2&gt;
&lt;p&gt;The HATEOAS constraint is an essential part of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer#Uniform_interface&quot;&gt;‚Äúuniform interface‚Äù&lt;&#x2F;a&gt; feature of REST, as defined in Roy Fielding‚Äôs &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;top.htm&quot;&gt;doctoral dissertation&lt;&#x2F;a&gt;. Fielding‚Äôs dissertation was a discussion of the
early web architecture, consisting mainly of HTML and HTTP at the time.&lt;&#x2F;p&gt;
&lt;p&gt;Fielding has further described the concept, and the crucial requirement of hypermedia, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;roy.gbiv.com&#x2F;untangled&#x2F;2008&#x2F;rest-apis-must-be-hypertext-driven&quot;&gt;on his blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hateoas-and-json&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hateoas-and-json&quot; aria-label=&quot;Anchor link for: hateoas-and-json&quot;&gt;üîó&lt;&#x2F;a&gt;HATEOAS and JSON&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;NOTE: The Neutral Tone Of This Section is Disputed&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the early 2000s the concept of REST was appropriated from its initial conceptual environment as a description of the early web into other areas of web development: first XML API development (often using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SOAP&quot;&gt;SOAP&lt;&#x2F;a&gt;) and then JSON API development.  This, despite the fact that neither XML nor JSON was a natural hypermedia in the same manner as HTML.&lt;&#x2F;p&gt;
&lt;p&gt;In order to characterize different levels of adherence to REST in these new areas, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Richardson_Maturity_Model&quot;&gt;The Richardson Maturity Model&lt;&#x2F;a&gt; was proposed, consisting of various levels of ‚Äúmaturity‚Äù of APIs, with the highest level,
Level 3, consisting of ‚ÄúHypermedia Controls‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;JSON is not a natural hypermedia and, therefore, hypermedia concepts can only be imposed on top of it.  A JSON engineer
attempting to meet Level 3 of the Richardson Maturity Model might return the following JSON corresponding to the
bank account example above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;HTTP&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.1 200&lt;&#x2F;span&gt;&lt;span&gt; OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;account_number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12345&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;balance&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;currency&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;usd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;100.00
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;links&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;withdrawals&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;transfers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;close-requests&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;close-requests&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, the ‚Äúhypermedia controls‚Äù are encoded in a &lt;code&gt;links&lt;&#x2F;code&gt; property on the account object.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, the client of this API still needs to know quite a bit of additional information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What http methods can be used against these URLs?&lt;&#x2F;li&gt;
&lt;li&gt;Can it issue a &lt;code&gt;GET&lt;&#x2F;code&gt; to these URLs in order to get a representation of the mutation in question?&lt;&#x2F;li&gt;
&lt;li&gt;If it can &lt;code&gt;POST&lt;&#x2F;code&gt; to a given URL, what values are expected?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Compare the above JSON with the following HTTP response, retrieved by a browser after a user has clicked on the
link to &lt;code&gt;&#x2F;accounts&#x2F;12345&#x2F;deposits&lt;&#x2F;code&gt; found in the first HTML example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;post&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;accounts&#x2F;12345&#x2F;deposits&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;amount&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;number&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Submit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this HTML response encodes all the information necessary to update the account balance, providing a &lt;code&gt;form&lt;&#x2F;code&gt; with a &lt;code&gt;method&lt;&#x2F;code&gt;
and &lt;code&gt;action&lt;&#x2F;code&gt; attribute, as well as the inputs necessary for updating the resource correctly.&lt;&#x2F;p&gt;
&lt;p&gt;The JSON representation does not have the same self-contained ‚Äúuniform interface‚Äù as the HTML representation does.&lt;&#x2F;p&gt;
&lt;p&gt;Labelling JSON APIs, no matter how far they stray from RESTful concepts, as ‚ÄòREST‚Äô has lead Roy Fielding to say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am getting frustrated by the number of people calling any HTTP-based interface a REST API. Today‚Äôs example is the SocialSite REST API. That is RPC. It screams RPC. There is so much coupling on display that it should be given an X rating.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While attempts have been made to impose more elaborate hypermedia controls on JSON APIs, broadly the industry has rejected
this approach in favor of simpler RPC-style APIs that forego HATEOAS and other elements of the REST-ful architecture.&lt;&#x2F;p&gt;
&lt;p&gt;This fact is strong evidence for the assertion that a natural hypermedia such as HTML is a practical
necessity for building RESTful systems.&lt;&#x2F;p&gt;
&lt;style&gt;
  .content {
    font-family: &#x27;Source Serif Pro&#x27;, serif;
    text-align: justify;
    hyphens: auto;
    margin-bottom: 3em;
  }

  .content h1 {
    font-family: &#x27;Lexend Zetta&#x27;, Haettenschweiler, Impact, sans-serif;
    margin: 16px;
    font-size: min(10vw, 6em);
    line-height: 1em;
    margin-bottom: 5rem;
    text-align: center;
  }

  .content section:after {
    content: &#x27;&lt; &#x2F; &gt;&#x27;;
    content: &#x27;&lt; &#x2F; &gt;&#x27; &#x2F; &#x27;&#x27;;
    display: block;
    margin-bottom: 32px;
    text-align: center;
    color: #aaa;
    font-weight: bold;
    letter-spacing: .5em;
  }

  .content h2 {
    font-size: 1em;
    margin: 16px;
    margin-top: 32px;
    text-transform: uppercase;
    letter-spacing: .1em;
    text-align: center;
  }
    .content h2 em {
      text-transform: none;
      letter-spacing: 0;
    }

  .content a {
    font-variant: all-small-caps;
    letter-spacing: .08em;
    font-weight: 600;
  }

  .content blockquote {
    border: none;
    font-style: italic;
    font-size: 1.1em;
  }
&lt;&#x2F;style&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.6.0 has been released!</title>
        <published>2021-10-02T00:00:00+00:00</published>
        <updated>2021-10-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-10-02-htmx-1-6-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-10-02-htmx-1-6-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-6-0-release&quot;&gt;htmx 1.6.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.6.0&#x2F;&quot;&gt;1.6.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features-major-changes&quot;&gt;New Features &amp;amp; Major Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Completely reworked &lt;code&gt;&amp;lt;script&amp;gt;&lt;&#x2F;code&gt; tag support that now supports the &lt;code&gt;&amp;lt;script src=&amp;quot;...&#x27;&#x2F;&amp;gt;&lt;&#x2F;code&gt; form&lt;&#x2F;li&gt;
&lt;li&gt;You can now use the value &lt;code&gt;unset&lt;&#x2F;code&gt; to clear a property that would normally be inherited (e.g. hx-confirm)&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;htmx-added&lt;&#x2F;code&gt; class is added to new content before a swap and removed after the settle phase, which allows you
more flexibility in writing CSS transitions for added content (rather than relying on the target, as with &lt;code&gt;htmx-settling&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;htmx:beforeSwap&lt;&#x2F;code&gt; event has been updated to allow you to &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#modifying_swapping_behavior_with_events&quot;&gt;configure swapping&lt;&#x2F;a&gt;
behavior&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved &lt;code&gt;&amp;lt;title&amp;gt;&lt;&#x2F;code&gt; extraction support&lt;&#x2F;li&gt;
&lt;li&gt;You can listen to events on the &lt;code&gt;window&lt;&#x2F;code&gt; object using the &lt;code&gt;from:&lt;&#x2F;code&gt; modifier in &lt;code&gt;hx-trigger&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;root&lt;&#x2F;code&gt; option of the &lt;code&gt;intersect&lt;&#x2F;code&gt; event was fixed&lt;&#x2F;li&gt;
&lt;li&gt;Boosted forms respect the &lt;code&gt;enctype&lt;&#x2F;code&gt; declaration&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;HX-Boosted&lt;&#x2F;code&gt; header will be sent on requests from boosted elements&lt;&#x2F;li&gt;
&lt;li&gt;Promises are not returned from the main ajax function unless it is an api call (i.e. &lt;code&gt;htmx.ajax&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Splitting Your Data &amp;amp; Application APIs: Going Further</title>
        <published>2021-09-16T00:00:00+00:00</published>
        <updated>2022-02-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/splitting-your-apis/" type="text/html"/>
        <id>https://htmx.org/essays/splitting-your-apis/</id>
        <content type="html">&lt;p&gt;&lt;strong&gt;TLDR:&lt;&#x2F;strong&gt; If you split your API into Data and Application APIs, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;max.engineer&#x2F;server-informed-ui&quot;&gt;as advocated here&lt;&#x2F;a&gt;, 
you should consider changing your Application API from JSON to Hypermedia (HTML) &amp;amp; using a &lt;em&gt;hypermedia-oriented&lt;&#x2F;em&gt; library like
&lt;a href=&quot;&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt; to reap the benefits of the hypermedia model (simplicity, reliability, flexibility, etc.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-problem&quot; aria-label=&quot;Anchor link for: the-problem&quot;&gt;üîó&lt;&#x2F;a&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Recently, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;max.engineer&#x2F;&quot;&gt;Max Chernyak&lt;&#x2F;a&gt; wrote an essay entitled 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;max.engineer&#x2F;server-informed-ui&quot;&gt;Don‚Äôt Build A General Purpose API To Power Your Own Front End&lt;&#x2F;a&gt;.  His
TLDR is this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;YAGNI, unless you‚Äôre working in a big company with federated front-ends or GraphQL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;He then discusses some of the different needs of a general purpose API and your application API.  He lists the 
following as needs for a generic API:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding-left:64px&quot;&gt;
&lt;ol&gt;
&lt;li&gt;How to predict and enable all possible workflows&lt;&#x2F;li&gt;
&lt;li&gt;How to avoid N+1 requests for awkward workflows&lt;&#x2F;li&gt;
&lt;li&gt;How to test functionality, performance, and security of every possible request&lt;&#x2F;li&gt;
&lt;li&gt;How to change the API without breaking the existing workflows&lt;&#x2F;li&gt;
&lt;li&gt;How to prioritize API changes between internal and community requirements&lt;&#x2F;li&gt;
&lt;li&gt;How to document everything so that all parties can get stuff done&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And these as application API needs:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding-left:64px&quot;&gt;
&lt;ol&gt;
&lt;li&gt;How to collect all the data needed to render a page&lt;&#x2F;li&gt;
&lt;li&gt;How to optimize requests to multiple endpoints&lt;&#x2F;li&gt;
&lt;li&gt;How to avoid using API data fields in unintended ways&lt;&#x2F;li&gt;
&lt;li&gt;How to weigh the benefit of new features against the cost of new API requests&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I will term this misalignment of needs the &lt;strong&gt;Data&#x2F;App API Impedance Mismatch&lt;&#x2F;strong&gt; problem.&lt;&#x2F;p&gt;
&lt;p&gt;Max‚Äôs recommendation is to split the API into two ‚Äúhalves‚Äù: a generic API and an application API:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I suggest you stop treating your frontend as some generic API client, and start treating it as a half of your app.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine if you could just send it the whole ‚Äúpage‚Äù worth of JSON. Make an endpoint for &lt;code&gt;&#x2F;page&#x2F;a&lt;&#x2F;code&gt; and render the whole JSON for &lt;code&gt;&#x2F;page&#x2F;a&lt;&#x2F;code&gt; there. 
Do this for every page. Don‚Äôt force your front-end developers to send a bunch of individual requests to render a complex page. 
Stop annoying them with contrived limitations. Align yourselves.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;right-about-what-s-wrong&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#right-about-what-s-wrong&quot; aria-label=&quot;Anchor link for: right-about-what-s-wrong&quot;&gt;üîó&lt;&#x2F;a&gt;Right about What‚Äôs Wrong&lt;&#x2F;h2&gt;
&lt;p&gt;I agree entirely with Max on the problem here.&lt;&#x2F;p&gt;
&lt;p&gt;I would particularly emphasise the fact that the generic API needs to be stable, whereas the application API must change 
rapidly to address application needs.&lt;&#x2F;p&gt;
&lt;p&gt;Jean-Jacques Dubray, in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;articles&#x2F;no-more-mvc-frameworks&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt; relates the following sad state of affairs for
API designers:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The worst part of my job these days is designing APIs for front-end developers. The conversation goes inevitably as: &lt;&#x2F;p&gt;
&lt;p&gt;Dev ‚Äì So, this screen has data element x,y,z‚Ä¶ could you please create an API with the response format {x: , y:, z: }&lt;&#x2F;p&gt;
&lt;p&gt;Me ‚Äì Ok&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is a perfect encapsulation of the tension that Max has noticed, where API engineers want to design general, 
stable APIs, but are subject to the whims of a quickly-changing UI with complex data needs that are often best
solved on &lt;em&gt;the server side&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As Max points out:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can keep ‚Äúpage a‚Äù dumb to only do what it needs to do. You test the crap out of ‚Äúpage a‚Äù for bugs, security, performance. You can even fetch everything for ‚Äúpage a‚Äù in a single big SQL query.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;wrong-about-what-s-right&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wrong-about-what-s-right&quot; aria-label=&quot;Anchor link for: wrong-about-what-s-right&quot;&gt;üîó&lt;&#x2F;a&gt;Wrong about What‚Äôs Right&lt;&#x2F;h2&gt;
&lt;p&gt;So, again, I agree entirely with Max that there is a Data&#x2F;App API Impedance Mismatch problem and I applaud him for suggesting 
that, rather than bailing out to a solution to like GraphQL, you split the APIs into two.&lt;&#x2F;p&gt;
&lt;p&gt;However, there is a &lt;strong&gt;next step&lt;&#x2F;strong&gt; to take:&lt;&#x2F;p&gt;
&lt;p&gt;Once you have split your application API from your generic data API, &lt;em&gt;you are no longer bound by the constraints of
a public data API&lt;&#x2F;em&gt; and are free to reconsider the &lt;em&gt;entire form&lt;&#x2F;em&gt; of that application API.  We can do whatever we‚Äôd like with 
it, so let‚Äôs get a bit expansive in our thinking.&lt;&#x2F;p&gt;
&lt;p&gt;Note that core problems with the application API are rapid change and page (or resource) specific tuning.  It turns out that we
have a very good technology for dealing with &lt;em&gt;exactly&lt;&#x2F;em&gt; this problem: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypermedia&quot;&gt;Hypermedia&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Hypermedia, by way of HATEOAS, makes API churn &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;02&#x2F;17&#x2F;api-churn-vs-security.html&quot;&gt;much less of a problem&lt;&#x2F;a&gt;.  When you change the shape of your hypermedia API, well, 
that‚Äôs fine: the &lt;em&gt;new&lt;&#x2F;em&gt; API is simply reflected in the &lt;em&gt;new&lt;&#x2F;em&gt; HTML returned by the server.  You can add and modify end points
and, lo and behold (to a first order of approximation) your clients (that is, browsers) don‚Äôt need to be updated.&lt;&#x2F;p&gt;
&lt;p&gt;The browsers simply see the new HTML, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;05&#x2F;08&#x2F;hatoeas-is-for-humans.html&quot;&gt;the humans driving them react to the new functionality appropriately&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So, while I feel Max is on the right track, I also think he &lt;em&gt;doesn‚Äôt go far enough&lt;&#x2F;em&gt;: once you have made the mental 
jump to solving the Data&#x2F;APP API Impedance Mismatch problem by splitting the two into separate concerns, it is only a 
bit further down the road to rediscovering the advantages of hypermedia.&lt;&#x2F;p&gt;
&lt;p&gt;You may object that: ‚ÄúOh, but hypermedia applications aren‚Äôt very usable, we don‚Äôt want to go back to web 1.0.‚Äù&lt;&#x2F;p&gt;
&lt;p&gt;That is a perfectly reasonable objection, but people have been working on that problem and there are now many libraries 
available that address the usability issues of HTML &lt;em&gt;within the hypermedia model&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Two of my favorites are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpoly.com&#x2F;&quot;&gt;unpoly&lt;&#x2F;a&gt; and, of course, my own &lt;a href=&quot;&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-conclusion&quot; aria-label=&quot;Anchor link for: in-conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;In Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;If you switch to a hypermedia application API (which really just means ‚Äúuse HTML, like you used to‚Äù) then you get all
of the benefits of the REST-ful web model (simplicity, reliability, etc.) and of server-side rendering in mature web frameworks
(caching, SQL tuning, etc.)&lt;&#x2F;p&gt;
&lt;p&gt;And, by choosing a hypermedia-oriented front end technology like htmx, you can create &lt;a href=&quot;&#x2F;examples&quot;&gt;excellent user experiences&lt;&#x2F;a&gt; within 
that model.&lt;&#x2F;p&gt;
&lt;p&gt;Everything old is new again, but, this time, a little bit better.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hypermedia APIs vs. Data APIs</title>
        <published>2021-07-17T00:00:00+00:00</published>
        <updated>2022-04-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/hypermedia-apis-vs-data-apis/" type="text/html"/>
        <id>https://htmx.org/essays/hypermedia-apis-vs-data-apis/</id>
        <content type="html">&lt;p&gt;A &lt;em&gt;hypermedia&lt;&#x2F;em&gt; API is an API that returns &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypermedia&quot;&gt;hypermedia&lt;&#x2F;a&gt;, typically HTML over
HTTP.  This style of API is distinguished from data APIs that do not return a hypermedia.  The most familiar form of this
latter style of API today is the ubiquitous JSON API.&lt;&#x2F;p&gt;
&lt;p&gt;These two different types of API have distinctly different design needs and, therefore, should use different design 
constraints and adopt different goals when being created.&lt;&#x2F;p&gt;
&lt;p&gt;Hypermedia APIs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Will be trivially &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST-ful&lt;&#x2F;a&gt;, since they are simply what &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm&quot;&gt;Roy Fielding was describing&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Should be driven by the needs of the underlying hypermedia application&lt;&#x2F;li&gt;
&lt;li&gt;May change dramatically &lt;em&gt;without&lt;&#x2F;em&gt; versioning information, because hypermedia utilizes &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer#Uniform_interface&quot;&gt;self describing messages&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;Should be passed directly to humans, to maximize the flexibility of the system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Data APIs, on the other hand:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Will not benefit dramatically from REST-fulness, beyond perhaps &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Richardson_Maturity_Model&quot;&gt;Level 2 of the Richardson Maturity Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Should strive for both regularity and expressivity due to the arbitrary data needs of consumers&lt;&#x2F;li&gt;
&lt;li&gt;Should be versioned and should be very stable within a particular version of the API&lt;&#x2F;li&gt;
&lt;li&gt;Should be consumed by code, processed and then potentially presented to a human&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;apis-today&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#apis-today&quot; aria-label=&quot;Anchor link for: apis-today&quot;&gt;üîó&lt;&#x2F;a&gt;APIs Today&lt;&#x2F;h2&gt;
&lt;p&gt;Today, APIs are typically thought of in terms of JSON-over-HTTP.  These are almost always data-oriented APIs rather
than hypermedia APIs, although occasionally hypermedia concepts are incorporated into them (typically to
little benefit of the end users.)  There has been a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graphql.org&#x2F;&quot;&gt;movement away&lt;&#x2F;a&gt; from REST-ful APIs as the industry has begun
to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kieranpotts.com&#x2F;rebranding-rest&#x2F;&quot;&gt;recognize the problems with fitting data APIs into the REST-ful model.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a good thing: the industry should question REST-ful ideas in the Data API world and begin looking at older client-server
technologies that did a better job of servicing that particular network architecture, leaving REST instead to the network architecture
that it was coined to describe: hypermedia APIs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;designing-a-hypermedia-api&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-a-hypermedia-api&quot; aria-label=&quot;Anchor link for: designing-a-hypermedia-api&quot;&gt;üîó&lt;&#x2F;a&gt;Designing a Hypermedia API&lt;&#x2F;h2&gt;
&lt;p&gt;To show how a hypermedia API might be designed differently than a data API, let‚Äôs consider the following situation, 
which came up on the &lt;a href=&quot;&#x2F;discord&quot;&gt;htmx discord&lt;&#x2F;a&gt; recently:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want a page with a form and a table on it.  The form will add new elements to the table, and the table will also be
polling every 30 seconds so that updates from other users are shown.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let‚Äôs consider this UI in terms of a base url, &lt;code&gt;&#x2F;contacts&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first thing we will need is an end point to retrieve the form and the table of current contacts.  This will
live at &lt;code&gt;&#x2F;contacts&lt;&#x2F;code&gt;, giving:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  GET &#x2F;contacts -&amp;gt; render the form &amp;amp; contacts table
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we want to be able to create contacts.  This would be done via a POST to the same URL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  GET &#x2F;contacts -&amp;gt; render the form &amp;amp; contacts table
&lt;&#x2F;span&gt;&lt;span&gt;  POST &#x2F;contacts -&amp;gt; create the new contact, redirect to GET &#x2F;contacts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with HTML that looks something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&#x2F;contacts&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;post&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- form for adding contacts --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- contacts table --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far, so standard web 1.0 application, and thus far the data-API and hypermedia API needs haven‚Äôt diverged very much,
although it is worth noteing that the hypermedia API is &lt;em&gt;self describing&lt;&#x2F;em&gt; and could be modified (say, changing the URL for creating
contacts) without breaking the hypermedia application.&lt;&#x2F;p&gt;
&lt;p&gt;Now we get to the part where htmx is needed: polling the server for updates to the table occasionally.  To do this
we will add a new end point, &lt;code&gt;&#x2F;contacts&#x2F;table&lt;&#x2F;code&gt;, which renders only the table of contacts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;  GET &#x2F;contacts -&amp;gt; render the form &amp;amp; contacts table
&lt;&#x2F;span&gt;&lt;span&gt;  POST &#x2F;contacts -&amp;gt; create the new contact, redirect to GET &#x2F;contacts
&lt;&#x2F;span&gt;&lt;span&gt;  GET &#x2F;contacts&#x2F;table -&amp;gt; render the contacts table
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then add a poll trigger to the table:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&#x2F;contacts&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;post&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- form for adding contacts --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-trigger&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;every 30s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-get&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;table&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-swap&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;outerHTML&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- contacts table --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we see the hypermedia API and data API begin to diverge.  This new end point is driven entirely by hypermedia
needs, not data model needs.  This end point can go away if the hypermedia needs of the application change; its form may change 
dramatically and so on, which is entirely acceptable since the system is self-describing.&lt;&#x2F;p&gt;
&lt;p&gt;Since we have updated the HTML to use htmx for polling, we may as well make the form use htmx as well for a better
UX experience:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&#x2F;contacts&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;post&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-boost&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;true&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- form for adding contacts --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-trigger&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;every 30s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-get&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;table&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-swap&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;outerHTML&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;lt;!-- contacts table --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can, if we choose, add additional end points for things like server-side validation of inputs, dynamic forms and 
so forth.  These end points would be driven by &lt;em&gt;hypermedia needs&lt;&#x2F;em&gt; rather than any sort of data model considerations:
we think in terms of what we are trying to achieve with our application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-churn&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#api-churn&quot; aria-label=&quot;Anchor link for: api-churn&quot;&gt;üîó&lt;&#x2F;a&gt;API Churn&lt;&#x2F;h2&gt;
&lt;p&gt;The crux point of this short essay is this: API churn is fine in a hypermedia system because &lt;em&gt;the messages in a hypermedia system are self-describing&lt;&#x2F;em&gt;.
We can thrash the API around and the application doesn‚Äôt break: human users simply see the new hypermedia (HTML) and select what
actions they want to do.&lt;&#x2F;p&gt;
&lt;p&gt;Humans, compared with computers, are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;05&#x2F;08&#x2F;hatoeas-is-for-humans.html&quot;&gt;good at deciding what to do&lt;&#x2F;a&gt;
and are reasonably OK with change.&lt;&#x2F;p&gt;
&lt;p&gt;This is in contrast with data APIs.  Data APIs cannot be modified without breaking client code and thus must be much
more disciplined in their changes.  Data APIs also face pressure to provide higher levels of expressiveness so that they
can satisfy more client needs without modification.&lt;&#x2F;p&gt;
&lt;aside&gt;
&lt;p&gt;&lt;em&gt;This latter situation is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;02&#x2F;17&#x2F;api-churn-vs-security.html&quot;&gt;especially dangerous&lt;&#x2F;a&gt; when these data APIs are consumed in a browser, because any data-api expressiveness available to a front-end developer is also available to a potentially hostile user, who can fire up a console and begin hammering away at the API.  Apparently, facebook uses a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;AdamChainz&#x2F;status&#x2F;1392162996844212232&quot;&gt;whitelist&lt;&#x2F;a&gt; to deal with this.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Do you?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;aside&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;When designing a hypermedia API, you should use a different design mindset than you use for data APIs.  Churn is
much less of a concern, and providing the end points you need for a good hypermedia experience should be your primary goal.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>REST - Explained For Beginners</title>
        <published>2021-07-13T00:00:00+00:00</published>
        <updated>2022-02-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/rest-explained/" type="text/html"/>
        <id>https://htmx.org/essays/rest-explained/</id>
        <content type="html">&lt;p&gt;There is no topic that generates more confusion in web development than the idea of Representational State Transfer, 
known as REST.  This term comes from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm&quot;&gt;Chapter 5&lt;&#x2F;a&gt; 
of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Roy_Fielding&quot;&gt;Roy Fielding‚Äôs&lt;&#x2F;a&gt; PhD thesis at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.uci.edu&#x2F;&quot;&gt;U.C. Irvine&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this essay we will go through this Chapter and summarize the important concepts for non-academic web developers.  The 
thesis is dense and involves a lot of technical jargon that isn‚Äôt relevant to people who aren‚Äôt academics interested
in formal PhD thesis writing.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of this essay you should have a better handle on REST, and the concept of a 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;Uniform Interface&lt;&#x2F;a&gt; in particular.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#overview&quot; aria-label=&quot;Anchor link for: overview&quot;&gt;üîó&lt;&#x2F;a&gt;Overview&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing to understand about REST is that &lt;em&gt;it is a description of the original web&lt;&#x2F;em&gt;.  Fielding describes REST as an 
‚Äúarchitectural style for distributed hypermedia systems‚Äù, which sounds fancy but just means the web we all know and love:
clicking on hyperlinks, submitting forms, looking at images, reading paragraphs and all that jazz.&lt;&#x2F;p&gt;
&lt;p&gt;It was &lt;em&gt;NOT&lt;&#x2F;em&gt; created as a description of a particular approach for JSON APIs, although that is the context
that most people hear about REST today in.  Fielding was describing the early web and, in particular, how it was different
from earlier client&#x2F;server architectures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;section-5-1-deriving-rest&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#section-5-1-deriving-rest&quot; aria-label=&quot;Anchor link for: section-5-1-deriving-rest&quot;&gt;üîó&lt;&#x2F;a&gt;Section 5.1 Deriving Rest&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1&quot;&gt;section 5.1&lt;&#x2F;a&gt;, unfortunately for 
non-academics, Fielding adopts the technique of deriving REST from first principles.  Here I will summarize each section
and clarify and add context in the important ones.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client-server&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-server&quot; aria-label=&quot;Anchor link for: client-server&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_2&quot;&gt;Client Server&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;REST is, of course, a client-server architecture, since the web is a client (browser) server (http server) system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stateless&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#stateless&quot; aria-label=&quot;Anchor link for: stateless&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_3&quot;&gt;Stateless&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The web, most developers know, is intended to be stateless.  All requests should encapsulate all information necessary
to understand that request.  For example, there should not be a long running transaction implicitly associated with a series
of requests, as you might have with a SQL database session.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cache&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#cache&quot; aria-label=&quot;Anchor link for: cache&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_4&quot;&gt;Cache&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;HTTP, you probably know, has a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Caching&quot;&gt;caching mechanism&lt;&#x2F;a&gt; built into 
it.  You don‚Äôt need to know the details of this now, but may explore it later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;uniform-interface&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#uniform-interface&quot; aria-label=&quot;Anchor link for: uniform-interface&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_5&quot;&gt;Uniform Interface&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This section, in my mind, is the crux of the REST architecture and, unfortunately, is very brief, so we will spend some
time expanding on it, rather that just summarizing it.  The chapter begins:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The central feature that distinguishes the REST architectural style from other network-based styles 
is its emphasis on a uniform interface between components &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To clarify the discussion around exactly what the uniform interface is, let‚Äôs consider some simple HTML that I hope
everyone reading this will understand:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Name: Joe Blow
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Email: joe@blow.com
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;42&#x2F;edit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Edit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;42&#x2F;email&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Email&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;42&#x2F;archive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Archive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have a basic bit of html, with some divs, a bit of information and then some anchor tags to perform various 
operations on a contact.  Nothing fancy.  Again, for the discussion, imagine this content could be found at 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;example.com&#x2F;contacts&#x2F;42&quot;&gt;http:&#x2F;&#x2F;example.com&#x2F;contacts&#x2F;42&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Back to the dissertation:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;REST is defined by four interface constraints: identification of resources; manipulation of resources through 
representations; self-descriptive messages; and, hypermedia as the engine of application state.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let‚Äôs go through each of these in turn.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;identification-of-resources&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#identification-of-resources&quot; aria-label=&quot;Anchor link for: identification-of-resources&quot;&gt;üîó&lt;&#x2F;a&gt;Identification of Resources&lt;&#x2F;h4&gt;
&lt;p&gt;The first aspect of Rest is the idea of &lt;em&gt;resources&lt;&#x2F;em&gt; that are found somewhere via‚Ä¶ well, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;Common_questions&#x2F;What_is_a_URL&quot;&gt;Universal Resource Locators&lt;&#x2F;a&gt;, or URLs.  Note that the HTML contains additional URLs for the actions that you can perform on this
resource (&lt;code&gt;contacts&#x2F;1&lt;&#x2F;code&gt;), following the conventional hierarchical arrangement of URL paths.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;manipulation-of-resources-through-representations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#manipulation-of-resources-through-representations&quot; aria-label=&quot;Anchor link for: manipulation-of-resources-through-representations&quot;&gt;üîó&lt;&#x2F;a&gt;Manipulation of Resources Through Representations&lt;&#x2F;h4&gt;
&lt;p&gt;This sounds fancy, but it just means that you can update and mutate the resource (that is, the contact) through various
representations (that is HTML pages) rather than having to issues, say, SQL, to modify it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;self-descriptive-messages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-descriptive-messages&quot; aria-label=&quot;Anchor link for: self-descriptive-messages&quot;&gt;üîó&lt;&#x2F;a&gt;Self Descriptive Messages&lt;&#x2F;h4&gt;
&lt;p&gt;This is a key concept of REST.  Note that the browser, which is the client in this client-server setup, &lt;em&gt;knows nothing
about contacts&lt;&#x2F;em&gt;.  And yet it is able to render a ‚ÄúContact UI‚Äù simply by rendering the HTML returned by the server.  The
message itself is entirely self-describing, containing all information the client needs about both the data and the possible
operations on that data (in the form of links.)&lt;&#x2F;p&gt;
&lt;p&gt;Now, contrast this with a JSON representation of the same data:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;name&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Joe Blow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;email&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;joe@example.com&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Obviously this is smaller, but a client working with this data must decide two crucial things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How to render it&lt;&#x2F;li&gt;
&lt;li&gt;What actions are available to mutate it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first part is typically done with a client side template.  The second is typically done by reading the documentation
for the API and encoding the interactions with the server directly in the client.&lt;&#x2F;p&gt;
&lt;p&gt;This is the crux of the difference between REST-ful systems and traditional client-server system: in the REST-ful system
the client (i.e. the browser) doesn‚Äôt know anything about the resource, it just knows how to render a hypermedia.  In
the client-server system, knowledge about the resource is embedded in the client.&lt;&#x2F;p&gt;
&lt;p&gt;There are pros and cons to both approaches, but the REST-ful approach, in the form of the early web, proved to be
extremely reliable and flexible.  It hides a tremendous amount of knowledge about the resources behind this &lt;em&gt;uniform
interface&lt;&#x2F;em&gt; of HTML, so the client doesn‚Äôt have the opportunity to break in the way the thick-client does.&lt;&#x2F;p&gt;
&lt;p&gt;Now, you may have noticed that, in the last decade, web development has trended away from the REST-ful architecture
and towards a more traditional client-server setup, using JSON APIs.  And you may have noticed a lot more discussion and
issues around versioning APIs, providing more general query functionality and so on.  This is not accidental: we are
losing the flexibility of the REST-ful model as we turn the browser into a VM for hosting thick client applications.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hypermedia-as-the-engine-of-application-state-hateoas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hypermedia-as-the-engine-of-application-state-hateoas&quot; aria-label=&quot;Anchor link for: hypermedia-as-the-engine-of-application-state-hateoas&quot;&gt;üîó&lt;&#x2F;a&gt;Hypermedia As The Engine of Application State (HATEOAS)&lt;&#x2F;h4&gt;
&lt;p&gt;This last concept dovetails with the previous one: clients transition application state by interacting with URLs
found in the hypermedia itself (via forms and links).  So, in the HTML example above, the ability to edit, email
and archive the contact all encoded as anchors in the HTML.  If one of those actions was not available, or a new
one became available, it would come down in a new bit of HTML, after a page refresh.&lt;&#x2F;p&gt;
&lt;p&gt;This is in contrast with a thick client approach where, for example, a local store may be sync‚Äôd asynchronously with
a back end and, thus, the HTML is not acting as the engine of application state, but rather as a (somewhat janky)
UI description language.&lt;&#x2F;p&gt;
&lt;p&gt;Somewhat hilariously, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HATEOAS&quot;&gt;Wikipedia article on HATEOAS&lt;&#x2F;a&gt; uses JSON, which is not
a natural hypermedia.  You can layer some REST-ful behavior on top of JSON if you want, but it has rarely been useful
in the real world, and HATEOAS is usually ignored in JSON APIs.  This makes sense because JSON APIs are useful mainly
for the traditional client-server architecture and aren‚Äôt particularly amenable to the REST-ful style.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;uniform-interface-summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#uniform-interface-summary&quot; aria-label=&quot;Anchor link for: uniform-interface-summary&quot;&gt;üîó&lt;&#x2F;a&gt;Uniform Interface Summary&lt;&#x2F;h4&gt;
&lt;p&gt;That‚Äôs the crux of REST and really the crux of this essay.  You can read on for a bit more detail and analysis of Fieldings
paper, but the core take away here is that there is a sharp distinction between a REST-ful hypermedia architecture and
traditional client-server architectures, and that distinction revolves mainly around the concept of a uniform interface,
and the self-describing nature of them in particular.&lt;&#x2F;p&gt;
&lt;p&gt;Again, don‚Äôt get bogged down in the jargon here, just think about this HTML and what a miracle of flexibility and
ingenuity it is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Name: Joe Blow
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Email: joe@blow.com
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;42&#x2F;edit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Edit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;42&#x2F;email&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Email&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;contacts&#x2F;42&#x2F;archive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Archive&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;layered-system&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#layered-system&quot; aria-label=&quot;Anchor link for: layered-system&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_6&quot;&gt;Layered System&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You don‚Äôt need to know much about this, except that &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Content_delivery_network&quot;&gt;CDNs exist&lt;&#x2F;a&gt;, and you should use them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code-on-demand&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-on-demand&quot; aria-label=&quot;Anchor link for: code-on-demand&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_1_7&quot;&gt;Code-On-Demand&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Again, you don‚Äôt need to know much about this, except that &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;javascript&quot;&gt;Javascript exists&lt;&#x2F;a&gt;, and 
that it‚Äôs the only part that‚Äôs optional.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;section-5-2-rest-architectural-elements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#section-5-2-rest-architectural-elements&quot; aria-label=&quot;Anchor link for: section-5-2-rest-architectural-elements&quot;&gt;üîó&lt;&#x2F;a&gt;Section 5.2 - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_2&quot;&gt;REST Architectural Elements&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I won‚Äôt drill in as deeply on this section as we did others because it gets pretty technical and, frankly, is a bit
boring and repetitive (as one might expect from a dissertation.)  The two big ideas in this section are Resources and
Representations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;section-5-2-1-resources-and-resource-identifiers&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#section-5-2-1-resources-and-resource-identifiers&quot; aria-label=&quot;Anchor link for: section-5-2-1-resources-and-resource-identifiers&quot;&gt;üîó&lt;&#x2F;a&gt;Section 5.2.1 - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_2&quot;&gt;Resources and Resource Identifiers&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;From the paper:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key abstraction of information in REST is a resource. Any information that can be named can be a resource: a document
or image, a temporal service (e.g. ‚Äútoday‚Äôs weather in Los Angeles‚Äù), a collection of other resources, a 
non-virtual object (e.g. a person), and so on. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Practically, a resource is anything that can be addressed by a URL.  What happens when you access a URL?&lt;&#x2F;p&gt;
&lt;p&gt;Well, you get back a &lt;em&gt;representation&lt;&#x2F;em&gt; of that resource, in the form of an HTTP response that may contain HTML, directives
and so forth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;section-5-2-1-representations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#section-5-2-1-representations&quot; aria-label=&quot;Anchor link for: section-5-2-1-representations&quot;&gt;üîó&lt;&#x2F;a&gt;Section 5.2.1 - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_2&quot;&gt;Representations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I don‚Äôt find a lot of practical use in this section.  There is some stuff on control data, media types and so forth,
which are all worth learning about eventually when needed, but aren‚Äôt a commonly used aspect of web development.&lt;&#x2F;p&gt;
&lt;p&gt;The remaining sections 5.2 similarly do not offer much to the generalist.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;section-5-3-rest-architectural-views&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#section-5-3-rest-architectural-views&quot; aria-label=&quot;Anchor link for: section-5-3-rest-architectural-views&quot;&gt;üîó&lt;&#x2F;a&gt;Section 5.3 - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_3&quot;&gt;REST Architectural Views&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In what is becoming a pattern, I again do not feel there is a lot of useful new information for the average web
developer in this section, with one big exception: it lays out the benefits of REST.&lt;&#x2F;p&gt;
&lt;p&gt;From the paper:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;REST‚Äôs client-server separation of concerns simplifies component implementation, reduces the complexity of connector semantics, 
improves the effectiveness of performance tuning, and increases the scalability of pure server components. 
Layered system constraints allow intermediaries‚Äìproxies, gateways, and firewalls‚Äìto be introduced at various points
in the communication without changing the interfaces between components, thus allowing them to assist in communication 
translation or improve performance via large-scale, shared caching. REST enables intermediate processing by constraining
messages to be self-descriptive: interaction is stateless between requests, standard methods and media types are used
to indicate semantics and exchange information, and responses explicitly indicate cacheability.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is all very true, and is why the web has been so successful and will continue to be successful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sections-5-4-5-5-related-work-summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sections-5-4-5-5-related-work-summary&quot; aria-label=&quot;Anchor link for: sections-5-4-5-5-related-work-summary&quot;&gt;üîó&lt;&#x2F;a&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_4&quot;&gt;Sections 5.4&lt;&#x2F;a&gt; &amp;amp; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm#sec_5_5&quot;&gt;5.5&lt;&#x2F;a&gt; - Related Work &amp;amp; Summary&lt;&#x2F;h2&gt;
&lt;p&gt;These brief sections are not relevant to non-academics interested in REST. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;üîó&lt;&#x2F;a&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;So there you have it, a brief tour of Chapter 5 of Roy Fielding‚Äôs disseration, which gave us the term REST.  I have
focused in on the areas that I think are most important for web developers to understand and tried to convey how
REST describes the original web model.  The uniform interface concept is, in my opinion, the most important and interesting
aspect of REST, and is useful for web developers to understand as it is primarily responsible for the benefits described
above.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I hope you can see how inappropriate REST is for describing most JSON APIs in use today.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.5.0 has been released!</title>
        <published>2021-07-12T00:00:00+00:00</published>
        <updated>2021-07-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-7-12-htmx-1-5-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-7-12-htmx-1-5-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-5-0-release&quot;&gt;htmx 1.5.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.5.0&#x2F;&quot;&gt;1.5.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features-major-changes&quot;&gt;New Features &amp;amp; Major Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Support tracking of button clicked during a form submission&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-request&#x2F;&quot;&gt;hx-request&lt;&#x2F;a&gt; attribute, allowing you to configure the following aspects of the request
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;&#x2F;code&gt; - the timeout of the request&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;credentials&lt;&#x2F;code&gt; - if the request will send credentials&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;noHeaders&lt;&#x2F;code&gt; - strips all headers from the request&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Along with the above attribute, you can configure the default values for each of these via the corresponding &lt;code&gt;htmx.config&lt;&#x2F;code&gt;
properties (e.g. &lt;code&gt;htmx.config.timeout&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Conditional polling via the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;&quot;&gt;hx-trigger&lt;&#x2F;a&gt; attribute&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;document&lt;&#x2F;code&gt; is now a valid pseudo-selector on the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;&quot;&gt;hx-trigger&lt;&#x2F;a&gt; &lt;code&gt;from:&lt;&#x2F;code&gt; argument, allowing you
to listen for events on the document.&lt;&#x2F;li&gt;
&lt;li&gt;Both the &lt;code&gt;scroll&lt;&#x2F;code&gt; and &lt;code&gt;show&lt;&#x2F;code&gt; options on &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-swap&#x2F;&quot;&gt;hx-swap&lt;&#x2F;a&gt; now support extended syntax for selecting the
element to scroll or to show, including the pseudo-selectors &lt;code&gt;window:top&lt;&#x2F;code&gt; and &lt;code&gt;window:bottom&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.4.0 has been released!</title>
        <published>2021-05-25T00:00:00+00:00</published>
        <updated>2021-05-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-5-25-htmx-1-4-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-5-25-htmx-1-4-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-4-0-release&quot;&gt;htmx 1.4.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.4.0&#x2F;&quot;&gt;1.4.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features-major-changes&quot;&gt;New Features &amp;amp; Major Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Added the &lt;code&gt;queue&lt;&#x2F;code&gt; option to the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;&quot;&gt;hx-trigger&lt;&#x2F;a&gt; attribute, allowing you to specify how events
should be queued when they are received with a request in flight&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;htmx.config.useTemplateFragments&lt;&#x2F;code&gt; option was added, allowing you to use HTML template tags for parsing content
from the server.  This allows you to use Out of Band content when returning things like table rows, but it is not
IE11 compatible.&lt;&#x2F;li&gt;
&lt;li&gt;Introduced a new synthetic event, &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#special-events&quot;&gt;intersect&lt;&#x2F;a&gt; that allows you to trigger when an item is scrolled into view
as specified by the &lt;code&gt;IntersectionObserver&lt;&#x2F;code&gt; API&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;htmx.config.withCredentials&lt;&#x2F;code&gt; option was added, to send credentials with ajax requests (default is &lt;code&gt;false&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-swap&lt;&#x2F;code&gt; now supports the &lt;code&gt;none&lt;&#x2F;code&gt; option&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;defaultSettleDelay&lt;&#x2F;code&gt; was dropped to 20ms from 100ms&lt;&#x2F;li&gt;
&lt;li&gt;Fixed timing issue that caused exceptions in the &lt;code&gt;reveal&lt;&#x2F;code&gt; logic when scrolling at incredible speeds - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;463&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;463&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Fixed bug causing SVG titles to be incorrectly used as page title - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;459&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;459&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Boosted forms that issue a GET will now push the URL by default - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;485&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;485&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Better dispatch of request events when an element is removed from the DOM&lt;&#x2F;li&gt;
&lt;li&gt;Fixed a bug causing &lt;code&gt;hx-prompt&lt;&#x2F;code&gt; to fail&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;throttle&lt;&#x2F;code&gt; option on &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; does not delay the initial request any longer&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;meta&lt;&#x2F;code&gt; key is ignored on boosted links&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;&#x2F;code&gt; tags are now evaluated in the global scope&lt;&#x2F;li&gt;
&lt;li&gt;Safari text selection bug - &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;438&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;438&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.3.0 has been released!</title>
        <published>2021-03-06T00:00:00+00:00</published>
        <updated>2021-03-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-3-6-htmx-1-3-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-3-6-htmx-1-3-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-3-0-release&quot;&gt;htmx 1.3.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.3.0&#x2F;&quot;&gt;1.3.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features-major-changes&quot;&gt;New Features &amp;amp; Major Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Support a &lt;code&gt;target&lt;&#x2F;code&gt; modifier on &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; to filter based on the element targeted by an event.  This allows
lazy binding to that target selector.&lt;&#x2F;li&gt;
&lt;li&gt;Events are no longer consumed by the first element that might handle them, unless the &lt;code&gt;consume&lt;&#x2F;code&gt; keyword is
added to the &lt;code&gt;hx-trigger&lt;&#x2F;code&gt; specification&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;code&gt;htmx:beforeSend&lt;&#x2F;code&gt; event, fired just before an ajax request begins&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;htmx.ajax()&lt;&#x2F;code&gt; now returns a promise&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SSE swaps are properly settled&lt;&#x2F;li&gt;
&lt;li&gt;Fixed bug that was improperly cancelling all clicks on anchors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.2.0 has been released!</title>
        <published>2021-02-13T00:00:00+00:00</published>
        <updated>2021-02-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-2-13-htmx-1-2-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-2-13-htmx-1-2-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-2-0-release&quot;&gt;htmx 1.2.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.2.0&#x2F;&quot;&gt;1.2.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features-major-changes&quot;&gt;New Features &amp;amp; Major Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hx-vars&lt;&#x2F;code&gt; has been deprecated in favor of &lt;code&gt;hx-vals&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-vals&lt;&#x2F;code&gt; now supports a &lt;code&gt;javascript:&lt;&#x2F;code&gt; prefix to achieve the behavior that &lt;code&gt;hx-vars&lt;&#x2F;code&gt; provided&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;code&gt;hx-headers&lt;&#x2F;code&gt; attribute allows you to add headers to a request via an attribute.  Like &lt;code&gt;hx-vals&lt;&#x2F;code&gt; it supports
JSON or javascript via the &lt;code&gt;javascript:&lt;&#x2F;code&gt; prefix&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-include&lt;&#x2F;code&gt; will now include all inputs under an element, even if that element is not a form tag&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;preload&#x2F;&quot;&gt;preload extension&lt;&#x2F;a&gt; now offers a &lt;code&gt;preload-images=&amp;quot;true&amp;quot;&lt;&#x2F;code&gt; attribute that will aggressively load images in preloaded content&lt;&#x2F;li&gt;
&lt;li&gt;On requests driven by a history cache miss, the new &lt;code&gt;HX-History-Restore-Request&lt;&#x2F;code&gt; header is included so that the server
can differentiate between history requests and normal requests &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvements-bug-fixes&quot;&gt;Improvements &amp;amp; Bug fixes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Improved handling of precedence of input values to favor the enclosing form (see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;commit&#x2F;a10e43d619dc340aa324d37772c06a69a2f47ec9&quot;&gt;here&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Moved event filtering logic &lt;em&gt;after&lt;&#x2F;em&gt; &lt;code&gt;preventDefault&lt;&#x2F;code&gt; so filtering still allows events to be properly handled&lt;&#x2F;li&gt;
&lt;li&gt;No longer trigger after swap events on elements that have been removed via an &lt;code&gt;outerHTML&lt;&#x2F;code&gt; swap&lt;&#x2F;li&gt;
&lt;li&gt;Properly remove event handlers added to other elements when an element is removed from the DOM&lt;&#x2F;li&gt;
&lt;li&gt;Handle the &lt;code&gt;scroll:&lt;&#x2F;code&gt; modifier in &lt;code&gt;hx-swap&lt;&#x2F;code&gt; properly when an &lt;code&gt;outerHTML&lt;&#x2F;code&gt; swap occurs&lt;&#x2F;li&gt;
&lt;li&gt;Lots of docs fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.1.0 has been released!</title>
        <published>2021-01-06T00:00:00+00:00</published>
        <updated>2021-01-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2021-1-6-htmx-1-1-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2021-1-6-htmx-1-1-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-1-0-release&quot;&gt;htmx 1.1.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.1.0&#x2F;&quot;&gt;1.1.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;p&gt;This is a surprisingly big release, but the star of the show isn‚Äôt htmx itself, but rather the new 
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;preload&#x2F;&quot;&gt;preload extension&lt;&#x2F;a&gt; which allows you to preload requests into the cache,
cutting down on latency.  (This extension is used in the htmx website!)&lt;&#x2F;p&gt;
&lt;p&gt;There are also new examples, including &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;keyboard-shortcuts&#x2F;&quot;&gt;keyboard shortcuts&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;sortable&#x2F;&quot;&gt;drag and drop list reordering with Sortable.js&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Newly added &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;preload&#x2F;&quot;&gt;preload extension&lt;&#x2F;a&gt; allows you to preload resources for lower
latency requests!&lt;&#x2F;li&gt;
&lt;li&gt;Support the &lt;code&gt;ignore:&lt;&#x2F;code&gt; modifier for extensions&lt;&#x2F;li&gt;
&lt;li&gt;Updated form variable order inclusion to include the enclosing form &lt;em&gt;last&lt;&#x2F;em&gt; so that, in the presence of multiple 
values, the most relevant value is the most likely to be selected by the server&lt;&#x2F;li&gt;
&lt;li&gt;Support for the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;api&#x2F;#ajax&quot;&gt;&lt;code&gt;htmx.ajax()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; javascript function, to issue an htmx-style ajax 
request from javascript&lt;&#x2F;li&gt;
&lt;li&gt;Removed the following htmx request headers for better cache behavior: &lt;code&gt;HX-Event-Target&lt;&#x2F;code&gt;, &lt;code&gt;HX-Active-Element&lt;&#x2F;code&gt;, 
&lt;code&gt;HX-Active-Element-Name&lt;&#x2F;code&gt;, &lt;code&gt;HX-Active-Element-Value&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-preserve&#x2F;&quot;&gt;&lt;code&gt;hx-preserve&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute, which allows 
you to preserve elements across requests (for example, to keep a video element playing properly)&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;path-deps&#x2F;#refresh&quot;&gt;path-deps&lt;&#x2F;a&gt; now surfaces a small api
for refreshing path dependencies manually in javascript&lt;&#x2F;li&gt;
&lt;li&gt;Now support the &lt;code&gt;from:&lt;&#x2F;code&gt; clause on &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;&quot;&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to
allow an element to respond to events on other elements.&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;code&gt;htmx:beforeProcessNode&lt;&#x2F;code&gt; event, renamed the (previously undocumented) &lt;code&gt;htmx:processedNode&lt;&#x2F;code&gt; to &lt;code&gt;htmx:afterProcessNode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added &lt;code&gt;closest&lt;&#x2F;code&gt; syntax support for the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-indicator&#x2F;&quot;&gt;&lt;code&gt;hx-indicator&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute&lt;&#x2F;li&gt;
&lt;li&gt;Added &lt;code&gt;on load&lt;&#x2F;code&gt; support for the newest version of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;hyperscript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;code&gt;htmx.config.allowEval&lt;&#x2F;code&gt; configuration value, for CSP compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Bug fixes &amp;amp; improvements &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 1.0.0 has been released!</title>
        <published>2020-11-24T00:00:00+00:00</published>
        <updated>2020-11-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-11-24-htmx-1-0-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-11-24-htmx-1-0-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-1-0-0-release&quot;&gt;htmx 1.0.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm happy to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@1.0.0&#x2F;&quot;&gt;1.0.0 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;p&gt;htmx is now mature enough that I can recommend it as a general replacement for intercooler.js
projects.  I &lt;strong&gt;don‚Äôt&lt;&#x2F;strong&gt; think there is a strong reason to port an existing intercooler project to
htmx.  I have several large intercooler apps and will not be moving them over any time soon. I can, however, recommend using htmx over intercooler for new projects.&lt;&#x2F;p&gt;
&lt;p&gt;htmx is a different sort of javascript library.  It is an HTML &amp;amp; hypertext-oriented reply to the current dominance of javascript-based SPA libraries.  It is a response to Tom MacWright‚Äôs question:
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;macwright.com&#x2F;2020&#x2F;10&#x2F;28&#x2F;if-not-spas.html&quot;&gt;‚ÄúIf not SPAs, What?‚Äù&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;&quot;&gt;homepage says&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why should only &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;form&amp;gt;&lt;&#x2F;code&gt; be able to make HTTP requests?&lt;&#x2F;li&gt;
&lt;li&gt;Why should only &lt;code&gt;click&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;submit&lt;&#x2F;code&gt; events trigger them?&lt;&#x2F;li&gt;
&lt;li&gt;Why should only GET &amp;amp; POST be available?&lt;&#x2F;li&gt;
&lt;li&gt;Why should you only be able to replace the entire screen?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;HTML-oriented web development was abandoned not because hypertext was a bad idea, but rather because HTML didn‚Äôt have sufficient expressive power.  htmx aims to fix that &amp;amp; allows you to implement &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;&quot;&gt;many common modern web UI patterns&lt;&#x2F;a&gt; using the original hypertext model of the web.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;history-thanks&quot;&gt;History &amp;amp; Thanks&lt;&#x2F;h3&gt;
&lt;p&gt;htmx began life as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&quot;&gt;intercooler.js&lt;&#x2F;a&gt; back in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;intercooler-js&#x2F;commit&#x2F;62d3dbdb5c056ee866aba3575e148de649fc3efe&quot;&gt;2013&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;commit&#x2F;e38dea64dd1065003a0e833d7b469d24e6bc2919&quot;&gt;april&lt;&#x2F;a&gt; of this year I began work on a jQuery-independent &amp;amp; improved version of intercoolerjs, renamed
to htmx.  I chose to rename the library because, in working on intercooler, I had come to appreciate that intercooler &amp;amp; htmx were completing HTML as a hypertext rather than just some funky, idiosyncratic javascript libraries.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;releases&#x2F;tag&#x2F;v0.0.1&quot;&gt;May&lt;&#x2F;a&gt; htmx reached 0.0.1.  Soon thereafter I had the good fortune of being contacted by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ben_pylo&quot;&gt;Ben Croker&lt;&#x2F;a&gt;
who was interested in htmx as a base for his new reactive library, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;putyourlightson.com&#x2F;plugins&#x2F;sprig&quot;&gt;Sprig&lt;&#x2F;a&gt;.  Ben was willing to be an early adopter of htmx and pushed the library along
much faster than it would have gone otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;I have been very lucky to the have help and feedback from many contributors in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;graphs&#x2F;contributors&quot;&gt;GitHub&lt;&#x2F;a&gt; and on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;discord&quot;&gt;Discord&lt;&#x2F;a&gt;.  I‚Äôd like to thank, in particular, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;benpate&quot;&gt;Ben Pate&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rschroll&quot;&gt;Robert Schroll&lt;&#x2F;a&gt; &amp;amp; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jreviews&quot;&gt;Alejandro Schmeichler&lt;&#x2F;a&gt; for contributing code as well as new ideas and discussions.&lt;&#x2F;p&gt;
&lt;p&gt;I would like to thank &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devmode.fm&#x2F;&quot;&gt;Devmode.fm&lt;&#x2F;a&gt; for having me on to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devmode.fm&#x2F;episodes&#x2F;dynamic-html-with-htmx&quot;&gt;talk about htmx&lt;&#x2F;a&gt; and for cleaning up all my ‚Äúuhhs‚Äù and ‚Äúumms‚Äù.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I would like to thank &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jsampson&quot;&gt;Justin Sampson&lt;&#x2F;a&gt;, who took a lot of time to explain REST &amp;amp; HATEOAS to me and how intercooler (and now htmx) fit into that model for web development.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I bumped the version number :)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.4.0 has been released!</title>
        <published>2020-11-16T00:00:00+00:00</published>
        <updated>2020-11-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-11-16-htmx-0-4-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-11-16-htmx-0-4-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-4-0-release&quot;&gt;htmx 0.4.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.4.0&#x2F;&quot;&gt;0.4 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Now support the &lt;code&gt;HX-Redirect&lt;&#x2F;code&gt; and &lt;code&gt;HX-Refresh&lt;&#x2F;code&gt; response headers for redirecting client side and triggering a page refresh, respectively&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-vars&lt;&#x2F;code&gt; now overrides input values&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;&#x2F;code&gt; tags in responses will be used to update page titles&lt;&#x2F;li&gt;
&lt;li&gt;All uses of &lt;code&gt;eval()&lt;&#x2F;code&gt; have been removed in favor of &lt;code&gt;Function&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-vals&#x2F;&quot;&gt;&lt;code&gt;hx-vals&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is available as a save alternative to &lt;code&gt;hx-vars&lt;&#x2F;code&gt;.  It uses &lt;code&gt;JSON.parse()&lt;&#x2F;code&gt; rather than evaluation, if you wish to safely pass user-provided values through to htmx.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;bug-fixes&quot;&gt;Bug Fixes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Eliminated perf issues around &lt;code&gt;hx-boost&lt;&#x2F;code&gt; in large pages that are not using that attribute&lt;&#x2F;li&gt;
&lt;li&gt;Fixed bug which prevented evaluation when a script tag was the leading content in a response&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Complexity Budget</title>
        <published>2020-10-29T00:00:00+00:00</published>
        <updated>2022-02-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/complexity-budget/" type="text/html"/>
        <id>https://htmx.org/essays/complexity-budget/</id>
        <content type="html">&lt;p&gt;Every application involves managing a complexity budget.  A complexity budget can be defined as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An explicit or implicit allocation of complexity across the entire application&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;‚ÄúComplexity‚Äù here is defined subjectively (rather than &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Programming_complexity&quot;&gt;formally&lt;&#x2F;a&gt;)
and in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;I_know_it_when_I_see_it&quot;&gt;Stewartian Terms&lt;&#x2F;a&gt;: ‚ÄúI know it when I see it.‚Äù  Or, more
specifically to software development, ‚ÄúI know it when I &lt;em&gt;feel&lt;&#x2F;em&gt; it.‚Äù&lt;&#x2F;p&gt;
&lt;p&gt;One of the primary jobs of an application architect is to manage a complexity budget:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Decide if a given feature is ‚Äúworth it‚Äù&lt;&#x2F;li&gt;
&lt;li&gt;Decide if a given implementation is ‚Äúworth it‚Äù&lt;&#x2F;li&gt;
&lt;li&gt;Add in appropriate system boundaries to limit complexity between component&lt;&#x2F;li&gt;
&lt;li&gt;Etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that attempting to address complexity can, in fact, add more complexity.  A good example of this, from experience
is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OSGi&quot;&gt;OSGi&lt;&#x2F;a&gt;, which when applied to an application I was working on, made things
&lt;em&gt;far more complex&lt;&#x2F;em&gt;, grinding development to a halt.  (This is not to say OSGi is universally bad, just that in this
case, rather than boosting developer productivity, it effectively ended it.)&lt;&#x2F;p&gt;
&lt;p&gt;A good software architect is someone who manages their software budget effectively, either explicitly or implicitly&lt;&#x2F;p&gt;
&lt;h2 id=&quot;complexity-growth&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#complexity-growth&quot; aria-label=&quot;Anchor link for: complexity-growth&quot;&gt;üîó&lt;&#x2F;a&gt;Complexity Growth&lt;&#x2F;h2&gt;
&lt;p&gt;I assert, without evidence, that Stewartian Application Complexity grows roughly geometrically with the size of an 
application.  By proper factoring by experienced developers, this curve can be held down for quite some time, and this 
is one major reason why many good developers are so much more productive than others.&lt;&#x2F;p&gt;
&lt;p&gt;However, this doesn‚Äôt change the fact that, somewhere out there, there is a Complexity Wall lurking and, if you aren‚Äôt 
careful you will run into it and grind development to a halt.  I have had multiple experiences with this: one day, 
inexplicably, development on a system that I was working on went from feeling ‚Äúlarge, but manageable‚Äù to 
‚Äúthis is impossible to deal with‚Äù.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spending-your-complexity-budget-wisely&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#spending-your-complexity-budget-wisely&quot; aria-label=&quot;Anchor link for: spending-your-complexity-budget-wisely&quot;&gt;üîó&lt;&#x2F;a&gt;Spending Your Complexity Budget Wisely&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some tools for managing your complexity budget:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Foremost: understanding that there &lt;em&gt;is&lt;&#x2F;em&gt; a complexity budget that needs to be managed&lt;&#x2F;li&gt;
&lt;li&gt;Focus your ‚Äúcomplexity spend‚Äù on the areas where your application is adding value and&#x2F;or differentiates itself&lt;&#x2F;li&gt;
&lt;li&gt;Saying ‚ÄúNo‚Äù - probably the easiest, best and, also, hardest tool to use in your battle with complexity&lt;&#x2F;li&gt;
&lt;li&gt;Embracing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;KISS_principle&quot;&gt;KISS&lt;&#x2F;a&gt;, even if it means admitting you are stupid (It‚Äôs often very good for an organization if the senior developers can admit they are fallible)&lt;&#x2F;li&gt;
&lt;li&gt;Proper factoring of components - this is an art: Too many components and your complexity explodes.  Too few‚Ä¶ same. &lt;&#x2F;li&gt;
&lt;li&gt;Choosing the proper balance of expressiveness and restrictions for a component&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Unfortunately, experience shows that managing Stewartian Complexity is a subjective endeavor, and many talented and
experience developers will disagree on the proper course of action at a given decision point.&lt;&#x2F;p&gt;
&lt;p&gt;None the less, by making the concept of a complexity budget explicit, these conversations can be more productive and
ultimately lead to better software outcomes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-final-note&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-final-note&quot; aria-label=&quot;Anchor link for: a-final-note&quot;&gt;üîó&lt;&#x2F;a&gt;A Final Note&lt;&#x2F;h2&gt;
&lt;p&gt;All mature applications are complex.&lt;&#x2F;p&gt;
&lt;p&gt;Finding a new codebase ‚Äúcomplex‚Äù is &lt;em&gt;not&lt;&#x2F;em&gt; an excuse for tearing everything
apart or aggressive refactoring.  We must always bear in mind &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fs.blog&#x2F;2020&#x2F;03&#x2F;chestertons-fence&#x2F;&quot;&gt;Chesterton‚Äôs Fence&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If an application is functioning well (or even reasonably) then we should assume that the complexity budget was well
(or reasonably) managed.  And we must also bear in mind that, with unfortunate frequency, attempts at addressing complexity
in existing, large applications often fail or, sadly, make things worse.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>SPA Alternative</title>
        <published>2020-10-29T00:00:00+00:00</published>
        <updated>2022-02-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/spa-alternative/" type="text/html"/>
        <id>https://htmx.org/essays/spa-alternative/</id>
        <content type="html">&lt;p&gt;Recently &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;macwright.com&quot;&gt;Tom MacWright&lt;&#x2F;a&gt; has written a few posts on Single Page Applications and their discontents:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;macwright.com&#x2F;2020&#x2F;05&#x2F;10&#x2F;spa-fatigue.html&quot;&gt;Second-guessing the modern web&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;macwright.com&#x2F;2020&#x2F;10&#x2F;28&#x2F;if-not-spas.html&quot;&gt;If not SPAs, What?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The emerging norm for web development is to build a React single-page application, with server rendering. The two key 
elements of this architecture are something like: &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The main UI is built &amp;amp; updated in JavaScript using React or something similar.&lt;&#x2F;li&gt;
&lt;li&gt;The backend is an API that that application makes requests against. &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This idea has really swept the internet. It started with a few major popular websites and has crept into corners 
like marketing sites and blogs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In these two articles Tom lays out the problem associated with the React&#x2F;SPA everywhere mindset.  If I can summarize 
them in one sentence: SPA frameworks tend to be complex, and you don‚Äôt get a lot of benefit for all that
complexity in many cases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-alternative&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-alternative&quot; aria-label=&quot;Anchor link for: an-alternative&quot;&gt;üîó&lt;&#x2F;a&gt;An Alternative&lt;&#x2F;h2&gt;
&lt;p&gt;Tom outlines a few alternatives to the SPA approach in the second article and, I‚Äôm happy to say, mentions htmx.  However,
he classifies htmx (as well as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stimulusjs.org&#x2F;&quot;&gt;Stimulus&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alpinejs&#x2F;alpine&#x2F;&quot;&gt;Alpine.js&lt;&#x2F;a&gt;)
as ‚Äúprogressive-enhancement‚Äù libraries.  This is a good description, but, at least in the case of htmx, I think there 
is a better term to help describe this style of library: &lt;em&gt;HTML-Centric&lt;&#x2F;em&gt; (or, perhaps, &lt;em&gt;Hypertext-Centric&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;html-centric-development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#html-centric-development&quot; aria-label=&quot;Anchor link for: html-centric-development&quot;&gt;üîó&lt;&#x2F;a&gt;HTML-Centric Development&lt;&#x2F;h3&gt;
&lt;p&gt;In HTML-Centric Development, rather than being an afterthought, HTML is embraced as the primary medium of application
development.  This is in contrast to most SPA frameworks, where a client-side model &amp;amp; the javascript that manipulates
it is the central focus.&lt;&#x2F;p&gt;
&lt;p&gt;HTML-Centric Development builds on the original model of the web, as outlined in 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;top.htm&quot;&gt;Roy Fielding‚Äôs PhD dissertation&lt;&#x2F;a&gt;, describing the web
architecture.  In particular, by embracing HTML as a hypertext, you get the benefits of 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ics.uci.edu&#x2F;~fielding&#x2F;pubs&#x2F;dissertation&#x2F;rest_arch_style.htm&quot;&gt;REST and HATEOAS&lt;&#x2F;a&gt;, all without needing to
be an expert in either of those topics.&lt;&#x2F;p&gt;
&lt;p&gt;(Recall, Roy was &lt;em&gt;describing&lt;&#x2F;em&gt; the web architecture, so the original web was
largely REST-ful, without any particular effort on the part of the original participants)&lt;&#x2F;p&gt;
&lt;p&gt;By picking HTML-Centric Development, you accrue many benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A simpler front end allows you to save your &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;complexity-budget&#x2F;&quot;&gt;complexity budget&lt;&#x2F;a&gt; for the back end functionality
that differentiates your application from others.&lt;&#x2F;li&gt;
&lt;li&gt;You do not face pressure to adopt javascript on the back end ‚Äúsince the front end is written in javascript‚Äù.  This allows
you to use the best backend framework for your particular application.&lt;&#x2F;li&gt;
&lt;li&gt;With a simpler front end, a ‚Äúfull stack‚Äù developer can more easily manage and optimize front-to-back optimization in 
your application, leading to much better system tuning&lt;&#x2F;li&gt;
&lt;li&gt;Your web application is going to have HTML in it anyway, so by maximizing its utility you are boosting the power of
an existing component, rather than adding another layer of complexity between the end user and your application code.&lt;&#x2F;li&gt;
&lt;li&gt;The stateless network model of the web has proven very resilient and easy to develop for.  Many mature and battle-tested
technologies and techniques (e.g. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Caching&quot;&gt;caching&lt;&#x2F;a&gt;) exist for 
building HTML-based applications.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;html-the-bad-parts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#html-the-bad-parts&quot; aria-label=&quot;Anchor link for: html-the-bad-parts&quot;&gt;üîó&lt;&#x2F;a&gt;HTML: The Bad Parts&lt;&#x2F;h3&gt;
&lt;p&gt;With all these benefits of the HTML-Centric model, one may wonder why it has been abandoned (and is often mocked) by 
many web developers.  At a high level, the answer is: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;HTML-Centric applications have historically offered a limited 
amount of interactivity when compared with javascript-based applications&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is in large part because HTML is a limited hypertext.  In particular:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Only &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;form&amp;gt;&lt;&#x2F;code&gt; can make HTTP requests&lt;&#x2F;li&gt;
&lt;li&gt;Only &lt;code&gt;click&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;submit&lt;&#x2F;code&gt; events can trigger them&lt;&#x2F;li&gt;
&lt;li&gt;Only GET &amp;amp; POST &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Methods&quot;&gt;HTTP Methods&lt;&#x2F;a&gt; are widely available&lt;&#x2F;li&gt;
&lt;li&gt;A request must replace the entire screen, leading to a clunkly and sometimes jarring user experience&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Of course, none of the constraints are inherent in the concept of a hypertext, and the goal of &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt;
is to remove each of them.&lt;&#x2F;p&gt;
&lt;p&gt;By removing these constraints and completing HTML as a fully-functional and high-powered hypertext, HTML-Centric 
applications can compete with SPAs in many application domains, while at the same time accruing the technical
and complexity benefits mentioned above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;being-brave-technically&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#being-brave-technically&quot; aria-label=&quot;Anchor link for: being-brave-technically&quot;&gt;üîó&lt;&#x2F;a&gt;Being Brave, Technically&lt;&#x2F;h2&gt;
&lt;p&gt;Tom closes his first article with this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if everyone‚Äôs wrong? We‚Äôve been wrong before.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Web development has gone down blind alleys quite a few times: GWT, Java Server Faces, Angular 1, FlatUI, etc.&lt;br &#x2F;&gt;
During the height of the hype cycle around each of these technologies, it was difficult to go against the grain.  It is 
particularly difficult to do in the technology world , where the being left behind technically is not only a threat to 
our ego, but also to our employment.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúNo One Ever Got Fired For Using React‚Äù&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;is today‚Äôs &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúNo One Ever Got Fired For Buying IBM‚Äù&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That‚Äôs a reality that we must accept, even if we feel that React&#x2F;etc. aren‚Äôt appropriate for many (or even most) web
applications being built today.&lt;&#x2F;p&gt;
&lt;p&gt;However, we are starting to see a reconsideration of the SPA approach.  With a bit of technical bravery, a willingness
to stand against the crowd, you may be able to make your application much less complex, and focus your development
efforts on what your application does, rather than on how it does it.&lt;&#x2F;p&gt;
&lt;p&gt;From the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;htmx_org&#x2F;status&#x2F;1306234341056344065&quot;&gt;htmx developer‚Äôs starter kit&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;what_if.png&quot; alt=&quot;What if?&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.3.0 has been released!</title>
        <published>2020-10-27T00:00:00+00:00</published>
        <updated>2020-10-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-10-27-htmx-0-3-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-10-27-htmx-0-3-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-3-0-release&quot;&gt;htmx 0.3.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.3.0&#x2F;&quot;&gt;0.3 release&lt;&#x2F;a&gt; of htmx.  Due to a big testing
push I‚Äôm happy to say that htmx now has &lt;strong&gt;98.4%&lt;&#x2F;strong&gt; test coverage.&lt;&#x2F;p&gt;
&lt;p&gt;That said, this release involves some major surgery on trigger parsing, in particular, so please try it out and let
me know if you see anything funny.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt; parsing has been rewritten and now supports &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#trigger-filters&quot;&gt;trigger filters&lt;&#x2F;a&gt; to filter
events based on arbitrary javascript expressions&lt;&#x2F;li&gt;
&lt;li&gt;htmx now supports two additional response headers &lt;code&gt;HX-Trigger-After-Swap&lt;&#x2F;code&gt; and &lt;code&gt;HX-Trigger-After-Settle&lt;&#x2F;code&gt; allowing
an event to be triggered after a given life cycle event (instead of before the swap)&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;requestConfig&lt;&#x2F;code&gt; is now passed out to events surrounding the AJAX life cycle&lt;&#x2F;li&gt;
&lt;li&gt;Evaluate &lt;code&gt;&amp;lt;script&amp;gt;&lt;&#x2F;code&gt; tags as javascript when no language is defined on them&lt;&#x2F;li&gt;
&lt;li&gt;A new &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;event-header&#x2F;&quot;&gt;&lt;code&gt;event-header&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; extension, which will include a serialized JSON representation of
the triggering event in requests&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;bug-fixes&quot;&gt;Bug Fixes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Ignore non-elements when triggering post-swap events (avoid multiple event triggers when content exists)&lt;&#x2F;li&gt;
&lt;li&gt;Catch errors when attempting to save local history so site continues to function&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.2.0 has been released!</title>
        <published>2020-09-30T00:00:00+00:00</published>
        <updated>2020-09-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-9-30-htmx-0-2-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-9-30-htmx-0-2-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-2-0-release&quot;&gt;htmx 0.2.0 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.2.0&#x2F;&quot;&gt;0.2 release&lt;&#x2F;a&gt; of htmx&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;AJAX file upload is &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#files&quot;&gt;now supported&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The HTML validation API is &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#validation&quot;&gt;now respected&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;bug-fixes&quot;&gt;Bug Fixes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;A selected element no longer breaks response processing in some rare cases&lt;&#x2F;li&gt;
&lt;li&gt;HTMX-related classes (e.g. &lt;code&gt;.htmx-request&lt;&#x2F;code&gt;) are stripped from content before saving for history&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.1.2 has been released!</title>
        <published>2020-09-18T00:00:00+00:00</published>
        <updated>2020-09-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-9-18-htmx-0-1-0-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-9-18-htmx-0-1-0-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-1-2-release&quot;&gt;htmx 0.1.2 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.1.2&#x2F;&quot;&gt;0.1.2 release&lt;&#x2F;a&gt; of htmx as well as the first non-alpha hyperscript
release &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;hyperscript.org@0.0.2&quot;&gt;0.0.2 hyperscript&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The SSE attribute &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-sse&#x2F;&quot;&gt;&lt;code&gt;hx-sse&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and the Web Sockets attribute &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-ws&#x2F;&quot;&gt;&lt;code&gt;hx-ws&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; have changed syntax to now use colon separators: &lt;code&gt;hx-sse=&#x27;connect:&#x2F;chat swap:message&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hyperscript no longer requires a &lt;code&gt;_hyperscript.start()&lt;&#x2F;code&gt; call to initialize.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The SSE attribute &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-sse&#x2F;&quot;&gt;&lt;code&gt;hx-sse&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; allows for swapping content directly on an event, in addition to triggering an htmx element,
with the new &lt;code&gt;swap:&amp;lt;event name&amp;gt;&lt;&#x2F;code&gt; syntax.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-target&#x2F;&quot;&gt;&lt;code&gt;hx-target&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; now supports a &lt;code&gt;find&lt;&#x2F;code&gt; syntax to find elements below the element by a CSS selector&lt;&#x2F;li&gt;
&lt;li&gt;htmx plays better with deferred loading and many package managers&lt;&#x2F;li&gt;
&lt;li&gt;All htmx events are dispatched in both camelCase as well as kebab-case, for better compatibility with AlpineJS and other frameworks.  (e.g. &lt;code&gt;htmx:afterOnLoad&lt;&#x2F;code&gt; will also be triggered as
&lt;code&gt;htmx:after-on-load&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;bug-fixes&quot;&gt;Bug Fixes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The synthetic &lt;code&gt;revealed&lt;&#x2F;code&gt; trigger event is much less of a CPU hog&lt;&#x2F;li&gt;
&lt;li&gt;Multi-select elements now send all values&lt;&#x2F;li&gt;
&lt;li&gt;Exotic element IDs do not break DOM processing&lt;&#x2F;li&gt;
&lt;li&gt;Exotic attribute values do not break the settling phase&lt;&#x2F;li&gt;
&lt;li&gt;Hyperscript now supports &lt;code&gt;$&lt;&#x2F;code&gt; and &lt;code&gt;_&lt;&#x2F;code&gt; in function calls&lt;&#x2F;li&gt;
&lt;li&gt;Hyperscript now supports empty parameter lists&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.0.7 has been released!</title>
        <published>2020-06-30T00:00:00+00:00</published>
        <updated>2020-06-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-6-30-htmx-0-0-7-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-6-30-htmx-0-0-7-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-0-7-release&quot;&gt;htmx 0.0.7 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.0.7&#x2F;&quot;&gt;0.0.7 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;All events fired by htmx have changed name, from &lt;code&gt;&amp;lt;event name&amp;gt;.htmx&lt;&#x2F;code&gt; (the old jQuery style) to &lt;code&gt;htmx:&amp;lt;event name&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-swap&#x2F;&quot;&gt;&lt;code&gt;hx-swap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute now supports two new modifiers:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scroll&lt;&#x2F;code&gt; - allows you to scroll the target to the &lt;code&gt;top&lt;&#x2F;code&gt; or &lt;code&gt;bottom&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;view&lt;&#x2F;code&gt; - allows you to scroll the &lt;code&gt;top&lt;&#x2F;code&gt; or &lt;code&gt;bottom&lt;&#x2F;code&gt; of the target into view&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-push-url&#x2F;&quot;&gt;&lt;code&gt;hx-push-url&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute now can optionally take a URL to push, in addition to &lt;code&gt;true&lt;&#x2F;code&gt; and &lt;code&gt;false&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-vars&#x2F;&quot;&gt;&lt;code&gt;hx-vars&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute that allows you to dynamically add to the parameters that will be submitted with a request&lt;&#x2F;li&gt;
&lt;li&gt;You can now sponsor htmx development via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;bigskysoftware&quot;&gt;GitHub Sponsors&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;A big thanks to our first sponsors!
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;putyourlightson&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;putyourlightson&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;simosentissi&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;simosentissi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jreviews&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jreviews&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.0.8 has been released!</title>
        <published>2020-06-30T00:00:00+00:00</published>
        <updated>2020-06-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-7-8-htmx-0-0-8-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-7-8-htmx-0-0-8-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-0-8-release&quot;&gt;htmx 0.0.8 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.0.8&#x2F;&quot;&gt;0.0.8 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;view&lt;&#x2F;code&gt; modifier on &lt;code&gt;hx-swap&lt;&#x2F;code&gt; has been renamed to &lt;code&gt;show&lt;&#x2F;code&gt;: &lt;code&gt;hx-swap=&#x27;innerHTML show:top&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;new-features&quot;&gt;New Features&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;A bug fix on history when using local anchors: &lt;code&gt;&amp;lt;a href=&amp;quot;#example&amp;quot;&amp;gt;...&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A bug fix for the aforementioned &lt;code&gt;show&lt;&#x2F;code&gt; functionality&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.0.6 has been released!</title>
        <published>2020-06-20T00:00:00+00:00</published>
        <updated>2020-06-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-6-20-htmx-0-0-6-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-6-20-htmx-0-0-6-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-0-6-release&quot;&gt;htmx 0.0.6 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.0.6&#x2F;&quot;&gt;0.0.6 release&lt;&#x2F;a&gt; of htmx.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;hyperscript&quot;&gt;_hyperscript&lt;&#x2F;h4&gt;
&lt;p&gt;With this release comes the release of a new sibling project:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyperscript.org&quot;&gt;https:&#x2F;&#x2F;hyperscript.org&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;hyperscript is a scripting language designed to be embedded directly in HTML and inspired by 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypercard.org&#x2F;HyperTalk%20Reference%202.4.pdf&quot;&gt;HyperTalk&lt;&#x2F;a&gt;, the programming language of HyperCard.&lt;&#x2F;p&gt;
&lt;p&gt;You can see how hyperscript and htmx work together &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;#hyperscript&quot;&gt;in the docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;breaking-changes&quot;&gt;Breaking Changes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Custom request&#x2F;response headers no longer start with the &lt;code&gt;X-&lt;&#x2F;code&gt; prefix, which is no longer recommended&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;X-HTTP-Method-Override&lt;&#x2F;code&gt; is now part of the &lt;code&gt;method-override&lt;&#x2F;code&gt; extension, and AJAX requests use the actual
http method specified for requests.&lt;&#x2F;li&gt;
&lt;li&gt;Extensions that handle swaps must explicitly return an array of elements to process after the swap&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;hx-error-url&lt;&#x2F;code&gt; attribute was removed in favor of hyperscript&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;other-changes&quot;&gt;Other Changes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;empty verb attributes are now allowed and follow the anchor tag semantics (e.g. &lt;code&gt;&amp;lt;div hx-get&amp;gt;&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;nunjuks inline rendering is now supported in the &lt;code&gt;client-side-templates&lt;&#x2F;code&gt; extension&lt;&#x2F;li&gt;
&lt;li&gt;the new &lt;code&gt;ajax-header&lt;&#x2F;code&gt; extension includes the &lt;code&gt;X-Requested-With&lt;&#x2F;code&gt; header&lt;&#x2F;li&gt;
&lt;li&gt;bad JSON is now handled more gracefully&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-swap=&amp;quot;none&amp;quot;&lt;&#x2F;code&gt; will cause no swap to take place &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;89&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;89&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt; now supports a &lt;code&gt;throttle&lt;&#x2F;code&gt; modifier &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;88&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;htmx&#x2F;issues&#x2F;88&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the focused element is preserved if possible after a replacement&lt;&#x2F;li&gt;
&lt;li&gt;perf improvements for large DOM trees with sparse &lt;code&gt;hx-&lt;&#x2F;code&gt; annotations&lt;&#x2F;li&gt;
&lt;li&gt;general bug fixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Locality of Behaviour (LoB)</title>
        <published>2020-05-29T00:00:00+00:00</published>
        <updated>2023-01-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/essays/locality-of-behaviour/" type="text/html"/>
        <id>https://htmx.org/essays/locality-of-behaviour/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;‚ÄúThe primary feature for easy maintenance is locality: Locality is that characteristic of source code that enables a 
programmer to understand that source by looking at only a small portion of it.‚Äù ‚Äì &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.dreamsongs.com&#x2F;Files&#x2F;PatternsOfSoftware.pdf&quot;&gt;Richard Gabriel&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-lob-principle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-lob-principle&quot; aria-label=&quot;Anchor link for: the-lob-principle&quot;&gt;üîó&lt;&#x2F;a&gt;The LoB Principle&lt;&#x2F;h2&gt;
&lt;p&gt;Locality of Behaviour is the principle that: &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The behaviour of a unit of code should be as obvious as possible by looking only at that unit of code&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;discussion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#discussion&quot; aria-label=&quot;Anchor link for: discussion&quot;&gt;üîó&lt;&#x2F;a&gt;Discussion&lt;&#x2F;h2&gt;
&lt;p&gt;The LoB principle is a simple prescriptive formulation of the quoted statement from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.dreamsongs.com&quot;&gt;Richard Gabriel&lt;&#x2F;a&gt;.
In as much as it is possible, and in balance with other concerns, developers should strive to make the behaviour of
a code element obvious on inspection.&lt;&#x2F;p&gt;
&lt;p&gt;Consider two different implementations of an AJAX request in HTML, the first in &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-get&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;clicked&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Click Me&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the second in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jquery.com&#x2F;&quot;&gt;jQuery&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;#d1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;click&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;ajax&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;* AJAX options... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;d1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Click Me&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the former, the behaviour of the &lt;code&gt;button&lt;&#x2F;code&gt; element is obvious on inspection, satisfying the LoB principle.&lt;&#x2F;p&gt;
&lt;p&gt;In the latter, the behaviour of the &lt;code&gt;button&lt;&#x2F;code&gt; element is spread out amongst multiple files.  It is difficult to know
exactly what the button does without a total knowledge of the code base.  This ‚Äúspooky action at a distance‚Äù is a source
of maintenance issues and stands in the way of developers understanding of the code base.&lt;&#x2F;p&gt;
&lt;p&gt;The htmx example demonstrates good Locality of Behaviour, while the jQuery example has poor Locality of Behaviour.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;surfacing-behaviour-vs-inlining-implementation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#surfacing-behaviour-vs-inlining-implementation&quot; aria-label=&quot;Anchor link for: surfacing-behaviour-vs-inlining-implementation&quot;&gt;üîó&lt;&#x2F;a&gt;Surfacing Behaviour vs. Inlining Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;A common objection to Locality of Behaviour is that it is inlining implementation details within a code unit, making the
code unit less abstract and more brittle.  However, it is important to make the distinction between inlining the
&lt;em&gt;implementation&lt;&#x2F;em&gt; of some behaviour and inlining the invocation (or declaration) of some behaviour.&lt;&#x2F;p&gt;
&lt;p&gt;Consider functions in most programming languages: there is a distinction between the declaration of function and its 
use at call sites.  A good function abstracts away its implementation details, but is also invoked in an obvious manner, 
without any spooky action at a distance.&lt;&#x2F;p&gt;
&lt;p&gt;Increasing the obviousness of the behaviour of an element is, ceteris paribus, a good thing, but it falls to both end-developers
and especially framework developers to make LoB both as easy and as conceptually clean as possible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conflict-with-other-development-principles&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conflict-with-other-development-principles&quot; aria-label=&quot;Anchor link for: conflict-with-other-development-principles&quot;&gt;üîó&lt;&#x2F;a&gt;Conflict With Other Development Principles&lt;&#x2F;h3&gt;
&lt;p&gt;The LoB will often conflict with other software development principles.  Two important ones
are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Don%27t_repeat_yourself&quot;&gt;DRY - Don‚Äôt Repeat Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Software developers typically strive to avoid redundancy in their code or data.  This has come to be called ‚ÄúStaying DRY‚Äù,
i.e. Don‚Äôt Repeat Yourself.  Like other software design principles this, on its own, is a good thing.  htmx, for example, 
allows you to place many attributes on parent elements in a DOM and avoid repeating these attributes on children.  This is a 
violation of LoB, in favor of DRY, and such tradeoffs need to be made judiciously by developers.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the further behaviour gets from the code unit it effects, the more severe the violation of LoB.  If it is
within a few lines of the code unit, this is less serious than if it is a page away, which is less serious than if
it is in a separate file entirely.&lt;&#x2F;p&gt;
&lt;p&gt;There is no hard and fast rule, but rather subjective tradeoffs that must be made as software developers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Separation_of_concerns&quot;&gt;SoC - Separation Of Concerns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Separation of concerns a design principle for separating a computer program into distinct sections such that each 
section addresses a separate concern.  A canonical example of this is splitting HTML, CSS, and Javascript.  Again, on its own and
in isolation this may, indeed, be a good thing.  Inlining styles &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tailwindcss.com&#x2F;&quot;&gt;has become more prevalent lately&lt;&#x2F;a&gt;, 
but there are still strong arguments in favor of SoC in this regard.&lt;&#x2F;p&gt;
&lt;p&gt;Note that SoC is, however, in conflict with LoB.  By tweaking a CSS file the look and, to an extent, behaviour of an
element can change dramatically, and it is not obvious where this dramatic change came from.  Tools can help to an extent
here, but there is still ‚Äúspooky action at a distance‚Äù going on.&lt;&#x2F;p&gt;
&lt;p&gt;Again, this isn‚Äôt to condemn SoC wholesale, just to say that there are subjective tradeoffs that must be made when
considering how to structure your code.  The fact that inline styles have become more prevalent as of late is an
indication that SoC is losing some support amongst developers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;üîó&lt;&#x2F;a&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;LoB is a subjective software design principle that can help make a code base more humane and maintainable.  It must be traded
off against other design principles and be considered in terms of the limitations of the system a code unit is
written in, but, as much as is it is practical, adherence to this principle will increase your software maintainability,
quality and sustainability.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>htmx 0.0.4 has been released!</title>
        <published>2020-05-24T00:00:00+00:00</published>
        <updated>2020-05-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-5-24-htmx-0-0-4-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-5-24-htmx-0-0-4-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-0-4-release&quot;&gt;htmx 0.0.4 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.0.4&#x2F;&quot;&gt;0.0.4 release&lt;&#x2F;a&gt; of htmx, this time with no 
project renaming.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h4&gt;
&lt;p&gt;This one had a lot of code clean up along with two major features:&lt;&#x2F;p&gt;
&lt;h5 id=&quot;extensions&quot;&gt;Extensions&lt;&#x2F;h5&gt;
&lt;p&gt;First off, htmx now has a proper &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;&quot;&gt;extensions&lt;&#x2F;a&gt; mechanism, allowing us to create extensions that plug
in to the htmx life cycle and provide functionality that isn‚Äôt in the core library.  Some extensions that have shipped
with this release and that you might find useful include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;morphdom-swap&#x2F;&quot;&gt;&lt;code&gt;morphdom-swap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - allows you to use the morphdom library for swapping in new content&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;class-tools&#x2F;&quot;&gt;&lt;code&gt;class-tools&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - replaces the retired &lt;code&gt;hx-classes&lt;&#x2F;code&gt; attribute&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;json-enc&#x2F;&quot;&gt;&lt;code&gt;json-enc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - allows you to encode AJAX request bodies in JSON&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;See the full list of included &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;extensions&#x2F;#included&quot;&gt;extensions here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This extension mechanism will allow us to introduce useful HTML-oriented features while keeping the core htmx code
focused on loading content.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;web-socket-reworked-server-sent-events-support&quot;&gt;Web Socket &amp;amp; Reworked Server Sent Events Support&lt;&#x2F;h5&gt;
&lt;p&gt;htmx now has experimental support for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;WebSockets_API&#x2F;Writing_WebSocket_client_applications&quot;&gt;Web Sockets&lt;&#x2F;a&gt;
with the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-ws&#x2F;&quot;&gt;hx-ws&lt;&#x2F;a&gt; attribute:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-ws&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;connect wss:&#x2F;chatroom&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;chat_room&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ...
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-ws&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;send&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;chat_message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Additionally, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Server-sent_events&#x2F;Using_server-sent_events&quot;&gt;Server Sent Event&lt;&#x2F;a&gt;
support attribute was renamed to &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-sse&#x2F;&quot;&gt;hx-sse&lt;&#x2F;a&gt; and the syntax was standardized with the new web socket support
syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-sse&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;connect &#x2F;event_stream&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-get&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;chatroom&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;hx-trigger&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;sse:chatter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ...
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There were also many, many bug fixes, many of them contributed by other developers.  So a big thank you to everyone
who helped!&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>kutty, er, htmx 0.0.3 has been released!</title>
        <published>2020-05-17T00:00:00+00:00</published>
        <updated>2020-05-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-5-17-kutty-er-htmx-0-0-3-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-5-17-kutty-er-htmx-0-0-3-is-released/</id>
        <content type="html">&lt;h2 id=&quot;htmx-0-0-3-release&quot;&gt;htmx 0.0.3 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;htmx.org@0.0.3&#x2F;&quot;&gt;0.0.3 release&lt;&#x2F;a&gt; of kutty, er, htmx, the successor
to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;intercoolerjs.org&quot;&gt;intercooler.js&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;why-not-kutty-0-0-2&quot;&gt;Why not kutty 0.0.2?&lt;&#x2F;h4&gt;
&lt;p&gt;One of the reasons you put a &lt;code&gt;0.0.1&lt;&#x2F;code&gt; release out there is to see what happens.  And one of the things that 
happened was that multiple people made comments on how the word ‚Äúkutty‚Äù meant different things in different languages, including
‚Äúsmall‚Äù, ‚Äúchild‚Äù and a very unfortunate meaning in dutch slang.  I had originally 
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;kutty&#x2F;commit&#x2F;b003ccadf855fe49a40ca0b86ca3c9e16448d33c#diff-b9cfc7f2cdf78a7f4b91a753d10865a2&quot;&gt;called the project &lt;code&gt;htmx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; 
(html extensions) and went back and forth between the two names for a bit.&lt;&#x2F;p&gt;
&lt;p&gt;It seems like, upon contact with reality, &lt;code&gt;htmx&lt;&#x2F;code&gt; is a better long term name for the project.  It‚Äôs also
a lot easier to search twitter &amp;amp; reddit for that term.&lt;&#x2F;p&gt;
&lt;p&gt;It‚Äôs a simple fix for anyone who actually used &lt;code&gt;0.0.1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;attributes go from &lt;code&gt;kt-&lt;&#x2F;code&gt; to &lt;code&gt;hx-&lt;&#x2F;code&gt; (their original prefix)&lt;&#x2F;li&gt;
&lt;li&gt;request headers go from  &lt;code&gt;X-KT-&lt;&#x2F;code&gt; to &lt;code&gt;X-HX-&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;kutty&lt;&#x2F;code&gt; goes to &lt;code&gt;htmx&lt;&#x2F;code&gt; for event names, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;changes&quot;&gt;Changes&lt;&#x2F;h4&gt;
&lt;p&gt;OK, so besides the big re-rename, what changed?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A bug fix for the &lt;code&gt;hx-prompt&lt;&#x2F;code&gt; attribute&lt;&#x2F;li&gt;
&lt;li&gt;A bug fix for multiple &lt;code&gt;hx-swap-oob&lt;&#x2F;code&gt; attributes&lt;&#x2F;li&gt;
&lt;li&gt;Moved the default CSS indicator injection into its own sheet to avoid breaking&lt;&#x2F;li&gt;
&lt;li&gt;Added the &lt;code&gt;htmx.config.includeIndicatorStyles&lt;&#x2F;code&gt; configuration option so people can opt out of injecting the indicator CSS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cheers!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>kutty 0.0.1 has been released!</title>
        <published>2020-05-15T00:00:00+00:00</published>
        <updated>2020-05-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://htmx.org/posts/2020-5-15-kutty-0-0-1-is-released/" type="text/html"/>
        <id>https://htmx.org/posts/2020-5-15-kutty-0-0-1-is-released/</id>
        <content type="html">&lt;h2 id=&quot;kutty-0-0-1-release&quot;&gt;Kutty 0.0.1 Release&lt;&#x2F;h2&gt;
&lt;p&gt;I‚Äôm pleased to announce the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;browse&#x2F;kutty.org@0.0.1&#x2F;&quot;&gt;0.0.1 release&lt;&#x2F;a&gt; of kutty, the successor
to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;intercoolerjs.org&quot;&gt;intercooler.js&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Like intercooler, kutty brings features of modern browsers that normally require javascript (AJAX, CSS transitions, etc.) 
directly into HTML.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;why-the-rename&quot;&gt;Why the rename?&lt;&#x2F;h4&gt;
&lt;p&gt;I chose to rename the project for a few reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted the freedom to clean up mistakes and remove ideas that hadn‚Äôt worked out as cleanly as I wanted&lt;&#x2F;li&gt;
&lt;li&gt;The JS in &lt;code&gt;intercooler.js&lt;&#x2F;code&gt; implied a javascript-orientation.  The more I developed intercooler the more I realized
that it was really about enhancing (completing?) HTML, not javascript.  This project doesn‚Äôt really compete with tools 
like angular, vue or react, it‚Äôs something different, so I wanted a different name.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;kutty&lt;&#x2F;code&gt; is short and memorable, &lt;code&gt;kutty.org&lt;&#x2F;code&gt; was available, and it has consonance with ‚Äúcuttlefish‚Äù which is the
official cephalopod of kutty development.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;so-what-s-new-different-about-kutty-vs-intercooler&quot;&gt;So what‚Äôs new &amp;amp; different about kutty vs. intercooler?&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;First and foremost, kutty has &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;kutty&#x2F;blob&#x2F;master&#x2F;package.json&quot;&gt;&lt;em&gt;no external dependencies&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; !
No more dragging in jQuery just to do HTML-oriented web development.  It has been tested with IE11.&lt;&#x2F;li&gt;
&lt;li&gt;It follows conventional naming and behavior standards more closely than intercooler does (e.g. &lt;a href=&quot;&#x2F;attributes&#x2F;kt-swap&quot;&gt;&lt;code&gt;innerHTML&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;&#x2F;attributes&#x2F;kt-swap&quot;&gt;&lt;code&gt;outerHTML&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Kutty isn‚Äôt the kitchen-sink-of-features that intercooler is.  Kutty is more focused on the features that are amenable 
to a declarative approache and less on replacing javascript entirely.&lt;&#x2F;li&gt;
&lt;li&gt;Kutty has a better swapping mechanism which introduces a settling step, which allows for nice CSS transitions
with minimal complexity.  Check out the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;progress-bar&#x2F;&quot;&gt;progress bar&lt;&#x2F;a&gt; to see how this works: by returning
HTML in the old web 1.0 style, you can get nice, smooth CSS-based transitions.  Fun!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Beyond that, basic kutty and intercooler code will look a lot a like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;kt-post&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;clicked&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Click Me!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will issue an AJAX post to &lt;code&gt;&#x2F;clicked&lt;&#x2F;code&gt;, in a manner familiar to anyone who has used intercooler.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-will-happen-to-intercooler&quot;&gt;What will happen to intercooler?&lt;&#x2F;h4&gt;
&lt;p&gt;I‚Äôm planning on maintaining both projects.  Intercooler is a slow moving project anyway, and the code is stable and
works fine for people who want to go the jQuery route.  I have a large application written with it and I‚Äôm not planning
on moving that to kutty any time soon.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;how-hard-will-a-port-to-kutty-from-intercooler-be&quot;&gt;How hard will a port to kutty from intercooler be?&lt;&#x2F;h4&gt;
&lt;p&gt;Depends a lot on how into the weeds you got with intercooler.  The core attributes are pretty close to one another
but if you were using &lt;code&gt;ic-action&lt;&#x2F;code&gt; or event handlers extensively it will be a project.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ok-so-what-should-i-do&quot;&gt;OK, so what should I do?&lt;&#x2F;h4&gt;
&lt;p&gt;The usual:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;read the &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;docs&#x2F;&quot;&gt;docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;star the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;kutty&quot;&gt;repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;tell your friends&lt;&#x2F;li&gt;
&lt;li&gt;enjoy fully functional HTML, the way &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_State_Transfer&quot;&gt;Roy Fielding&lt;&#x2F;a&gt; intended it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Cheers!&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
